<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
<!ENTITY version SYSTEM "version.xml">
]>
<!--ENTITY index-Objects-Grouped SYSTEM "objects_grouped.sgml"-->
<refentry id="GtkWidget">
<refmeta>
<refentrytitle role="top_of_page" id="GtkWidget.top_of_page">GtkWidget</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GTK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GtkWidget</refname>
<refpurpose>Base class for all widgets</refpurpose>
</refnamediv>

<refsynopsisdiv id="GtkWidget.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;gtk/gtk.h&gt;

                    <link linkend="GtkWidget-struct">GtkWidget</link>;
                    <link linkend="GtkWidgetClass">GtkWidgetClass</link>;
enum                <link linkend="GtkWidgetFlags">GtkWidgetFlags</link>;
#define             <link linkend="GTK-WIDGET-TYPE--CAPS">GTK_WIDGET_TYPE</link>                     (wid)
#define             <link linkend="GTK-WIDGET-STATE--CAPS">GTK_WIDGET_STATE</link>                    (wid)
#define             <link linkend="GTK-WIDGET-SAVED-STATE--CAPS">GTK_WIDGET_SAVED_STATE</link>              (wid)
#define             <link linkend="GTK-WIDGET-FLAGS--CAPS">GTK_WIDGET_FLAGS</link>                    (wid)
#define             <link linkend="GTK-WIDGET-TOPLEVEL--CAPS">GTK_WIDGET_TOPLEVEL</link>                 (wid)
#define             <link linkend="GTK-WIDGET-NO-WINDOW--CAPS">GTK_WIDGET_NO_WINDOW</link>                (wid)
#define             <link linkend="GTK-WIDGET-REALIZED--CAPS">GTK_WIDGET_REALIZED</link>                 (wid)
#define             <link linkend="GTK-WIDGET-MAPPED--CAPS">GTK_WIDGET_MAPPED</link>                   (wid)
#define             <link linkend="GTK-WIDGET-VISIBLE--CAPS">GTK_WIDGET_VISIBLE</link>                  (wid)
#define             <link linkend="GTK-WIDGET-DRAWABLE--CAPS">GTK_WIDGET_DRAWABLE</link>                 (wid)
#define             <link linkend="GTK-WIDGET-SENSITIVE--CAPS">GTK_WIDGET_SENSITIVE</link>                (wid)
#define             <link linkend="GTK-WIDGET-PARENT-SENSITIVE--CAPS">GTK_WIDGET_PARENT_SENSITIVE</link>         (wid)
#define             <link linkend="GTK-WIDGET-IS-SENSITIVE--CAPS">GTK_WIDGET_IS_SENSITIVE</link>             (wid)
#define             <link linkend="GTK-WIDGET-CAN-FOCUS--CAPS">GTK_WIDGET_CAN_FOCUS</link>                (wid)
#define             <link linkend="GTK-WIDGET-HAS-FOCUS--CAPS">GTK_WIDGET_HAS_FOCUS</link>                (wid)
#define             <link linkend="GTK-WIDGET-CAN-DEFAULT--CAPS">GTK_WIDGET_CAN_DEFAULT</link>              (wid)
#define             <link linkend="GTK-WIDGET-RECEIVES-DEFAULT--CAPS">GTK_WIDGET_RECEIVES_DEFAULT</link>         (wid)
#define             <link linkend="GTK-WIDGET-HAS-DEFAULT--CAPS">GTK_WIDGET_HAS_DEFAULT</link>              (wid)
#define             <link linkend="GTK-WIDGET-HAS-GRAB--CAPS">GTK_WIDGET_HAS_GRAB</link>                 (wid)
#define             <link linkend="GTK-WIDGET-RC-STYLE--CAPS">GTK_WIDGET_RC_STYLE</link>                 (wid)
#define             <link linkend="GTK-WIDGET-COMPOSITE-CHILD--CAPS">GTK_WIDGET_COMPOSITE_CHILD</link>          (wid)
#define             <link linkend="GTK-WIDGET-APP-PAINTABLE--CAPS">GTK_WIDGET_APP_PAINTABLE</link>            (wid)
#define             <link linkend="GTK-WIDGET-DOUBLE-BUFFERED--CAPS">GTK_WIDGET_DOUBLE_BUFFERED</link>          (wid)
#define             <link linkend="GTK-WIDGET-SET-FLAGS--CAPS">GTK_WIDGET_SET_FLAGS</link>                (wid,flag)
#define             <link linkend="GTK-WIDGET-UNSET-FLAGS--CAPS">GTK_WIDGET_UNSET_FLAGS</link>              (wid,flag)
<link linkend="void">void</link>                (<link linkend="GtkCallback">*GtkCallback</link>)                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gpointer">gpointer</link> data);
                    <link linkend="GtkRequisition">GtkRequisition</link>;
struct              <link linkend="GtkAllocation">GtkAllocation</link>;
                    <link linkend="GtkSelectionData">GtkSelectionData</link>;
                    <link linkend="GtkWidgetAuxInfo">GtkWidgetAuxInfo</link>;
                    <link linkend="GtkWidgetShapeInfo">GtkWidgetShapeInfo</link>;
enum                <link linkend="GtkWidgetHelpType">GtkWidgetHelpType</link>;
<link linkend="GtkWidget">GtkWidget</link>*          <link linkend="gtk-widget-new">gtk_widget_new</link>                      (<link linkend="GType">GType</link> type,
                                                         const <link linkend="gchar">gchar</link> *first_property_name,
                                                         ...);
<link linkend="GtkWidget">GtkWidget</link>*          <link linkend="gtk-widget-ref">gtk_widget_ref</link>                      (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-unref">gtk_widget_unref</link>                    (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-destroy">gtk_widget_destroy</link>                  (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-destroyed">gtk_widget_destroyed</link>                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkWidget">GtkWidget</link> **widget_pointer);
<link linkend="void">void</link>                <link linkend="gtk-widget-set">gtk_widget_set</link>                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *first_property_name,
                                                         ...);
<link linkend="void">void</link>                <link linkend="gtk-widget-unparent">gtk_widget_unparent</link>                 (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-show">gtk_widget_show</link>                     (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-show-now">gtk_widget_show_now</link>                 (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-hide">gtk_widget_hide</link>                     (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-show-all">gtk_widget_show_all</link>                 (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-hide-all">gtk_widget_hide_all</link>                 (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-map">gtk_widget_map</link>                      (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-unmap">gtk_widget_unmap</link>                    (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-realize">gtk_widget_realize</link>                  (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-unrealize">gtk_widget_unrealize</link>                (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-queue-draw">gtk_widget_queue_draw</link>               (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-queue-resize">gtk_widget_queue_resize</link>             (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-queue-resize-no-redraw">gtk_widget_queue_resize_no_redraw</link>   (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-draw">gtk_widget_draw</link>                     (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="GdkRectangle">GdkRectangle</link> *area);
<link linkend="void">void</link>                <link linkend="gtk-widget-size-request">gtk_widget_size_request</link>             (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkRequisition">GtkRequisition</link> *requisition);
<link linkend="void">void</link>                <link linkend="gtk-widget-get-child-requisition">gtk_widget_get_child_requisition</link>    (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkRequisition">GtkRequisition</link> *requisition);
<link linkend="void">void</link>                <link linkend="gtk-widget-size-allocate">gtk_widget_size_allocate</link>            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkAllocation">GtkAllocation</link> *allocation);
<link linkend="void">void</link>                <link linkend="gtk-widget-add-accelerator">gtk_widget_add_accelerator</link>          (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *accel_signal,
                                                         <link linkend="GtkAccelGroup">GtkAccelGroup</link> *accel_group,
                                                         <link linkend="guint">guint</link> accel_key,
                                                         <link linkend="GdkModifierType">GdkModifierType</link> accel_mods,
                                                         <link linkend="GtkAccelFlags">GtkAccelFlags</link> accel_flags);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-remove-accelerator">gtk_widget_remove_accelerator</link>       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkAccelGroup">GtkAccelGroup</link> *accel_group,
                                                         <link linkend="guint">guint</link> accel_key,
                                                         <link linkend="GdkModifierType">GdkModifierType</link> accel_mods);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-accel-path">gtk_widget_set_accel_path</link>           (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *accel_path,
                                                         <link linkend="GtkAccelGroup">GtkAccelGroup</link> *accel_group);
<link linkend="GList">GList</link>*              <link linkend="gtk-widget-list-accel-closures">gtk_widget_list_accel_closures</link>      (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-can-activate-accel">gtk_widget_can_activate_accel</link>       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="guint">guint</link> signal_id);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-event">gtk_widget_event</link>                    (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkEvent">GdkEvent</link> *event);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-activate">gtk_widget_activate</link>                 (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-reparent">gtk_widget_reparent</link>                 (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkWidget">GtkWidget</link> *new_parent);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-intersect">gtk_widget_intersect</link>                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="GdkRectangle">GdkRectangle</link> *area,
                                                         <link linkend="GdkRectangle">GdkRectangle</link> *intersection);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-is-focus">gtk_widget_is_focus</link>                 (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-grab-focus">gtk_widget_grab_focus</link>               (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-grab-default">gtk_widget_grab_default</link>             (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-name">gtk_widget_set_name</link>                 (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *name);
const <link linkend="gchar">gchar</link>*        <link linkend="gtk-widget-get-name">gtk_widget_get_name</link>                 (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-state">gtk_widget_set_state</link>                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkStateType">GtkStateType</link> state);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-sensitive">gtk_widget_set_sensitive</link>            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> sensitive);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-parent">gtk_widget_set_parent</link>               (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkWidget">GtkWidget</link> *parent);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-parent-window">gtk_widget_set_parent_window</link>        (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkWindow">GdkWindow</link> *parent_window);
<link linkend="GdkWindow">GdkWindow</link> *         <link linkend="gtk-widget-get-parent-window">gtk_widget_get_parent_window</link>        (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-uposition">gtk_widget_set_uposition</link>            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-usize">gtk_widget_set_usize</link>                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> width,
                                                         <link linkend="gint">gint</link> height);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-events">gtk_widget_set_events</link>               (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> events);
<link linkend="void">void</link>                <link linkend="gtk-widget-add-events">gtk_widget_add_events</link>               (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> events);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-extension-events">gtk_widget_set_extension_events</link>     (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkExtensionMode">GdkExtensionMode</link> mode);
<link linkend="GdkExtensionMode">GdkExtensionMode</link>    <link linkend="gtk-widget-get-extension-events">gtk_widget_get_extension_events</link>     (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="GtkWidget">GtkWidget</link>*          <link linkend="gtk-widget-get-toplevel">gtk_widget_get_toplevel</link>             (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="GtkWidget">GtkWidget</link>*          <link linkend="gtk-widget-get-ancestor">gtk_widget_get_ancestor</link>             (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GType">GType</link> widget_type);
<link linkend="GdkColormap">GdkColormap</link>*        <link linkend="gtk-widget-get-colormap">gtk_widget_get_colormap</link>             (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-colormap">gtk_widget_set_colormap</link>             (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkColormap">GdkColormap</link> *colormap);
<link linkend="GdkVisual">GdkVisual</link>*          <link linkend="gtk-widget-get-visual">gtk_widget_get_visual</link>               (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="gint">gint</link>                <link linkend="gtk-widget-get-events">gtk_widget_get_events</link>               (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-get-pointer">gtk_widget_get_pointer</link>              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> *x,
                                                         <link linkend="gint">gint</link> *y);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-is-ancestor">gtk_widget_is_ancestor</link>              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkWidget">GtkWidget</link> *ancestor);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-translate-coordinates">gtk_widget_translate_coordinates</link>    (<link linkend="GtkWidget">GtkWidget</link> *src_widget,
                                                         <link linkend="GtkWidget">GtkWidget</link> *dest_widget,
                                                         <link linkend="gint">gint</link> src_x,
                                                         <link linkend="gint">gint</link> src_y,
                                                         <link linkend="gint">gint</link> *dest_x,
                                                         <link linkend="gint">gint</link> *dest_y);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-hide-on-delete">gtk_widget_hide_on_delete</link>           (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-style">gtk_widget_set_style</link>                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkStyle">GtkStyle</link> *style);
#define             <link linkend="gtk-widget-set-rc-style">gtk_widget_set_rc_style</link>             (widget)
<link linkend="void">void</link>                <link linkend="gtk-widget-ensure-style">gtk_widget_ensure_style</link>             (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="GtkStyle">GtkStyle</link>*           <link linkend="gtk-widget-get-style">gtk_widget_get_style</link>                (<link linkend="GtkWidget">GtkWidget</link> *widget);
#define             <link linkend="gtk-widget-restore-default-style">gtk_widget_restore_default_style</link>    (widget)
<link linkend="void">void</link>                <link linkend="gtk-widget-reset-rc-styles">gtk_widget_reset_rc_styles</link>          (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-push-colormap">gtk_widget_push_colormap</link>            (<link linkend="GdkColormap">GdkColormap</link> *cmap);
<link linkend="void">void</link>                <link linkend="gtk-widget-pop-colormap">gtk_widget_pop_colormap</link>             (void);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-default-colormap">gtk_widget_set_default_colormap</link>     (<link linkend="GdkColormap">GdkColormap</link> *colormap);
<link linkend="GtkStyle">GtkStyle</link>*           <link linkend="gtk-widget-get-default-style">gtk_widget_get_default_style</link>        (void);
<link linkend="GdkColormap">GdkColormap</link>*        <link linkend="gtk-widget-get-default-colormap">gtk_widget_get_default_colormap</link>     (void);
<link linkend="GdkVisual">GdkVisual</link>*          <link linkend="gtk-widget-get-default-visual">gtk_widget_get_default_visual</link>       (void);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-direction">gtk_widget_set_direction</link>            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkTextDirection">GtkTextDirection</link> dir);
enum                <link linkend="GtkTextDirection">GtkTextDirection</link>;
<link linkend="GtkTextDirection">GtkTextDirection</link>    <link linkend="gtk-widget-get-direction">gtk_widget_get_direction</link>            (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-default-direction">gtk_widget_set_default_direction</link>    (<link linkend="GtkTextDirection">GtkTextDirection</link> dir);
<link linkend="GtkTextDirection">GtkTextDirection</link>    <link linkend="gtk-widget-get-default-direction">gtk_widget_get_default_direction</link>    (void);
<link linkend="void">void</link>                <link linkend="gtk-widget-shape-combine-mask">gtk_widget_shape_combine_mask</link>       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkBitmap">GdkBitmap</link> *shape_mask,
                                                         <link linkend="gint">gint</link> offset_x,
                                                         <link linkend="gint">gint</link> offset_y);
<link linkend="void">void</link>                <link linkend="gtk-widget-input-shape-combine-mask">gtk_widget_input_shape_combine_mask</link> (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkBitmap">GdkBitmap</link> *shape_mask,
                                                         <link linkend="gint">gint</link> offset_x,
                                                         <link linkend="gint">gint</link> offset_y);
<link linkend="void">void</link>                <link linkend="gtk-widget-path">gtk_widget_path</link>                     (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="guint">guint</link> *path_length,
                                                         <link linkend="gchar">gchar</link> **path,
                                                         <link linkend="gchar">gchar</link> **path_reversed);
<link linkend="void">void</link>                <link linkend="gtk-widget-class-path">gtk_widget_class_path</link>               (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="guint">guint</link> *path_length,
                                                         <link linkend="gchar">gchar</link> **path,
                                                         <link linkend="gchar">gchar</link> **path_reversed);
<link linkend="gchar">gchar</link>*              <link linkend="gtk-widget-get-composite-name">gtk_widget_get_composite_name</link>       (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-modify-style">gtk_widget_modify_style</link>             (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkRcStyle">GtkRcStyle</link> *style);
<link linkend="GtkRcStyle">GtkRcStyle</link> *        <link linkend="gtk-widget-get-modifier-style">gtk_widget_get_modifier_style</link>       (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-modify-fg">gtk_widget_modify_fg</link>                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkStateType">GtkStateType</link> state,
                                                         const <link linkend="GdkColor">GdkColor</link> *color);
<link linkend="void">void</link>                <link linkend="gtk-widget-modify-bg">gtk_widget_modify_bg</link>                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkStateType">GtkStateType</link> state,
                                                         const <link linkend="GdkColor">GdkColor</link> *color);
<link linkend="void">void</link>                <link linkend="gtk-widget-modify-text">gtk_widget_modify_text</link>              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkStateType">GtkStateType</link> state,
                                                         const <link linkend="GdkColor">GdkColor</link> *color);
<link linkend="void">void</link>                <link linkend="gtk-widget-modify-base">gtk_widget_modify_base</link>              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkStateType">GtkStateType</link> state,
                                                         const <link linkend="GdkColor">GdkColor</link> *color);
<link linkend="void">void</link>                <link linkend="gtk-widget-modify-font">gtk_widget_modify_font</link>              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="PangoFontDescription">PangoFontDescription</link> *font_desc);
<link linkend="void">void</link>                <link linkend="gtk-widget-modify-cursor">gtk_widget_modify_cursor</link>            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="GdkColor">GdkColor</link> *primary,
                                                         const <link linkend="GdkColor">GdkColor</link> *secondary);
<link linkend="PangoContext">PangoContext</link> *      <link linkend="gtk-widget-create-pango-context">gtk_widget_create_pango_context</link>     (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="PangoContext">PangoContext</link> *      <link linkend="gtk-widget-get-pango-context">gtk_widget_get_pango_context</link>        (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="PangoLayout">PangoLayout</link> *       <link linkend="gtk-widget-create-pango-layout">gtk_widget_create_pango_layout</link>      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *text);
<link linkend="GdkPixbuf">GdkPixbuf</link> *         <link linkend="gtk-widget-render-icon">gtk_widget_render_icon</link>              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *stock_id,
                                                         <link linkend="GtkIconSize">GtkIconSize</link> size,
                                                         const <link linkend="gchar">gchar</link> *detail);
<link linkend="void">void</link>                <link linkend="gtk-widget-pop-composite-child">gtk_widget_pop_composite_child</link>      (void);
<link linkend="void">void</link>                <link linkend="gtk-widget-push-composite-child">gtk_widget_push_composite_child</link>     (void);
<link linkend="void">void</link>                <link linkend="gtk-widget-queue-clear">gtk_widget_queue_clear</link>              (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-queue-clear-area">gtk_widget_queue_clear_area</link>         (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y,
                                                         <link linkend="gint">gint</link> width,
                                                         <link linkend="gint">gint</link> height);
<link linkend="void">void</link>                <link linkend="gtk-widget-queue-draw-area">gtk_widget_queue_draw_area</link>          (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y,
                                                         <link linkend="gint">gint</link> width,
                                                         <link linkend="gint">gint</link> height);
<link linkend="void">void</link>                <link linkend="gtk-widget-reset-shapes">gtk_widget_reset_shapes</link>             (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-app-paintable">gtk_widget_set_app_paintable</link>        (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> app_paintable);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-double-buffered">gtk_widget_set_double_buffered</link>      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> double_buffered);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-redraw-on-allocate">gtk_widget_set_redraw_on_allocate</link>   (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> redraw_on_allocate);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-composite-name">gtk_widget_set_composite_name</link>       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *name);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-set-scroll-adjustments">gtk_widget_set_scroll_adjustments</link>   (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkAdjustment">GtkAdjustment</link> *hadjustment,
                                                         <link linkend="GtkAdjustment">GtkAdjustment</link> *vadjustment);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-mnemonic-activate">gtk_widget_mnemonic_activate</link>        (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> group_cycling);
<link linkend="void">void</link>                <link linkend="gtk-widget-class-install-style-property">gtk_widget_class_install_style_property</link>
                                                        (<link linkend="GtkWidgetClass">GtkWidgetClass</link> *klass,
                                                         <link linkend="GParamSpec">GParamSpec</link> *pspec);
<link linkend="void">void</link>                <link linkend="gtk-widget-class-install-style-property-parser">gtk_widget_class_install_style_property_parser</link>
                                                        (<link linkend="GtkWidgetClass">GtkWidgetClass</link> *klass,
                                                         <link linkend="GParamSpec">GParamSpec</link> *pspec,
                                                         <link linkend="GtkRcPropertyParser">GtkRcPropertyParser</link> parser);
<link linkend="GParamSpec">GParamSpec</link>*         <link linkend="gtk-widget-class-find-style-property">gtk_widget_class_find_style_property</link>
                                                        (<link linkend="GtkWidgetClass">GtkWidgetClass</link> *klass,
                                                         const <link linkend="gchar">gchar</link> *property_name);
<link linkend="GParamSpec">GParamSpec</link>**        <link linkend="gtk-widget-class-list-style-properties">gtk_widget_class_list_style_properties</link>
                                                        (<link linkend="GtkWidgetClass">GtkWidgetClass</link> *klass,
                                                         <link linkend="guint">guint</link> *n_properties);
<link linkend="GdkRegion">GdkRegion</link> *         <link linkend="gtk-widget-region-intersect">gtk_widget_region_intersect</link>         (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="GdkRegion">GdkRegion</link> *region);
<link linkend="gint">gint</link>                <link linkend="gtk-widget-send-expose">gtk_widget_send_expose</link>              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkEvent">GdkEvent</link> *event);
<link linkend="void">void</link>                <link linkend="gtk-widget-style-get">gtk_widget_style_get</link>                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *first_property_name,
                                                         ...);
<link linkend="void">void</link>                <link linkend="gtk-widget-style-get-property">gtk_widget_style_get_property</link>       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                <link linkend="gtk-widget-style-get-valist">gtk_widget_style_get_valist</link>         (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *first_property_name,
                                                         <link linkend="va-list">va_list</link> var_args);
<link linkend="AtkObject">AtkObject</link>*          <link linkend="gtk-widget-get-accessible">gtk_widget_get_accessible</link>           (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-child-focus">gtk_widget_child_focus</link>              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkDirectionType">GtkDirectionType</link> direction);
<link linkend="void">void</link>                <link linkend="gtk-widget-child-notify">gtk_widget_child_notify</link>             (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *child_property);
<link linkend="void">void</link>                <link linkend="gtk-widget-freeze-child-notify">gtk_widget_freeze_child_notify</link>      (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-get-child-visible">gtk_widget_get_child_visible</link>        (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="GtkWidget">GtkWidget</link> *         <link linkend="gtk-widget-get-parent">gtk_widget_get_parent</link>               (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="GtkSettings">GtkSettings</link>*        <link linkend="gtk-widget-get-settings">gtk_widget_get_settings</link>             (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="GtkClipboard">GtkClipboard</link> *      <link linkend="gtk-widget-get-clipboard">gtk_widget_get_clipboard</link>            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkAtom">GdkAtom</link> selection);
<link linkend="GdkDisplay">GdkDisplay</link> *        <link linkend="gtk-widget-get-display">gtk_widget_get_display</link>              (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="GdkWindow">GdkWindow</link> *         <link linkend="gtk-widget-get-root-window">gtk_widget_get_root_window</link>          (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="GdkScreen">GdkScreen</link> *         <link linkend="gtk-widget-get-screen">gtk_widget_get_screen</link>               (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-has-screen">gtk_widget_has_screen</link>               (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-get-size-request">gtk_widget_get_size_request</link>         (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> *width,
                                                         <link linkend="gint">gint</link> *height);
#define             <link linkend="gtk-widget-pop-visual">gtk_widget_pop_visual</link>               ()
#define             <link linkend="gtk-widget-push-visual">gtk_widget_push_visual</link>              (visual)
<link linkend="void">void</link>                <link linkend="gtk-widget-set-child-visible">gtk_widget_set_child_visible</link>        (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> is_visible);
#define             <link linkend="gtk-widget-set-default-visual">gtk_widget_set_default_visual</link>       (visual)
<link linkend="void">void</link>                <link linkend="gtk-widget-set-size-request">gtk_widget_set_size_request</link>         (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> width,
                                                         <link linkend="gint">gint</link> height);
#define             <link linkend="gtk-widget-set-visual">gtk_widget_set_visual</link>               (widget,visual)
<link linkend="void">void</link>                <link linkend="gtk-widget-thaw-child-notify">gtk_widget_thaw_child_notify</link>        (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-no-show-all">gtk_widget_set_no_show_all</link>          (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> no_show_all);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-get-no-show-all">gtk_widget_get_no_show_all</link>          (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="GList">GList</link>*              <link linkend="gtk-widget-list-mnemonic-labels">gtk_widget_list_mnemonic_labels</link>     (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-add-mnemonic-label">gtk_widget_add_mnemonic_label</link>       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkWidget">GtkWidget</link> *label);
<link linkend="void">void</link>                <link linkend="gtk-widget-remove-mnemonic-label">gtk_widget_remove_mnemonic_label</link>    (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkWidget">GtkWidget</link> *label);
<link linkend="GtkAction">GtkAction</link> *         <link linkend="gtk-widget-get-action">gtk_widget_get_action</link>               (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-is-composited">gtk_widget_is_composited</link>            (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-error-bell">gtk_widget_error_bell</link>               (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-keynav-failed">gtk_widget_keynav_failed</link>            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkDirectionType">GtkDirectionType</link> direction);
<link linkend="gchar">gchar</link> *             <link linkend="gtk-widget-get-tooltip-markup">gtk_widget_get_tooltip_markup</link>       (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-tooltip-markup">gtk_widget_set_tooltip_markup</link>       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *markup);
<link linkend="gchar">gchar</link> *             <link linkend="gtk-widget-get-tooltip-text">gtk_widget_get_tooltip_text</link>         (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-tooltip-text">gtk_widget_set_tooltip_text</link>         (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *text);
<link linkend="GtkWindow">GtkWindow</link> *         <link linkend="gtk-widget-get-tooltip-window">gtk_widget_get_tooltip_window</link>       (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-tooltip-window">gtk_widget_set_tooltip_window</link>       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkWindow">GtkWindow</link> *custom_window);
<link linkend="gboolean">gboolean</link>            <link linkend="gtk-widget-get-has-tooltip">gtk_widget_get_has_tooltip</link>          (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="void">void</link>                <link linkend="gtk-widget-set-has-tooltip">gtk_widget_set_has_tooltip</link>          (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> has_tooltip);
<link linkend="void">void</link>                <link linkend="gtk-widget-trigger-tooltip-query">gtk_widget_trigger_tooltip_query</link>    (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="GdkPixmap">GdkPixmap</link> *         <link linkend="gtk-widget-get-snapshot">gtk_widget_get_snapshot</link>             (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkRectangle">GdkRectangle</link> *clip_rect);
<link linkend="GdkWindow">GdkWindow</link>*          <link linkend="gtk-widget-get-window">gtk_widget_get_window</link>               (<link linkend="GtkWidget">GtkWidget</link> *widget);

<link linkend="GtkRequisition">GtkRequisition</link> *    <link linkend="gtk-requisition-copy">gtk_requisition_copy</link>                (const <link linkend="GtkRequisition">GtkRequisition</link> *requisition);
<link linkend="void">void</link>                <link linkend="gtk-requisition-free">gtk_requisition_free</link>                (<link linkend="GtkRequisition">GtkRequisition</link> *requisition);
</synopsis>
</refsynopsisdiv>

<refsect1 id="GtkWidget.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="GInitiallyUnowned">GInitiallyUnowned</link>
         +----<link linkend="GtkObject">GtkObject</link>
               +----GtkWidget
                     +----<link linkend="GtkContainer">GtkContainer</link>
                     +----<link linkend="GtkMisc">GtkMisc</link>
                     +----<link linkend="GtkCalendar">GtkCalendar</link>
                     +----<link linkend="GtkCellView">GtkCellView</link>
                     +----<link linkend="GtkDrawingArea">GtkDrawingArea</link>
                     +----<link linkend="GtkEntry">GtkEntry</link>
                     +----<link linkend="GtkRuler">GtkRuler</link>
                     +----<link linkend="GtkRange">GtkRange</link>
                     +----<link linkend="GtkSeparator">GtkSeparator</link>
                     +----<link linkend="GtkHSV">GtkHSV</link>
                     +----<link linkend="GtkInvisible">GtkInvisible</link>
                     +----<link linkend="GtkOldEditable">GtkOldEditable</link>
                     +----<link linkend="GtkPreview">GtkPreview</link>
                     +----<link linkend="GtkProgress">GtkProgress</link>
</synopsis>
</refsect1>


<refsect1 id="GtkWidget.derived-interfaces" role="derived_interfaces">
<title role="derived_interfaces.title">Known Derived Interfaces</title>
<para>
GtkWidget is required by
 <link linkend="GtkFileChooser">GtkFileChooser</link>,  <link linkend="GtkCellEditable">GtkCellEditable</link> and  <link linkend="GtkToolShell">GtkToolShell</link>.</para>
</refsect1>

<refsect1 id="GtkWidget.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
GtkWidget implements
 <link linkend="AtkImplementorIface">AtkImplementorIface</link> and  <link linkend="GtkBuildable">GtkBuildable</link>.</para>
</refsect1>


<refsect1 id="GtkWidget.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="GtkWidget--app-paintable">app-paintable</link>&quot;            <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="GtkWidget--can-default">can-default</link>&quot;              <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="GtkWidget--can-focus">can-focus</link>&quot;                <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="GtkWidget--composite-child">composite-child</link>&quot;          <link linkend="gboolean">gboolean</link>              : Read
  &quot;<link linkend="GtkWidget--events">events</link>&quot;                   <link linkend="GdkEventMask">GdkEventMask</link>          : Read / Write
  &quot;<link linkend="GtkWidget--extension-events">extension-events</link>&quot;         <link linkend="GdkExtensionMode">GdkExtensionMode</link>      : Read / Write
  &quot;<link linkend="GtkWidget--has-default">has-default</link>&quot;              <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="GtkWidget--has-focus">has-focus</link>&quot;                <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="GtkWidget--has-tooltip">has-tooltip</link>&quot;              <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="GtkWidget--height-request">height-request</link>&quot;           <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="GtkWidget--is-focus">is-focus</link>&quot;                 <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="GtkWidget--name">name</link>&quot;                     <link linkend="gchar">gchar</link>*                : Read / Write
  &quot;<link linkend="GtkWidget--no-show-all">no-show-all</link>&quot;              <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="GtkWidget--parent">parent</link>&quot;                   <link linkend="GtkContainer">GtkContainer</link>*         : Read / Write
  &quot;<link linkend="GtkWidget--receives-default">receives-default</link>&quot;         <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="GtkWidget--sensitive">sensitive</link>&quot;                <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="GtkWidget--style">style</link>&quot;                    <link linkend="GtkStyle">GtkStyle</link>*             : Read / Write
  &quot;<link linkend="GtkWidget--tooltip-markup">tooltip-markup</link>&quot;           <link linkend="gchar">gchar</link>*                : Read / Write
  &quot;<link linkend="GtkWidget--tooltip-text">tooltip-text</link>&quot;             <link linkend="gchar">gchar</link>*                : Read / Write
  &quot;<link linkend="GtkWidget--visible">visible</link>&quot;                  <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="GtkWidget--width-request">width-request</link>&quot;            <link linkend="gint">gint</link>                  : Read / Write
  &quot;<link linkend="GtkWidget--window">window</link>&quot;                   <link linkend="GdkWindow">GdkWindow</link>*            : Read
</synopsis>
</refsect1>
<refsect1 id="GtkWidget.style-properties" role="style_properties">
<title role="style_properties.title">Style Properties</title>
<synopsis>
  &quot;<link linkend="GtkWidget--s-cursor-aspect-ratio">cursor-aspect-ratio</link>&quot;      <link linkend="gfloat">gfloat</link>                : Read
  &quot;<link linkend="GtkWidget--s-cursor-color">cursor-color</link>&quot;             <link linkend="GdkColor">GdkColor</link>*             : Read
  &quot;<link linkend="GtkWidget--s-draw-border">draw-border</link>&quot;              <link linkend="GtkBorder">GtkBorder</link>*            : Read
  &quot;<link linkend="GtkWidget--s-focus-line-pattern">focus-line-pattern</link>&quot;       <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="GtkWidget--s-focus-line-width">focus-line-width</link>&quot;         <link linkend="gint">gint</link>                  : Read
  &quot;<link linkend="GtkWidget--s-focus-padding">focus-padding</link>&quot;            <link linkend="gint">gint</link>                  : Read
  &quot;<link linkend="GtkWidget--s-interior-focus">interior-focus</link>&quot;           <link linkend="gboolean">gboolean</link>              : Read
  &quot;<link linkend="GtkWidget--s-link-color">link-color</link>&quot;               <link linkend="GdkColor">GdkColor</link>*             : Read
  &quot;<link linkend="GtkWidget--s-scroll-arrow-hlength">scroll-arrow-hlength</link>&quot;     <link linkend="gint">gint</link>                  : Read
  &quot;<link linkend="GtkWidget--s-scroll-arrow-vlength">scroll-arrow-vlength</link>&quot;     <link linkend="gint">gint</link>                  : Read
  &quot;<link linkend="GtkWidget--s-secondary-cursor-color">secondary-cursor-color</link>&quot;   <link linkend="GdkColor">GdkColor</link>*             : Read
  &quot;<link linkend="GtkWidget--s-separator-height">separator-height</link>&quot;         <link linkend="gint">gint</link>                  : Read
  &quot;<link linkend="GtkWidget--s-separator-width">separator-width</link>&quot;          <link linkend="gint">gint</link>                  : Read
  &quot;<link linkend="GtkWidget--s-visited-link-color">visited-link-color</link>&quot;       <link linkend="GdkColor">GdkColor</link>*             : Read
  &quot;<link linkend="GtkWidget--s-wide-separators">wide-separators</link>&quot;          <link linkend="gboolean">gboolean</link>              : Read
</synopsis>
</refsect1>

<refsect1 id="GtkWidget.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="GtkWidget-accel-closures-changed">accel-closures-changed</link>&quot;                         
  &quot;<link linkend="GtkWidget-button-press-event">button-press-event</link>&quot;                             : Run Last
  &quot;<link linkend="GtkWidget-button-release-event">button-release-event</link>&quot;                           : Run Last
  &quot;<link linkend="GtkWidget-can-activate-accel">can-activate-accel</link>&quot;                             : Run Last
  &quot;<link linkend="GtkWidget-child-notify">child-notify</link>&quot;                                   : Run First / No Recursion / Has Details / No Hooks
  &quot;<link linkend="GtkWidget-client-event">client-event</link>&quot;                                   : Run Last
  &quot;<link linkend="GtkWidget-composited-changed">composited-changed</link>&quot;                             : Run Last / Action
  &quot;<link linkend="GtkWidget-configure-event">configure-event</link>&quot;                                : Run Last
  &quot;<link linkend="GtkWidget-damage-event">damage-event</link>&quot;                                   : Run Last
  &quot;<link linkend="GtkWidget-delete-event">delete-event</link>&quot;                                   : Run Last
  &quot;<link linkend="GtkWidget-destroy-event">destroy-event</link>&quot;                                  : Run Last
  &quot;<link linkend="GtkWidget-direction-changed">direction-changed</link>&quot;                              : Run First
  &quot;<link linkend="GtkWidget-drag-begin">drag-begin</link>&quot;                                     : Run Last
  &quot;<link linkend="GtkWidget-drag-data-delete">drag-data-delete</link>&quot;                               : Run Last
  &quot;<link linkend="GtkWidget-drag-data-get">drag-data-get</link>&quot;                                  : Run Last
  &quot;<link linkend="GtkWidget-drag-data-received">drag-data-received</link>&quot;                             : Run Last
  &quot;<link linkend="GtkWidget-drag-drop">drag-drop</link>&quot;                                      : Run Last
  &quot;<link linkend="GtkWidget-drag-end">drag-end</link>&quot;                                       : Run Last
  &quot;<link linkend="GtkWidget-drag-failed">drag-failed</link>&quot;                                    : Run Last
  &quot;<link linkend="GtkWidget-drag-leave">drag-leave</link>&quot;                                     : Run Last
  &quot;<link linkend="GtkWidget-drag-motion">drag-motion</link>&quot;                                    : Run Last
  &quot;<link linkend="GtkWidget-enter-notify-event">enter-notify-event</link>&quot;                             : Run Last
  &quot;<link linkend="GtkWidget-event">event</link>&quot;                                          : Run Last
  &quot;<link linkend="GtkWidget-event-after">event-after</link>&quot;                                    
  &quot;<link linkend="GtkWidget-expose-event">expose-event</link>&quot;                                   : Run Last
  &quot;<link linkend="GtkWidget-focus">focus</link>&quot;                                          : Run Last
  &quot;<link linkend="GtkWidget-focus-in-event">focus-in-event</link>&quot;                                 : Run Last
  &quot;<link linkend="GtkWidget-focus-out-event">focus-out-event</link>&quot;                                : Run Last
  &quot;<link linkend="GtkWidget-grab-broken-event">grab-broken-event</link>&quot;                              : Run Last
  &quot;<link linkend="GtkWidget-grab-focus">grab-focus</link>&quot;                                     : Run Last / Action
  &quot;<link linkend="GtkWidget-grab-notify">grab-notify</link>&quot;                                    : Run First
  &quot;<link linkend="GtkWidget-hide">hide</link>&quot;                                           : Run First
  &quot;<link linkend="GtkWidget-hierarchy-changed">hierarchy-changed</link>&quot;                              : Run Last
  &quot;<link linkend="GtkWidget-key-press-event">key-press-event</link>&quot;                                : Run Last
  &quot;<link linkend="GtkWidget-key-release-event">key-release-event</link>&quot;                              : Run Last
  &quot;<link linkend="GtkWidget-keynav-failed">keynav-failed</link>&quot;                                  : Run Last
  &quot;<link linkend="GtkWidget-leave-notify-event">leave-notify-event</link>&quot;                             : Run Last
  &quot;<link linkend="GtkWidget-map">map</link>&quot;                                            : Run First
  &quot;<link linkend="GtkWidget-map-event">map-event</link>&quot;                                      : Run Last
  &quot;<link linkend="GtkWidget-mnemonic-activate">mnemonic-activate</link>&quot;                              : Run Last
  &quot;<link linkend="GtkWidget-motion-notify-event">motion-notify-event</link>&quot;                            : Run Last
  &quot;<link linkend="GtkWidget-move-focus">move-focus</link>&quot;                                     : Run Last / Action
  &quot;<link linkend="GtkWidget-no-expose-event">no-expose-event</link>&quot;                                : Run Last
  &quot;<link linkend="GtkWidget-parent-set">parent-set</link>&quot;                                     : Run First
  &quot;<link linkend="GtkWidget-popup-menu">popup-menu</link>&quot;                                     : Run Last / Action
  &quot;<link linkend="GtkWidget-property-notify-event">property-notify-event</link>&quot;                          : Run Last
  &quot;<link linkend="GtkWidget-proximity-in-event">proximity-in-event</link>&quot;                             : Run Last
  &quot;<link linkend="GtkWidget-proximity-out-event">proximity-out-event</link>&quot;                            : Run Last
  &quot;<link linkend="GtkWidget-query-tooltip">query-tooltip</link>&quot;                                  : Run Last
  &quot;<link linkend="GtkWidget-realize">realize</link>&quot;                                        : Run First
  &quot;<link linkend="GtkWidget-screen-changed">screen-changed</link>&quot;                                 : Run Last
  &quot;<link linkend="GtkWidget-scroll-event">scroll-event</link>&quot;                                   : Run Last
  &quot;<link linkend="GtkWidget-selection-clear-event">selection-clear-event</link>&quot;                          : Run Last
  &quot;<link linkend="GtkWidget-selection-get">selection-get</link>&quot;                                  : Run Last
  &quot;<link linkend="GtkWidget-selection-notify-event">selection-notify-event</link>&quot;                         : Run Last
  &quot;<link linkend="GtkWidget-selection-received">selection-received</link>&quot;                             : Run Last
  &quot;<link linkend="GtkWidget-selection-request-event">selection-request-event</link>&quot;                        : Run Last
  &quot;<link linkend="GtkWidget-show">show</link>&quot;                                           : Run First
  &quot;<link linkend="GtkWidget-show-help">show-help</link>&quot;                                      : Run Last / Action
  &quot;<link linkend="GtkWidget-size-allocate">size-allocate</link>&quot;                                  : Run First
  &quot;<link linkend="GtkWidget-size-request">size-request</link>&quot;                                   : Run First
  &quot;<link linkend="GtkWidget-state-changed">state-changed</link>&quot;                                  : Run First
  &quot;<link linkend="GtkWidget-style-set">style-set</link>&quot;                                      : Run First
  &quot;<link linkend="GtkWidget-unmap">unmap</link>&quot;                                          : Run First
  &quot;<link linkend="GtkWidget-unmap-event">unmap-event</link>&quot;                                    : Run Last
  &quot;<link linkend="GtkWidget-unrealize">unrealize</link>&quot;                                      : Run Last
  &quot;<link linkend="GtkWidget-visibility-notify-event">visibility-notify-event</link>&quot;                        : Run Last
  &quot;<link linkend="GtkWidget-window-state-event">window-state-event</link>&quot;                             : Run Last
</synopsis>
</refsect1>


<refsect1 id="GtkWidget.description" role="desc">
<title role="desc.title">Description</title>
<para id="style-properties">
<structname>GtkWidget</structname> introduces <firstterm>style
properties</firstterm> - these are basically object properties that are stored
not on the object, but in the style object associated to the widget. Style
properties are set in <link linkend="gtk-Resource-Files">resource files</link>.
This mechanism is used for configuring such things as the location of the
scrollbar arrows through the theme, giving theme authors more control over the
look of applications without the need to write a theme engine in C.
</para>
<para>
Use <link linkend="gtk-widget-class-install-style-property"><function>gtk_widget_class_install_style_property()</function></link> to install style properties for
a widget class, <link linkend="gtk-widget-class-find-style-property"><function>gtk_widget_class_find_style_property()</function></link> or
<link linkend="gtk-widget-class-list-style-properties"><function>gtk_widget_class_list_style_properties()</function></link> to get information about existing
style properties and <link linkend="gtk-widget-style-get-property"><function>gtk_widget_style_get_property()</function></link>, <link linkend="gtk-widget-style-get"><function>gtk_widget_style_get()</function></link> or
<link linkend="gtk-widget-style-get-valist"><function>gtk_widget_style_get_valist()</function></link> to obtain the value of a style property.
</para>
<refsect2 id="GtkWidget-BUILDER-UI">
<title>GtkWidget as GtkBuildable</title>
<para>
The GtkWidget implementation of the GtkBuildable interface supports a
custom &lt;accelerator&gt; element, which has attributes named key,
modifiers and signal and allows to specify accelerators.
</para>
<example>
<title>A UI definition fragment specifying an accelerator</title>
<programlisting><![CDATA[
<object class="GtkButton">
  <accelerator key="q" modifiers="GDK_CONTROL_MASK" signal="clicked"/>
</object>
]]></programlisting>
</example>
In addition to accelerators, <structname>GtkWidget</structname> also support a
custom &lt;accessible&gt; element, which supports actions and relations.
Properties on the accessible implementation of an object can be set by accessing the
internal child "accessible" of a <structname>GtkWidget</structname>.
<example>
<title>A UI definition fragment specifying an accessible</title>
<programlisting><![CDATA[
<object class="GtkButton" id="label1"/>
  <property name="label">I am a Label for a Button</property>
</object>
<object class="GtkButton" id="button1">
  <accessibility>
    <action action_name="click" translatable="yes">Click the button.</action>
    <relation target="label1" type="labelled-by"/>
  </accessibility>
  <child internal-child="accessible">
    <object class="AtkObject" id="a11y-button1">
      <property name="AtkObject::name">Clickable Button</property>
    </object>
  </child>
</object>
]]></programlisting>
</example>
</refsect2>
</refsect1>

<refsect1 id="GtkWidget.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GtkWidget-struct" role="struct">
<title>GtkWidget</title>
<indexterm zone="GtkWidget-struct"><primary sortas="Widget">GtkWidget</primary></indexterm><programlisting>typedef struct {
  /* The style for the widget. The style contains the
   *  colors the widget should be drawn in for each state
   *  along with graphics contexts used to draw with and
   *  the font to use for text.
   */
  GtkStyle *GSEAL (style);
  
  /* The widget's desired size.
   */
  GtkRequisition GSEAL (requisition);
  
  /* The widget's allocated size.
   */
  GtkAllocation GSEAL (allocation);
  
  /* The widget's window or its parent window if it does
   *  not have a window. (Which will be indicated by the
   *  GTK_NO_WINDOW flag being set).
   */
  GdkWindow *GSEAL (window);
  
  /* The widget's parent.
   */
  GtkWidget *GSEAL (parent);
} GtkWidget;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GtkWidgetClass" role="struct">
<title>GtkWidgetClass</title>
<indexterm zone="GtkWidgetClass"><primary sortas="WidgetClass">GtkWidgetClass</primary></indexterm><programlisting>typedef struct {
  /* The object class structure needs to be the first
   *  element in the widget class structure in order for
   *  the class mechanism to work correctly. This allows a
   *  GtkWidgetClass pointer to be cast to a GtkObjectClass
   *  pointer.
   */
  GtkObjectClass parent_class;

  
  guint activate_signal;

  guint set_scroll_adjustments_signal;
} GtkWidgetClass;
</programlisting>
<para>
<structfield>activate_signal</structfield>
The signal to emit when a widget of this class is activated,
<link linkend="gtk-widget-activate"><function>gtk_widget_activate()</function></link> handles the emission. Implementation of this
signal is optional.
</para>
<para>
<structfield>set_scroll_adjustment_signal</structfield>
This signal is emitted  when a widget of this class is added
to a scrolling aware parent, <link linkend="gtk-widget-set-scroll-adjustments"><function>gtk_widget_set_scroll_adjustments()</function></link>
handles the emission.
Implementation of this signal is optional.
</para></refsect2>
<refsect2 id="GtkWidgetFlags" role="enum">
<title>enum GtkWidgetFlags</title>
<indexterm zone="GtkWidgetFlags"><primary sortas="WidgetFlags">GtkWidgetFlags</primary></indexterm><programlisting>typedef enum
{
  GTK_TOPLEVEL         = 1 &lt;&lt; 4,
  GTK_NO_WINDOW        = 1 &lt;&lt; 5,
  GTK_REALIZED         = 1 &lt;&lt; 6,
  GTK_MAPPED           = 1 &lt;&lt; 7,
  GTK_VISIBLE          = 1 &lt;&lt; 8,
  GTK_SENSITIVE        = 1 &lt;&lt; 9,
  GTK_PARENT_SENSITIVE = 1 &lt;&lt; 10,
  GTK_CAN_FOCUS        = 1 &lt;&lt; 11,
  GTK_HAS_FOCUS        = 1 &lt;&lt; 12,

  /* widget is allowed to receive the default via gtk_widget_grab_default
   * and will reserve space to draw the default if possible
   */
  GTK_CAN_DEFAULT      = 1 &lt;&lt; 13,

  /* the widget currently is receiving the default action and should be drawn
   * appropriately if possible
   */
  GTK_HAS_DEFAULT      = 1 &lt;&lt; 14,

  GTK_HAS_GRAB	       = 1 &lt;&lt; 15,
  GTK_RC_STYLE	       = 1 &lt;&lt; 16,
  GTK_COMPOSITE_CHILD  = 1 &lt;&lt; 17,
  GTK_NO_REPARENT      = 1 &lt;&lt; 18,
  GTK_APP_PAINTABLE    = 1 &lt;&lt; 19,

  /* the widget when focused will receive the default action and have
   * HAS_DEFAULT set even if there is a different widget set as default
   */
  GTK_RECEIVES_DEFAULT = 1 &lt;&lt; 20,

  GTK_DOUBLE_BUFFERED  = 1 &lt;&lt; 21,
  GTK_NO_SHOW_ALL      = 1 &lt;&lt; 22
} GtkWidgetFlags;
</programlisting>
<para>
Tells about certain properties of the widget.
</para><variablelist role="enum">
<varlistentry id="GTK-TOPLEVEL--CAPS" role="constant">
<term><literal>GTK_TOPLEVEL</literal></term>
<listitem><simpara>
        widgets without a real parent, as there are <link linkend="GtkWindow"><type>GtkWindow</type></link><!-- -->s and
        <link linkend="GtkMenu"><type>GtkMenu</type></link><!-- -->s have this flag set throughout their lifetime.
        Toplevel widgets always contain their own <link linkend="GdkWindow"><type>GdkWindow</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-NO-WINDOW--CAPS" role="constant">
<term><literal>GTK_NO_WINDOW</literal></term>
<listitem><simpara>
        Indicative for a widget that does not provide its own <link linkend="GdkWindow"><type>GdkWindow</type></link>.
        Visible action (e.g. drawing) is performed on the parent's <link linkend="GdkWindow"><type>GdkWindow</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-REALIZED--CAPS" role="constant">
<term><literal>GTK_REALIZED</literal></term>
<listitem><simpara>
        Set by <link linkend="gtk-widget-realize"><function>gtk_widget_realize()</function></link>, unset by <link linkend="gtk-widget-unrealize"><function>gtk_widget_unrealize()</function></link>.
        A realized widget has an associated <link linkend="GdkWindow"><type>GdkWindow</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-MAPPED--CAPS" role="constant">
<term><literal>GTK_MAPPED</literal></term>
<listitem><simpara>
        Set by <link linkend="gtk-widget-map"><function>gtk_widget_map()</function></link>, unset by <link linkend="gtk-widget-unmap"><function>gtk_widget_unmap()</function></link>.
        Only realized widgets can be mapped. It means that <link linkend="gdk-window-show"><function>gdk_window_show()</function></link>
        has been called on the widgets window(s).
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-VISIBLE--CAPS" role="constant">
<term><literal>GTK_VISIBLE</literal></term>
<listitem><simpara>
        Set by <link linkend="gtk-widget-show"><function>gtk_widget_show()</function></link>, unset by <link linkend="gtk-widget-hide"><function>gtk_widget_hide()</function></link>. Implies that a
        widget will be mapped as soon as its parent is mapped.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-SENSITIVE--CAPS" role="constant">
<term><literal>GTK_SENSITIVE</literal></term>
<listitem><simpara>
        Set and unset by <link linkend="gtk-widget-set-sensitive"><function>gtk_widget_set_sensitive()</function></link>.
        The sensitivity of a widget determines whether it will receive
        certain events (e.g. button or key presses). One premise for
        the widget's sensitivity is to have this flag set.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-PARENT-SENSITIVE--CAPS" role="constant">
<term><literal>GTK_PARENT_SENSITIVE</literal></term>
<listitem><simpara>
        Set and unset by <link linkend="gtk-widget-set-sensitive"><function>gtk_widget_set_sensitive()</function></link> operations on the
        parents of the widget.
        This is the second premise for the widget's sensitivity. Once
        it has <link linkend="GTK-SENSITIVE--CAPS"><literal>GTK_SENSITIVE</literal></link> and <link linkend="GTK-PARENT-SENSITIVE--CAPS"><literal>GTK_PARENT_SENSITIVE</literal></link> set, its state is
        effectively sensitive. This is expressed (and can be examined) by
        the <link linkend="GTK-WIDGET-IS-SENSITIVE--CAPS"><type>GTK_WIDGET_IS_SENSITIVE</type></link> macro.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-CAN-FOCUS--CAPS" role="constant">
<term><literal>GTK_CAN_FOCUS</literal></term>
<listitem><simpara>
        Determines whether a widget is able to handle focus grabs.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-HAS-FOCUS--CAPS" role="constant">
<term><literal>GTK_HAS_FOCUS</literal></term>
<listitem><simpara>
        Set by <link linkend="gtk-widget-grab-focus"><function>gtk_widget_grab_focus()</function></link> for widgets that also
        have <link linkend="GTK-CAN-FOCUS--CAPS"><literal>GTK_CAN_FOCUS</literal></link> set. The flag will be unset once another widget
        grabs the focus.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-CAN-DEFAULT--CAPS" role="constant">
<term><literal>GTK_CAN_DEFAULT</literal></term>
<listitem><simpara>
        The widget is allowed to receive the default action via
        <link linkend="gtk-widget-grab-default"><function>gtk_widget_grab_default()</function></link>.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-HAS-DEFAULT--CAPS" role="constant">
<term><literal>GTK_HAS_DEFAULT</literal></term>
<listitem><simpara>
        The widget currently is receiving the default action.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-HAS-GRAB--CAPS" role="constant">
<term><literal>GTK_HAS_GRAB</literal></term>
<listitem><simpara>
        Set by <link linkend="gtk-grab-add"><function>gtk_grab_add()</function></link>, unset by <link linkend="gtk-grab-remove"><function>gtk_grab_remove()</function></link>. It means that the
        widget is in the grab_widgets stack, and will be the preferred one for
        receiving events other than ones of cosmetic value.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-RC-STYLE--CAPS" role="constant">
<term><literal>GTK_RC_STYLE</literal></term>
<listitem><simpara>
        Indicates that the widget's style has been looked up through the rc
        mechanism. It does not imply that the widget actually had a style
        defined through the rc mechanism.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-COMPOSITE-CHILD--CAPS" role="constant">
<term><literal>GTK_COMPOSITE_CHILD</literal></term>
<listitem><simpara>
        Indicates that the widget is a composite child of its parent; see
        <link linkend="gtk-widget-push-composite-child"><function>gtk_widget_push_composite_child()</function></link>, <link linkend="gtk-widget-pop-composite-child"><function>gtk_widget_pop_composite_child()</function></link>.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-NO-REPARENT--CAPS" role="constant">
<term><literal>GTK_NO_REPARENT</literal></term>
<listitem><simpara>
	Unused since before GTK+ 1.2, will be removed in a future version.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-APP-PAINTABLE--CAPS" role="constant">
<term><literal>GTK_APP_PAINTABLE</literal></term>
<listitem><simpara>
        Set and unset by <link linkend="gtk-widget-set-app-paintable"><function>gtk_widget_set_app_paintable()</function></link>.
        Must be set on widgets whose window the application directly draws on,
	in order to keep GTK+ from overwriting the drawn stuff.  See
        <xref linkend="app-paintable-widgets"/> for a detailed
        description of this flag.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-RECEIVES-DEFAULT--CAPS" role="constant">
<term><literal>GTK_RECEIVES_DEFAULT</literal></term>
<listitem><simpara>
        The widget when focused will receive the default action and have
        <link linkend="GTK-HAS-DEFAULT--CAPS"><literal>GTK_HAS_DEFAULT</literal></link> set even if there is a different widget set as default.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-DOUBLE-BUFFERED--CAPS" role="constant">
<term><literal>GTK_DOUBLE_BUFFERED</literal></term>
<listitem><simpara>
        Set and unset by <link linkend="gtk-widget-set-double-buffered"><function>gtk_widget_set_double_buffered()</function></link>.
        Indicates that exposes done on the widget should be
        double-buffered.  See <xref linkend="double-buffering"/> for a
        detailed discussion of how double-buffering works in GTK+ and
        why you may want to disable it for special cases.
</simpara></listitem>
</varlistentry>
<varlistentry id="GTK-NO-SHOW-ALL--CAPS" role="constant">
<term><literal>GTK_NO_SHOW_ALL</literal></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-TYPE--CAPS" role="macro">
<title>GTK_WIDGET_TYPE()</title>
<indexterm zone="GTK-WIDGET-TYPE--CAPS"><primary sortas="WIDGET_TYPE">GTK_WIDGET_TYPE</primary></indexterm><programlisting>#define GTK_WIDGET_TYPE(wid)		  (GTK_OBJECT_TYPE (wid))
</programlisting>
<para>
Gets the type of a widget.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-STATE--CAPS" role="macro">
<title>GTK_WIDGET_STATE()</title>
<indexterm zone="GTK-WIDGET-STATE--CAPS"><primary sortas="WIDGET_STATE">GTK_WIDGET_STATE</primary></indexterm><programlisting>#define GTK_WIDGET_STATE(wid)		  (GTK_WIDGET (wid)-&gt;state)
</programlisting>
<para>
Returns the current state of the widget, as a <link linkend="GtkStateType"><type>GtkStateType</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-SAVED-STATE--CAPS" role="macro">
<title>GTK_WIDGET_SAVED_STATE()</title>
<indexterm zone="GTK-WIDGET-SAVED-STATE--CAPS"><primary sortas="WIDGET_SAVED_STATE">GTK_WIDGET_SAVED_STATE</primary></indexterm><programlisting>#define GTK_WIDGET_SAVED_STATE(wid)	  (GTK_WIDGET (wid)-&gt;saved_state)
</programlisting>
<para>
Returns the saved state of the widget, as a <link linkend="GtkStateType"><type>GtkStateType</type></link>.
</para>
<para>
The saved state will be restored when a widget gets sensitive
again, after it has been made insensitive with <link linkend="gtk-widget-set-state"><function>gtk_widget_set_state()</function></link>
or <link linkend="gtk-widget-set-sensitive"><function>gtk_widget_set_sensitive()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-FLAGS--CAPS" role="macro">
<title>GTK_WIDGET_FLAGS()</title>
<indexterm zone="GTK-WIDGET-FLAGS--CAPS"><primary sortas="WIDGET_FLAGS">GTK_WIDGET_FLAGS</primary></indexterm><programlisting>#define GTK_WIDGET_FLAGS(wid)		  (GTK_OBJECT_FLAGS (wid))
</programlisting>
<para>
Returns the widget flags from <parameter>wid</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-TOPLEVEL--CAPS" role="macro">
<title>GTK_WIDGET_TOPLEVEL()</title>
<indexterm zone="GTK-WIDGET-TOPLEVEL--CAPS"><primary sortas="WIDGET_TOPLEVEL">GTK_WIDGET_TOPLEVEL</primary></indexterm><programlisting>#define GTK_WIDGET_TOPLEVEL(wid)	  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_TOPLEVEL) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget is a toplevel widget.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-NO-WINDOW--CAPS" role="macro">
<title>GTK_WIDGET_NO_WINDOW()</title>
<indexterm zone="GTK-WIDGET-NO-WINDOW--CAPS"><primary sortas="WIDGET_NO_WINDOW">GTK_WIDGET_NO_WINDOW</primary></indexterm><programlisting>#define GTK_WIDGET_NO_WINDOW(wid)	  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_NO_WINDOW) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget doesn't have an own <link linkend="GdkWindow"><type>GdkWindow</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-REALIZED--CAPS" role="macro">
<title>GTK_WIDGET_REALIZED()</title>
<indexterm zone="GTK-WIDGET-REALIZED--CAPS"><primary sortas="WIDGET_REALIZED">GTK_WIDGET_REALIZED</primary></indexterm><programlisting>#define GTK_WIDGET_REALIZED(wid)	  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_REALIZED) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget is realized.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-MAPPED--CAPS" role="macro">
<title>GTK_WIDGET_MAPPED()</title>
<indexterm zone="GTK-WIDGET-MAPPED--CAPS"><primary sortas="WIDGET_MAPPED">GTK_WIDGET_MAPPED</primary></indexterm><programlisting>#define GTK_WIDGET_MAPPED(wid)		  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_MAPPED) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget is mapped.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-VISIBLE--CAPS" role="macro">
<title>GTK_WIDGET_VISIBLE()</title>
<indexterm zone="GTK-WIDGET-VISIBLE--CAPS"><primary sortas="WIDGET_VISIBLE">GTK_WIDGET_VISIBLE</primary></indexterm><programlisting>#define GTK_WIDGET_VISIBLE(wid)		  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_VISIBLE) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget is visible.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-DRAWABLE--CAPS" role="macro">
<title>GTK_WIDGET_DRAWABLE()</title>
<indexterm zone="GTK-WIDGET-DRAWABLE--CAPS"><primary sortas="WIDGET_DRAWABLE">GTK_WIDGET_DRAWABLE</primary></indexterm><programlisting>#define GTK_WIDGET_DRAWABLE(wid)	  (GTK_WIDGET_VISIBLE (wid) &amp;&amp; GTK_WIDGET_MAPPED (wid))
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget is mapped and visible.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-SENSITIVE--CAPS" role="macro">
<title>GTK_WIDGET_SENSITIVE()</title>
<indexterm zone="GTK-WIDGET-SENSITIVE--CAPS"><primary sortas="WIDGET_SENSITIVE">GTK_WIDGET_SENSITIVE</primary></indexterm><programlisting>#define GTK_WIDGET_SENSITIVE(wid)	  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_SENSITIVE) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the <link linkend="GTK-SENSITIVE--CAPS"><type>GTK_SENSITIVE</type></link> flag has be set on the widget.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-PARENT-SENSITIVE--CAPS" role="macro">
<title>GTK_WIDGET_PARENT_SENSITIVE()</title>
<indexterm zone="GTK-WIDGET-PARENT-SENSITIVE--CAPS"><primary sortas="WIDGET_PARENT_SENSITIVE">GTK_WIDGET_PARENT_SENSITIVE</primary></indexterm><programlisting>#define GTK_WIDGET_PARENT_SENSITIVE(wid)  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_PARENT_SENSITIVE) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the <link linkend="GTK-PARENT-SENSITIVE--CAPS"><type>GTK_PARENT_SENSITIVE</type></link> flag has be set on the widget.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-IS-SENSITIVE--CAPS" role="macro">
<title>GTK_WIDGET_IS_SENSITIVE()</title>
<indexterm zone="GTK-WIDGET-IS-SENSITIVE--CAPS"><primary sortas="WIDGET_IS_SENSITIVE">GTK_WIDGET_IS_SENSITIVE</primary></indexterm><programlisting>#define             GTK_WIDGET_IS_SENSITIVE(wid)</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget is effectively sensitive.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-CAN-FOCUS--CAPS" role="macro">
<title>GTK_WIDGET_CAN_FOCUS()</title>
<indexterm zone="GTK-WIDGET-CAN-FOCUS--CAPS"><primary sortas="WIDGET_CAN_FOCUS">GTK_WIDGET_CAN_FOCUS</primary></indexterm><programlisting>#define GTK_WIDGET_CAN_FOCUS(wid)	  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_CAN_FOCUS) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget is able to handle focus grabs.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-HAS-FOCUS--CAPS" role="macro">
<title>GTK_WIDGET_HAS_FOCUS()</title>
<indexterm zone="GTK-WIDGET-HAS-FOCUS--CAPS"><primary sortas="WIDGET_HAS_FOCUS">GTK_WIDGET_HAS_FOCUS</primary></indexterm><programlisting>#define GTK_WIDGET_HAS_FOCUS(wid)	  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_HAS_FOCUS) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget has grabbed the focus and no other
widget has done so more recently.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-CAN-DEFAULT--CAPS" role="macro">
<title>GTK_WIDGET_CAN_DEFAULT()</title>
<indexterm zone="GTK-WIDGET-CAN-DEFAULT--CAPS"><primary sortas="WIDGET_CAN_DEFAULT">GTK_WIDGET_CAN_DEFAULT</primary></indexterm><programlisting>#define GTK_WIDGET_CAN_DEFAULT(wid)	  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_CAN_DEFAULT) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget is allowed to receive the default action
via <link linkend="gtk-widget-grab-default"><function>gtk_widget_grab_default()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-RECEIVES-DEFAULT--CAPS" role="macro">
<title>GTK_WIDGET_RECEIVES_DEFAULT()</title>
<indexterm zone="GTK-WIDGET-RECEIVES-DEFAULT--CAPS"><primary sortas="WIDGET_RECEIVES_DEFAULT">GTK_WIDGET_RECEIVES_DEFAULT</primary></indexterm><programlisting>#define GTK_WIDGET_RECEIVES_DEFAULT(wid)  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_RECEIVES_DEFAULT) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget when focused will receive the default action
even if there is a different widget set as default.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-HAS-DEFAULT--CAPS" role="macro">
<title>GTK_WIDGET_HAS_DEFAULT()</title>
<indexterm zone="GTK-WIDGET-HAS-DEFAULT--CAPS"><primary sortas="WIDGET_HAS_DEFAULT">GTK_WIDGET_HAS_DEFAULT</primary></indexterm><programlisting>#define GTK_WIDGET_HAS_DEFAULT(wid)	  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_HAS_DEFAULT) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget currently is receiving the default action.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-HAS-GRAB--CAPS" role="macro">
<title>GTK_WIDGET_HAS_GRAB()</title>
<indexterm zone="GTK-WIDGET-HAS-GRAB--CAPS"><primary sortas="WIDGET_HAS_GRAB">GTK_WIDGET_HAS_GRAB</primary></indexterm><programlisting>#define GTK_WIDGET_HAS_GRAB(wid)	  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_HAS_GRAB) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget is in the grab_widgets stack, and will be
the preferred one for receiving events other than ones of cosmetic value.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-RC-STYLE--CAPS" role="macro">
<title>GTK_WIDGET_RC_STYLE()</title>
<indexterm zone="GTK-WIDGET-RC-STYLE--CAPS"><primary sortas="WIDGET_RC_STYLE">GTK_WIDGET_RC_STYLE</primary></indexterm><programlisting>#define GTK_WIDGET_RC_STYLE(wid)	  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_RC_STYLE) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget's style has been looked up through the rc
mechanism.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-COMPOSITE-CHILD--CAPS" role="macro">
<title>GTK_WIDGET_COMPOSITE_CHILD()</title>
<indexterm zone="GTK-WIDGET-COMPOSITE-CHILD--CAPS"><primary sortas="WIDGET_COMPOSITE_CHILD">GTK_WIDGET_COMPOSITE_CHILD</primary></indexterm><programlisting>#define GTK_WIDGET_COMPOSITE_CHILD(wid)	  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_COMPOSITE_CHILD) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget is a composite child of its parent.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-APP-PAINTABLE--CAPS" role="macro">
<title>GTK_WIDGET_APP_PAINTABLE()</title>
<indexterm zone="GTK-WIDGET-APP-PAINTABLE--CAPS"><primary sortas="WIDGET_APP_PAINTABLE">GTK_WIDGET_APP_PAINTABLE</primary></indexterm><programlisting>#define GTK_WIDGET_APP_PAINTABLE(wid)	  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_APP_PAINTABLE) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the <link linkend="GTK-APP-PAINTABLE--CAPS"><type>GTK_APP_PAINTABLE</type></link> flag has been set on the widget.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-DOUBLE-BUFFERED--CAPS" role="macro">
<title>GTK_WIDGET_DOUBLE_BUFFERED()</title>
<indexterm zone="GTK-WIDGET-DOUBLE-BUFFERED--CAPS"><primary sortas="WIDGET_DOUBLE_BUFFERED">GTK_WIDGET_DOUBLE_BUFFERED</primary></indexterm><programlisting>#define GTK_WIDGET_DOUBLE_BUFFERED(wid)	  ((GTK_WIDGET_FLAGS (wid) &amp; GTK_DOUBLE_BUFFERED) != 0)
</programlisting>
<para>
Evaluates to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the <link linkend="GTK-DOUBLE-BUFFERED--CAPS"><type>GTK_DOUBLE_BUFFERED</type></link> flag has been set on the widget.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-SET-FLAGS--CAPS" role="macro">
<title>GTK_WIDGET_SET_FLAGS()</title>
<indexterm zone="GTK-WIDGET-SET-FLAGS--CAPS"><primary sortas="WIDGET_SET_FLAGS">GTK_WIDGET_SET_FLAGS</primary></indexterm><programlisting>#define GTK_WIDGET_SET_FLAGS(wid,flag)	  G_STMT_START{ (GTK_WIDGET_FLAGS (wid) |= (flag)); }G_STMT_END
</programlisting>
<para>
Turns on certain widget flags.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flag</parameter>&#160;:</term>
<listitem><simpara>the flags to set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GTK-WIDGET-UNSET-FLAGS--CAPS" role="macro">
<title>GTK_WIDGET_UNSET_FLAGS()</title>
<indexterm zone="GTK-WIDGET-UNSET-FLAGS--CAPS"><primary sortas="WIDGET_UNSET_FLAGS">GTK_WIDGET_UNSET_FLAGS</primary></indexterm><programlisting>#define GTK_WIDGET_UNSET_FLAGS(wid,flag)  G_STMT_START{ (GTK_WIDGET_FLAGS (wid) &amp;= ~(flag)); }G_STMT_END
</programlisting>
<para>
Turns off certain widget flags.
</para><variablelist role="params">
<varlistentry><term><parameter>wid</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flag</parameter>&#160;:</term>
<listitem><simpara>the flags to unset.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GtkCallback" role="function">
<title>GtkCallback ()</title>
<indexterm zone="GtkCallback"><primary sortas="Callback">GtkCallback</primary></indexterm><programlisting><link linkend="void">void</link>                (*GtkCallback)                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
The type of the callback functions used for e.g. iterating over
the children of a container, see <link linkend="gtk-container-foreach"><function>gtk_container_foreach()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the widget to operate on
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>user-supplied data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GtkRequisition" role="struct">
<title>GtkRequisition</title>
<indexterm zone="GtkRequisition"><primary sortas="Requisition">GtkRequisition</primary></indexterm><programlisting>typedef struct {
  gint width;
  gint height;
} GtkRequisition;
</programlisting>
<para>
A <structname>GtkRequisition</structname> represents the desired size of a widget. See
<xref linkend="size-requisition"/> for more information.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="gint">gint</link>&#160;<structfield>width</structfield>;</term>
<listitem><simpara>the widget's desired width
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link>&#160;<structfield>height</structfield>;</term>
<listitem><simpara>the widget's desired height
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="GtkAllocation" role="struct">
<title>struct GtkAllocation</title>
<indexterm zone="GtkAllocation"><primary sortas="Allocation">GtkAllocation</primary></indexterm><programlisting>struct GtkAllocation {
  gint x;
  gint y;
  gint width;
  gint height;
};
</programlisting>
<para>
A <structname>GtkAllocation</structname> of a widget represents region which has been allocated to the
widget by its parent. It is a subregion of its parents allocation. See
<xref linkend="size-allocation"/> for more information.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="gint">gint</link>&#160;<structfield>x</structfield>;</term>
<listitem><simpara>the X position of the widget's area relative to its parents allocation.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link>&#160;<structfield>y</structfield>;</term>
<listitem><simpara>the Y position of the widget's area relative to its parents allocation.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link>&#160;<structfield>width</structfield>;</term>
<listitem><simpara>the width of the widget's allocated area.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link>&#160;<structfield>height</structfield>;</term>
<listitem><simpara>the height of the widget's allocated area.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="GtkSelectionData" role="struct">
<title>GtkSelectionData</title>
<indexterm zone="GtkSelectionData"><primary sortas="SelectionData">GtkSelectionData</primary></indexterm><programlisting>typedef struct {
  GdkAtom       GSEAL (selection);
  GdkAtom       GSEAL (target);
  GdkAtom       GSEAL (type);
  gint          GSEAL (format);
  guchar       *GSEAL (data);
  gint          GSEAL (length);
  GdkDisplay   *GSEAL (display);
} GtkSelectionData;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GtkWidgetAuxInfo" role="struct">
<title>GtkWidgetAuxInfo</title>
<indexterm zone="GtkWidgetAuxInfo"><primary sortas="WidgetAuxInfo">GtkWidgetAuxInfo</primary></indexterm><programlisting>typedef struct {
  gint x;
  gint y;
  gint width;
  gint height;
  guint x_set : 1;
  guint y_set : 1;
} GtkWidgetAuxInfo;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GtkWidgetShapeInfo" role="struct">
<title>GtkWidgetShapeInfo</title>
<indexterm zone="GtkWidgetShapeInfo"><primary sortas="WidgetShapeInfo">GtkWidgetShapeInfo</primary></indexterm><programlisting>typedef struct {
  gint16     offset_x;
  gint16     offset_y;
  GdkBitmap *shape_mask;
} GtkWidgetShapeInfo;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GtkWidgetHelpType" role="enum">
<title>enum GtkWidgetHelpType</title>
<indexterm zone="GtkWidgetHelpType"><primary sortas="WidgetHelpType">GtkWidgetHelpType</primary></indexterm><programlisting>typedef enum
{
  GTK_WIDGET_HELP_TOOLTIP,
  GTK_WIDGET_HELP_WHATS_THIS
} GtkWidgetHelpType;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gtk-widget-new" role="function">
<title>gtk_widget_new ()</title>
<indexterm zone="gtk-widget-new"><primary sortas="widget_new">gtk_widget_new</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*          gtk_widget_new                      (<link linkend="GType">GType</link> type,
                                                         const <link linkend="gchar">gchar</link> *first_property_name,
                                                         ...);</programlisting>
<para>
This is a convenience function for creating a widget and setting
its properties in one go. For example you might write:
<literal>gtk_widget_new (GTK_TYPE_LABEL, "label", "Hello World", "xalign",
0.0, NULL)</literal> to create a left-aligned label. Equivalent to
<link linkend="g-object-new"><function>g_object_new()</function></link>, but returns a widget so you don't have to
cast the object yourself.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> type ID of the widget to create
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_property_name</parameter>&#160;:</term>
<listitem><simpara> name of first property to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> value of first property, followed by more properties, 
          <link linkend="NULL--CAPS"><literal>NULL</literal></link>-terminated
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new <link linkend="GtkWidget"><type>GtkWidget</type></link> of type <parameter>widget_type</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-ref" role="function" condition="deprecated:2.12: Use g_object_ref() instead.">
<title>gtk_widget_ref ()</title>
<indexterm zone="gtk-widget-ref" role="deprecated"><primary sortas="widget_ref">gtk_widget_ref</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*          gtk_widget_ref                      (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<warning><para><literal>gtk_widget_ref</literal> has been deprecated since version 2.12 and should not be used in newly-written code. Use <link linkend="g-object-ref"><function>g_object_ref()</function></link> instead.</para></warning>
<para>
Adds a reference to a widget. This function is exactly the same
as calling <link linkend="g-object-ref"><function>g_object_ref()</function></link>, and exists mostly for historical
reasons. It can still be convenient to avoid casting a widget
to a <link linkend="GObject"><type>GObject</type></link>, it saves a small amount of typing.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the widget that was referenced

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-unref" role="function" condition="deprecated:2.12: Use g_object_unref() instead.">
<title>gtk_widget_unref ()</title>
<indexterm zone="gtk-widget-unref" role="deprecated"><primary sortas="widget_unref">gtk_widget_unref</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_unref                    (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<warning><para><literal>gtk_widget_unref</literal> has been deprecated since version 2.12 and should not be used in newly-written code. Use <link linkend="g-object-unref"><function>g_object_unref()</function></link> instead.</para></warning>
<para>
Inverse of <link linkend="gtk-widget-ref"><function>gtk_widget_ref()</function></link>. Equivalent to <link linkend="g-object-unref"><function>g_object_unref()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-destroy" role="function">
<title>gtk_widget_destroy ()</title>
<indexterm zone="gtk-widget-destroy"><primary sortas="widget_destroy">gtk_widget_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_destroy                  (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Destroys a widget. Equivalent to <link linkend="gtk-object-destroy"><function>gtk_object_destroy()</function></link>, except that
you don't have to cast the widget to <link linkend="GtkObject"><type>GtkObject</type></link>. When a widget is
destroyed, it will break any references it holds to other objects.
If the widget is inside a container, the widget will be removed
from the container. If the widget is a toplevel (derived from
<link linkend="GtkWindow"><type>GtkWindow</type></link>), it will be removed from the list of toplevels, and the
reference GTK+ holds to it will be removed. Removing a
widget from its container or the list of toplevels results in the
widget being finalized, unless you've added additional references
to the widget with <link linkend="g-object-ref"><function>g_object_ref()</function></link>.
</para>
<para>
In most cases, only toplevel widgets (windows) require explicit
destruction, because when you destroy a toplevel its children will
be destroyed as well.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-destroyed" role="function">
<title>gtk_widget_destroyed ()</title>
<indexterm zone="gtk-widget-destroyed"><primary sortas="widget_destroyed">gtk_widget_destroyed</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_destroyed                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkWidget">GtkWidget</link> **widget_pointer);</programlisting>
<para>
This function sets *<parameter>widget_pointer</parameter> to <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>widget_pointer</parameter> !=
<link linkend="NULL--CAPS"><literal>NULL</literal></link>.  It's intended to be used as a callback connected to the
"destroy" signal of a widget. You connect <link linkend="gtk-widget-destroyed"><function>gtk_widget_destroyed()</function></link>
as a signal handler, and pass the address of your widget variable
as user data. Then when the widget is destroyed, the variable will
be set to <link linkend="NULL--CAPS"><literal>NULL</literal></link>. Useful for example to avoid multiple copies
of the same dialog.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget_pointer</parameter>&#160;:</term>
<listitem><simpara> address of a variable that contains <parameter>widget</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set" role="function" condition="deprecated:2.0: Use g_object_set() instead.">
<title>gtk_widget_set ()</title>
<indexterm zone="gtk-widget-set" role="deprecated"><primary sortas="widget_set">gtk_widget_set</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *first_property_name,
                                                         ...);</programlisting>
<warning><para><literal>gtk_widget_set</literal> has been deprecated since version 2.0 and should not be used in newly-written code. Use <link linkend="g-object-set"><function>g_object_set()</function></link> instead.</para></warning>
<para>
Precursor of <link linkend="g-object-set"><function>g_object_set()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_property_name</parameter>&#160;:</term>
<listitem><simpara> name of first property to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> value of first property, followed by more properties, 
          <link linkend="NULL--CAPS"><literal>NULL</literal></link>-terminated
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-unparent" role="function">
<title>gtk_widget_unparent ()</title>
<indexterm zone="gtk-widget-unparent"><primary sortas="widget_unparent">gtk_widget_unparent</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_unparent                 (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
This function is only for use in widget implementations.
Should be called by implementations of the remove method
on <link linkend="GtkContainer"><type>GtkContainer</type></link>, to dissociate a child from the container.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-show" role="function">
<title>gtk_widget_show ()</title>
<indexterm zone="gtk-widget-show"><primary sortas="widget_show">gtk_widget_show</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_show                     (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Flags a widget to be displayed. Any widget that isn't shown will
not appear on the screen. If you want to show all the widgets in a
container, it's easier to call <link linkend="gtk-widget-show-all"><function>gtk_widget_show_all()</function></link> on the
container, instead of individually showing the widgets.
</para>
<para>
Remember that you have to show the containers containing a widget,
in addition to the widget itself, before it will appear onscreen.
</para>
<para>
When a toplevel container is shown, it is immediately realized and
mapped; other shown widgets are realized and mapped when their
toplevel container is realized and mapped.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-show-now" role="function">
<title>gtk_widget_show_now ()</title>
<indexterm zone="gtk-widget-show-now"><primary sortas="widget_show_now">gtk_widget_show_now</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_show_now                 (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Shows a widget. If the widget is an unmapped toplevel widget
(i.e. a <link linkend="GtkWindow"><type>GtkWindow</type></link> that has not yet been shown), enter the main
loop and wait for the window to actually be mapped. Be careful;
because the main loop is running, anything can happen during
this function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-hide" role="function">
<title>gtk_widget_hide ()</title>
<indexterm zone="gtk-widget-hide"><primary sortas="widget_hide">gtk_widget_hide</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_hide                     (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Reverses the effects of <link linkend="gtk-widget-show"><function>gtk_widget_show()</function></link>, causing the widget to be
hidden (invisible to the user).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-show-all" role="function">
<title>gtk_widget_show_all ()</title>
<indexterm zone="gtk-widget-show-all"><primary sortas="widget_show_all">gtk_widget_show_all</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_show_all                 (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Recursively shows a widget, and any child widgets (if the widget is
a container).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-hide-all" role="function">
<title>gtk_widget_hide_all ()</title>
<indexterm zone="gtk-widget-hide-all"><primary sortas="widget_hide_all">gtk_widget_hide_all</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_hide_all                 (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Recursively hides a widget and any child widgets.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-map" role="function">
<title>gtk_widget_map ()</title>
<indexterm zone="gtk-widget-map"><primary sortas="widget_map">gtk_widget_map</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_map                      (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
This function is only for use in widget implementations. Causes
a widget to be mapped if it isn't already.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-unmap" role="function">
<title>gtk_widget_unmap ()</title>
<indexterm zone="gtk-widget-unmap"><primary sortas="widget_unmap">gtk_widget_unmap</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_unmap                    (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
This function is only for use in widget implementations. Causes
a widget to be unmapped if it's currently mapped.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-realize" role="function">
<title>gtk_widget_realize ()</title>
<indexterm zone="gtk-widget-realize"><primary sortas="widget_realize">gtk_widget_realize</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_realize                  (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Creates the GDK (windowing system) resources associated with a
widget.  For example, <parameter>widget->window</parameter> will be created when a widget
is realized.  Normally realization happens implicitly; if you show
a widget and all its parent containers, then the widget will be
realized and mapped automatically.
</para>
<para>
Realizing a widget requires all
the widget's parent widgets to be realized; calling
<link linkend="gtk-widget-realize"><function>gtk_widget_realize()</function></link> realizes the widget's parents in addition to
<parameter>widget</parameter> itself. If a widget is not yet inside a toplevel window
when you realize it, bad things will happen.
</para>
<para>
This function is primarily used in widget implementations, and
isn't very useful otherwise. Many times when you think you might
need it, a better approach is to connect to a signal that will be
called after the widget is realized automatically, such as
GtkWidget::expose-event. Or simply <link linkend="g-signal-connect"><function>g_signal_connect()</function></link> to the
GtkWidget::realize signal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-unrealize" role="function">
<title>gtk_widget_unrealize ()</title>
<indexterm zone="gtk-widget-unrealize"><primary sortas="widget_unrealize">gtk_widget_unrealize</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_unrealize                (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
This function is only useful in widget implementations.
Causes a widget to be unrealized (frees all GDK resources
associated with the widget, such as <parameter>widget->window</parameter>).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-queue-draw" role="function">
<title>gtk_widget_queue_draw ()</title>
<indexterm zone="gtk-widget-queue-draw"><primary sortas="widget_queue_draw">gtk_widget_queue_draw</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_queue_draw               (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Equivalent to calling <link linkend="gtk-widget-queue-draw-area"><function>gtk_widget_queue_draw_area()</function></link> for the
entire area of a widget.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-queue-resize" role="function">
<title>gtk_widget_queue_resize ()</title>
<indexterm zone="gtk-widget-queue-resize"><primary sortas="widget_queue_resize">gtk_widget_queue_resize</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_queue_resize             (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
This function is only for use in widget implementations.
Flags a widget to have its size renegotiated; should
be called when a widget for some reason has a new size request.
For example, when you change the text in a <link linkend="GtkLabel"><type>GtkLabel</type></link>, <link linkend="GtkLabel"><type>GtkLabel</type></link>
queues a resize to ensure there's enough space for the new text.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-queue-resize-no-redraw" role="function" condition="since:2.4">
<title>gtk_widget_queue_resize_no_redraw ()</title>
<indexterm zone="gtk-widget-queue-resize-no-redraw" role="2.4"><primary sortas="widget_queue_resize_no_redraw">gtk_widget_queue_resize_no_redraw</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_queue_resize_no_redraw   (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
This function works like <link linkend="gtk-widget-queue-resize"><function>gtk_widget_queue_resize()</function></link>, 
except that the widget is not invalidated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4</para></refsect2>
<refsect2 id="gtk-widget-draw" role="function" condition="deprecated:">
<title>gtk_widget_draw ()</title>
<indexterm zone="gtk-widget-draw" role="deprecated"><primary sortas="widget_draw">gtk_widget_draw</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_draw                     (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="GdkRectangle">GdkRectangle</link> *area);</programlisting>
<warning><para><literal>gtk_widget_draw</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
In GTK+ 1.2, this function would immediately render the
region <parameter>area</parameter> of a widget, by invoking the virtual draw method of a
widget. In GTK+ 2.0, the draw method is gone, and instead
<link linkend="gtk-widget-draw"><function>gtk_widget_draw()</function></link> simply invalidates the specified region of the
widget, then updates the invalid region of the widget immediately.
Usually you don't want to update the region immediately for
performance reasons, so in general <link linkend="gtk-widget-queue-draw-area"><function>gtk_widget_queue_draw_area()</function></link> is
a better choice if you want to draw a region of a widget.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>area</parameter>&#160;:</term>
<listitem><simpara> area to draw
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-size-request" role="function">
<title>gtk_widget_size_request ()</title>
<indexterm zone="gtk-widget-size-request"><primary sortas="widget_size_request">gtk_widget_size_request</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_size_request             (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkRequisition">GtkRequisition</link> *requisition);</programlisting>
<para>
This function is typically used when implementing a <link linkend="GtkContainer"><type>GtkContainer</type></link>
subclass.  Obtains the preferred size of a widget. The container
uses this information to arrange its child widgets and decide what
size allocations to give them with <link linkend="gtk-widget-size-allocate"><function>gtk_widget_size_allocate()</function></link>.
</para>
<para>
You can also call this function from an application, with some
caveats. Most notably, getting a size request requires the widget
to be associated with a screen, because font information may be
needed. Multihead-aware applications should keep this in mind.
</para>
<para>
Also remember that the size request is not necessarily the size
a widget will actually be allocated.
</para>
<para>
See also <link linkend="gtk-widget-get-child-requisition"><function>gtk_widget_get_child_requisition()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>requisition</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkRequisition"><type>GtkRequisition</type></link> to be filled in
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-child-requisition" role="function">
<title>gtk_widget_get_child_requisition ()</title>
<indexterm zone="gtk-widget-get-child-requisition"><primary sortas="widget_get_child_requisition">gtk_widget_get_child_requisition</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_get_child_requisition    (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkRequisition">GtkRequisition</link> *requisition);</programlisting>
<para>
This function is only for use in widget implementations. Obtains
<parameter>widget->requisition</parameter>, unless someone has forced a particular
geometry on the widget (e.g. with <link linkend="gtk-widget-set-size-request"><function>gtk_widget_set_size_request()</function></link>),
in which case it returns that geometry instead of the widget's
requisition.
</para>
<para>
This function differs from <link linkend="gtk-widget-size-request"><function>gtk_widget_size_request()</function></link> in that
it retrieves the last size request value from <parameter>widget->requisition</parameter>,
while <link linkend="gtk-widget-size-request"><function>gtk_widget_size_request()</function></link> actually calls the "size_request" method
on <parameter>widget</parameter> to compute the size request and fill in <parameter>widget->requisition</parameter>,
and only then returns <parameter>widget->requisition</parameter>.
</para>
<para>
Because this function does not call the "size_request" method, it
can only be used when you know that <parameter>widget->requisition</parameter> is
up-to-date, that is, <link linkend="gtk-widget-size-request"><function>gtk_widget_size_request()</function></link> has been called
since the last time a resize was queued. In general, only container
implementations have this information; applications should use
<link linkend="gtk-widget-size-request"><function>gtk_widget_size_request()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>requisition</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkRequisition"><type>GtkRequisition</type></link> to be filled in
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-size-allocate" role="function">
<title>gtk_widget_size_allocate ()</title>
<indexterm zone="gtk-widget-size-allocate"><primary sortas="widget_size_allocate">gtk_widget_size_allocate</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_size_allocate            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkAllocation">GtkAllocation</link> *allocation);</programlisting>
<para>
This function is only used by <link linkend="GtkContainer"><type>GtkContainer</type></link> subclasses, to assign a size
and position to their child widgets.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>allocation</parameter>&#160;:</term>
<listitem><simpara> position and size to be allocated to <parameter>widget</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-add-accelerator" role="function">
<title>gtk_widget_add_accelerator ()</title>
<indexterm zone="gtk-widget-add-accelerator"><primary sortas="widget_add_accelerator">gtk_widget_add_accelerator</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_add_accelerator          (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *accel_signal,
                                                         <link linkend="GtkAccelGroup">GtkAccelGroup</link> *accel_group,
                                                         <link linkend="guint">guint</link> accel_key,
                                                         <link linkend="GdkModifierType">GdkModifierType</link> accel_mods,
                                                         <link linkend="GtkAccelFlags">GtkAccelFlags</link> accel_flags);</programlisting>
<para>
Installs an accelerator for this <parameter>widget</parameter> in <parameter>accel_group</parameter> that causes
<parameter>accel_signal</parameter> to be emitted if the accelerator is activated.
The <parameter>accel_group</parameter> needs to be added to the widget's toplevel via
<link linkend="gtk-window-add-accel-group"><function>gtk_window_add_accel_group()</function></link>, and the signal must be of type <link linkend="G-RUN-ACTION--CAPS"><literal>G_RUN_ACTION</literal></link>.
Accelerators added through this function are not user changeable during
runtime. If you want to support accelerators that can be changed by the
user, use <link linkend="gtk-accel-map-add-entry"><function>gtk_accel_map_add_entry()</function></link> and <link linkend="gtk-widget-set-accel-path"><function>gtk_widget_set_accel_path()</function></link> or
<link linkend="gtk-menu-item-set-accel-path"><function>gtk_menu_item_set_accel_path()</function></link> instead.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>       widget to install an accelerator on
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>accel_signal</parameter>&#160;:</term>
<listitem><simpara> widget signal to emit on accelerator activation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>accel_group</parameter>&#160;:</term>
<listitem><simpara>  accel group for this widget, added to its toplevel
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>accel_key</parameter>&#160;:</term>
<listitem><simpara>    GDK keyval of the accelerator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>accel_mods</parameter>&#160;:</term>
<listitem><simpara>   modifier key combination of the accelerator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>accel_flags</parameter>&#160;:</term>
<listitem><simpara>  flag accelerators, e.g. <link linkend="GTK-ACCEL-VISIBLE--CAPS"><literal>GTK_ACCEL_VISIBLE</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-remove-accelerator" role="function">
<title>gtk_widget_remove_accelerator ()</title>
<indexterm zone="gtk-widget-remove-accelerator"><primary sortas="widget_remove_accelerator">gtk_widget_remove_accelerator</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_remove_accelerator       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkAccelGroup">GtkAccelGroup</link> *accel_group,
                                                         <link linkend="guint">guint</link> accel_key,
                                                         <link linkend="GdkModifierType">GdkModifierType</link> accel_mods);</programlisting>
<para>
Removes an accelerator from <parameter>widget</parameter>, previously installed with
<link linkend="gtk-widget-add-accelerator"><function>gtk_widget_add_accelerator()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>       widget to install an accelerator on
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>accel_group</parameter>&#160;:</term>
<listitem><simpara>  accel group for this widget
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>accel_key</parameter>&#160;:</term>
<listitem><simpara>    GDK keyval of the accelerator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>accel_mods</parameter>&#160;:</term>
<listitem><simpara>   modifier key combination of the accelerator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>      whether an accelerator was installed and could be removed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-accel-path" role="function">
<title>gtk_widget_set_accel_path ()</title>
<indexterm zone="gtk-widget-set-accel-path"><primary sortas="widget_set_accel_path">gtk_widget_set_accel_path</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_accel_path           (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *accel_path,
                                                         <link linkend="GtkAccelGroup">GtkAccelGroup</link> *accel_group);</programlisting>
<para>
Given an accelerator group, <parameter>accel_group</parameter>, and an accelerator path,
<parameter>accel_path</parameter>, sets up an accelerator in <parameter>accel_group</parameter> so whenever the
key binding that is defined for <parameter>accel_path</parameter> is pressed, <parameter>widget</parameter>
will be activated.  This removes any accelerators (for any
accelerator group) installed by previous calls to
<link linkend="gtk-widget-set-accel-path"><function>gtk_widget_set_accel_path()</function></link>. Associating accelerators with
paths allows them to be modified by the user and the modifications
to be saved for future use. (See <link linkend="gtk-accel-map-save"><function>gtk_accel_map_save()</function></link>.)
</para>
<para>
This function is a low level function that would most likely
be used by a menu creation system like <link linkend="GtkUIManager"><type>GtkUIManager</type></link>. If you
use <link linkend="GtkUIManager"><type>GtkUIManager</type></link>, setting up accelerator paths will be done
automatically.
</para>
<para>
Even when you you aren't using <link linkend="GtkUIManager"><type>GtkUIManager</type></link>, if you only want to
set up accelerators on menu items <link linkend="gtk-menu-item-set-accel-path"><function>gtk_menu_item_set_accel_path()</function></link>
provides a somewhat more convenient interface.
</para>
<para>
Note that <parameter>accel_path</parameter> string will be stored in a <link linkend="GQuark"><type>GQuark</type></link>. Therefore, if you
pass a static string, you can save some memory by interning it first with 
<link linkend="g-intern-static-string"><function>g_intern_static_string()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>accel_path</parameter>&#160;:</term>
<listitem><simpara> path used to look up the accelerator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>accel_group</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkAccelGroup"><type>GtkAccelGroup</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-list-accel-closures" role="function">
<title>gtk_widget_list_accel_closures ()</title>
<indexterm zone="gtk-widget-list-accel-closures"><primary sortas="widget_list_accel_closures">gtk_widget_list_accel_closures</primary></indexterm><programlisting><link linkend="GList">GList</link>*              gtk_widget_list_accel_closures      (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Lists the closures used by <parameter>widget</parameter> for accelerator group connections
with <link linkend="gtk-accel-group-connect-by-path"><function>gtk_accel_group_connect_by_path()</function></link> or <link linkend="gtk-accel-group-connect"><function>gtk_accel_group_connect()</function></link>.
The closures can be used to monitor accelerator changes on <parameter>widget</parameter>,
by connecting to the <parameter>GtkAccelGroup</parameter>::accel-changed signal of the 
<link linkend="GtkAccelGroup"><type>GtkAccelGroup</type></link> of a closure which can be found out with 
<link linkend="gtk-accel-group-from-accel-closure"><function>gtk_accel_group_from_accel_closure()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>  widget to list accelerator closures for
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a newly allocated <link linkend="GList"><type>GList</type></link> of closures
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-can-activate-accel" role="function" condition="since:2.4">
<title>gtk_widget_can_activate_accel ()</title>
<indexterm zone="gtk-widget-can-activate-accel" role="2.4"><primary sortas="widget_can_activate_accel">gtk_widget_can_activate_accel</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_can_activate_accel       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="guint">guint</link> signal_id);</programlisting>
<para>
Determines whether an accelerator that activates the signal
identified by <parameter>signal_id</parameter> can currently be activated.
This is done by emitting the <link linkend="GtkWidget-can-activate-accel"><type>"can-activate-accel"</type></link>
signal on <parameter>widget</parameter>; if the signal isn't overridden by a
handler or in a derived widget, then the default check is
that the widget must be sensitive, and the widget and all
its ancestors mapped.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signal_id</parameter>&#160;:</term>
<listitem><simpara> the ID of a signal installed on <parameter>widget</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the accelerator can be activated.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4</para></refsect2>
<refsect2 id="gtk-widget-event" role="function">
<title>gtk_widget_event ()</title>
<indexterm zone="gtk-widget-event"><primary sortas="widget_event">gtk_widget_event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_event                    (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkEvent">GdkEvent</link> *event);</programlisting>
<para>
Rarely-used function. This function is used to emit
the event signals on a widget (those signals should never
be emitted without using this function to do so).
If you want to synthesize an event though, don't use this function;
instead, use <link linkend="gtk-main-do-event"><function>gtk_main_do_event()</function></link> so the event will behave as if
it were in the event queue. Don't synthesize expose events; instead,
use <link linkend="gdk-window-invalidate-rect"><function>gdk_window_invalidate_rect()</function></link> to invalidate a region of the
window.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdkEvent"><type>GdkEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> return from the event signal emission (<link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if 
              the event was handled)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-activate" role="function">
<title>gtk_widget_activate ()</title>
<indexterm zone="gtk-widget-activate"><primary sortas="widget_activate">gtk_widget_activate</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_activate                 (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
For widgets that can be "activated" (buttons, menu items, etc.)
this function activates them. Activation is what happens when you
press Enter on a widget during key navigation. If <parameter>widget</parameter> isn't 
activatable, the function returns <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link> that's activatable
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget was activatable
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-reparent" role="function">
<title>gtk_widget_reparent ()</title>
<indexterm zone="gtk-widget-reparent"><primary sortas="widget_reparent">gtk_widget_reparent</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_reparent                 (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkWidget">GtkWidget</link> *new_parent);</programlisting>
<para>
Moves a widget from one <link linkend="GtkContainer"><type>GtkContainer</type></link> to another, handling reference
count issues to avoid destroying the widget.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_parent</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkContainer"><type>GtkContainer</type></link> to move the widget into
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-intersect" role="function">
<title>gtk_widget_intersect ()</title>
<indexterm zone="gtk-widget-intersect"><primary sortas="widget_intersect">gtk_widget_intersect</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_intersect                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="GdkRectangle">GdkRectangle</link> *area,
                                                         <link linkend="GdkRectangle">GdkRectangle</link> *intersection);</programlisting>
<para>
Computes the intersection of a <parameter>widget</parameter>'s area and <parameter>area</parameter>, storing
the intersection in <parameter>intersection</parameter>, and returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if there was
an intersection.  <parameter>intersection</parameter> may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if you're only
interested in whether there was an intersection.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>area</parameter>&#160;:</term>
<listitem><simpara> a rectangle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>intersection</parameter>&#160;:</term>
<listitem><simpara> rectangle to store intersection of <parameter>widget</parameter> and <parameter>area</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if there was an intersection
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-is-focus" role="function">
<title>gtk_widget_is_focus ()</title>
<indexterm zone="gtk-widget-is-focus"><primary sortas="widget_is_focus">gtk_widget_is_focus</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_is_focus                 (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Determines if the widget is the focus widget within its
toplevel. (This does not mean that the <link linkend="HAS-FOCUS--CAPS"><literal>HAS_FOCUS</literal></link> flag is
necessarily set; <link linkend="HAS-FOCUS--CAPS"><literal>HAS_FOCUS</literal></link> will only be set if the
toplevel widget additionally has the global input focus.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget is the focus widget.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-grab-focus" role="function">
<title>gtk_widget_grab_focus ()</title>
<indexterm zone="gtk-widget-grab-focus"><primary sortas="widget_grab_focus">gtk_widget_grab_focus</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_grab_focus               (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Causes <parameter>widget</parameter> to have the keyboard focus for the <link linkend="GtkWindow"><type>GtkWindow</type></link> it's
inside. <parameter>widget</parameter> must be a focusable widget, such as a <link linkend="GtkEntry"><type>GtkEntry</type></link>;
something like <link linkend="GtkFrame"><type>GtkFrame</type></link> won't work. (More precisely, it must have the
<link linkend="GTK-CAN-FOCUS--CAPS"><literal>GTK_CAN_FOCUS</literal></link> flag set.)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-grab-default" role="function">
<title>gtk_widget_grab_default ()</title>
<indexterm zone="gtk-widget-grab-default"><primary sortas="widget_grab_default">gtk_widget_grab_default</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_grab_default             (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Causes <parameter>widget</parameter> to become the default widget. <parameter>widget</parameter> must have the
<link linkend="GTK-CAN-DEFAULT--CAPS"><literal>GTK_CAN_DEFAULT</literal></link> flag set; typically you have to set this flag
yourself by calling <literal>GTK_WIDGET_SET_FLAGS (<parameter>widget</parameter>,
GTK_CAN_DEFAULT)</literal>. The default widget is activated when 
the user presses Enter in a window. Default widgets must be 
activatable, that is, <link linkend="gtk-widget-activate"><function>gtk_widget_activate()</function></link> should affect them.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-name" role="function">
<title>gtk_widget_set_name ()</title>
<indexterm zone="gtk-widget-set-name"><primary sortas="widget_set_name">gtk_widget_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_name                 (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Widgets can be named, which allows you to refer to them from a
gtkrc file. You can apply a style to widgets with a particular name
in the gtkrc file. See the documentation for gtkrc files (on the
same page as the docs for <link linkend="GtkRcStyle"><type>GtkRcStyle</type></link>).
</para>
<para>
Note that widget names are separated by periods in paths (see 
<link linkend="gtk-widget-path"><function>gtk_widget_path()</function></link>), so names with embedded periods may cause confusion.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> name for the widget
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-name" role="function">
<title>gtk_widget_get_name ()</title>
<indexterm zone="gtk-widget-get-name"><primary sortas="widget_get_name">gtk_widget_get_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>*        gtk_widget_get_name                 (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Retrieves the name of a widget. See <link linkend="gtk-widget-set-name"><function>gtk_widget_set_name()</function></link> for the
significance of widget names.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> name of the widget. This string is owned by GTK+ and
should not be modified or freed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-state" role="function">
<title>gtk_widget_set_state ()</title>
<indexterm zone="gtk-widget-set-state"><primary sortas="widget_set_state">gtk_widget_set_state</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_state                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkStateType">GtkStateType</link> state);</programlisting>
<para>
This function is for use in widget implementations. Sets the state
of a widget (insensitive, prelighted, etc.) Usually you should set
the state using wrapper functions such as <link linkend="gtk-widget-set-sensitive"><function>gtk_widget_set_sensitive()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&#160;:</term>
<listitem><simpara> new state for <parameter>widget</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-sensitive" role="function">
<title>gtk_widget_set_sensitive ()</title>
<indexterm zone="gtk-widget-set-sensitive"><primary sortas="widget_set_sensitive">gtk_widget_set_sensitive</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_sensitive            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> sensitive);</programlisting>
<para>
Sets the sensitivity of a widget. A widget is sensitive if the user
can interact with it. Insensitive widgets are "grayed out" and the
user can't interact with them. Insensitive widgets are known as
"inactive", "disabled", or "ghosted" in some other toolkits.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sensitive</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to make the widget sensitive
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-parent" role="function">
<title>gtk_widget_set_parent ()</title>
<indexterm zone="gtk-widget-set-parent"><primary sortas="widget_set_parent">gtk_widget_set_parent</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_parent               (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkWidget">GtkWidget</link> *parent);</programlisting>
<para>
This function is useful only when implementing subclasses of 
<link linkend="GtkContainer"><type>GtkContainer</type></link>.
Sets the container as the parent of <parameter>widget</parameter>, and takes care of
some details such as updating the state and style of the child
to reflect its new location. The opposite function is
<link linkend="gtk-widget-unparent"><function>gtk_widget_unparent()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&#160;:</term>
<listitem><simpara> parent container
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-parent-window" role="function">
<title>gtk_widget_set_parent_window ()</title>
<indexterm zone="gtk-widget-set-parent-window"><primary sortas="widget_set_parent_window">gtk_widget_set_parent_window</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_parent_window        (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkWindow">GdkWindow</link> *parent_window);</programlisting>
<para>
Sets a non default parent window for <parameter>widget</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent_window</parameter>&#160;:</term>
<listitem><simpara> the new parent window.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-parent-window" role="function">
<title>gtk_widget_get_parent_window ()</title>
<indexterm zone="gtk-widget-get-parent-window"><primary sortas="widget_get_parent_window">gtk_widget_get_parent_window</primary></indexterm><programlisting><link linkend="GdkWindow">GdkWindow</link> *         gtk_widget_get_parent_window        (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Gets <parameter>widget</parameter>'s parent window.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the parent window of <parameter>widget</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-uposition" role="function" condition="deprecated:">
<title>gtk_widget_set_uposition ()</title>
<indexterm zone="gtk-widget-set-uposition" role="deprecated"><primary sortas="widget_set_uposition">gtk_widget_set_uposition</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_uposition            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y);</programlisting>
<warning><para><literal>gtk_widget_set_uposition</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
Sets the position of a widget. The funny "u" in the name comes from
the "user position" hint specified by the X Window System, and
exists for legacy reasons. This function doesn't work if a widget
is inside a container; it's only really useful on <link linkend="GtkWindow"><type>GtkWindow</type></link>.
</para>
<para>
Don't use this function to center dialogs over the main application
window; most window managers will do the centering on your behalf
if you call <link linkend="gtk-window-set-transient-for"><function>gtk_window_set_transient_for()</function></link>, and it's really not
possible to get the centering to work correctly in all cases from
application code. But if you insist, use <link linkend="gtk-window-set-position"><function>gtk_window_set_position()</function></link>
to set <link linkend="GTK-WIN-POS-CENTER-ON-PARENT--CAPS"><type>GTK_WIN_POS_CENTER_ON_PARENT</type></link>, don't do the centering
manually.
</para>
<para>
Note that although <parameter>x</parameter> and <parameter>y</parameter> can be individually unset, the position
is not honoured unless both <parameter>x</parameter> and <parameter>y</parameter> are set.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> x position; -1 to unset x; -2 to leave x unchanged
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> y position; -1 to unset y; -2 to leave y unchanged
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-usize" role="function" condition="deprecated:2.2: Use gtk_widget_set_size_request() instead.">
<title>gtk_widget_set_usize ()</title>
<indexterm zone="gtk-widget-set-usize" role="deprecated"><primary sortas="widget_set_usize">gtk_widget_set_usize</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_usize                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> width,
                                                         <link linkend="gint">gint</link> height);</programlisting>
<warning><para><literal>gtk_widget_set_usize</literal> has been deprecated since version 2.2 and should not be used in newly-written code. Use <link linkend="gtk-widget-set-size-request"><function>gtk_widget_set_size_request()</function></link> instead.</para></warning>
<para>
Sets the minimum size of a widget; that is, the widget's size
request will be <parameter>width</parameter> by <parameter>height</parameter>. You can use this function to
force a widget to be either larger or smaller than it is. The
strange "usize" name dates from the early days of GTK+, and derives
from X Window System terminology. In many cases,
<link linkend="gtk-window-set-default-size"><function>gtk_window_set_default_size()</function></link> is a better choice for toplevel
windows than this function; setting the default size will still
allow users to shrink the window. Setting the usize will force them
to leave the window at least as large as the usize. When dealing
with window sizes, <link linkend="gtk-window-set-geometry-hints"><function>gtk_window_set_geometry_hints()</function></link> can be a useful
function as well.
</para>
<para>
Note the inherent danger of setting any fixed size - themes,
translations into other languages, different fonts, and user action
can all change the appropriate size for a given widget. So, it's
basically impossible to hardcode a size that will always be
correct.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&#160;:</term>
<listitem><simpara> minimum width, or -1 to unset
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&#160;:</term>
<listitem><simpara> minimum height, or -1 to unset
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-events" role="function">
<title>gtk_widget_set_events ()</title>
<indexterm zone="gtk-widget-set-events"><primary sortas="widget_set_events">gtk_widget_set_events</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_events               (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> events);</programlisting>
<para>
Sets the event mask (see <link linkend="GdkEventMask"><type>GdkEventMask</type></link>) for a widget. The event
mask determines which events a widget will receive. Keep in mind
that different widgets have different default event masks, and by
changing the event mask you may disrupt a widget's functionality,
so be careful. This function must be called while a widget is
unrealized. Consider <link linkend="gtk-widget-add-events"><function>gtk_widget_add_events()</function></link> for widgets that are
already realized, or if you want to preserve the existing event
mask. This function can't be used with <link linkend="GTK-NO-WINDOW--CAPS"><type>GTK_NO_WINDOW</type></link> widgets;
to get events on those widgets, place them inside a <link linkend="GtkEventBox"><type>GtkEventBox</type></link>
and receive events on the event box.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>events</parameter>&#160;:</term>
<listitem><simpara> event mask
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-add-events" role="function">
<title>gtk_widget_add_events ()</title>
<indexterm zone="gtk-widget-add-events"><primary sortas="widget_add_events">gtk_widget_add_events</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_add_events               (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> events);</programlisting>
<para>
Adds the events in the bitfield <parameter>events</parameter> to the event mask for
<parameter>widget</parameter>. See <link linkend="gtk-widget-set-events"><function>gtk_widget_set_events()</function></link> for details.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>events</parameter>&#160;:</term>
<listitem><simpara> an event mask, see <link linkend="GdkEventMask"><type>GdkEventMask</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-extension-events" role="function">
<title>gtk_widget_set_extension_events ()</title>
<indexterm zone="gtk-widget-set-extension-events"><primary sortas="widget_set_extension_events">gtk_widget_set_extension_events</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_extension_events     (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkExtensionMode">GdkExtensionMode</link> mode);</programlisting>
<para>
Sets the extension events mask to <parameter>mode</parameter>. See <link linkend="GdkExtensionMode"><type>GdkExtensionMode</type></link>
and <link linkend="gdk-input-set-extension-events"><function>gdk_input_set_extension_events()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&#160;:</term>
<listitem><simpara> bitfield of extension events to receive
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-extension-events" role="function">
<title>gtk_widget_get_extension_events ()</title>
<indexterm zone="gtk-widget-get-extension-events"><primary sortas="widget_get_extension_events">gtk_widget_get_extension_events</primary></indexterm><programlisting><link linkend="GdkExtensionMode">GdkExtensionMode</link>    gtk_widget_get_extension_events     (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Retrieves the extension events the widget will receive; see
<link linkend="gdk-input-set-extension-events"><function>gdk_input_set_extension_events()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> extension events for <parameter>widget</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-toplevel" role="function">
<title>gtk_widget_get_toplevel ()</title>
<indexterm zone="gtk-widget-get-toplevel"><primary sortas="widget_get_toplevel">gtk_widget_get_toplevel</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*          gtk_widget_get_toplevel             (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
This function returns the topmost widget in the container hierarchy
<parameter>widget</parameter> is a part of. If <parameter>widget</parameter> has no parent widgets, it will be
returned as the topmost widget. No reference will be added to the
returned widget; it should not be unreferenced.
</para>
<para>
Note the difference in behavior vs. <link linkend="gtk-widget-get-ancestor"><function>gtk_widget_get_ancestor()</function></link>;
<literal>gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)</literal> 
would return
<link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>widget</parameter> wasn't inside a toplevel window, and if the
window was inside a <link linkend="GtkWindow-derived"><type>GtkWindow-derived</type></link> widget which was in turn
inside the toplevel <link linkend="GtkWindow"><type>GtkWindow</type></link>. While the second case may
seem unlikely, it actually happens when a <link linkend="GtkPlug"><type>GtkPlug</type></link> is embedded
inside a <link linkend="GtkSocket"><type>GtkSocket</type></link> within the same application.
</para>
<para>
To reliably find the toplevel <link linkend="GtkWindow"><type>GtkWindow</type></link>, use
<link linkend="gtk-widget-get-toplevel"><function>gtk_widget_get_toplevel()</function></link> and check if the <link linkend="TOPLEVEL--CAPS"><literal>TOPLEVEL</literal></link> flags
is set on the result.
<informalexample><programlisting>
 GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 if (GTK_WIDGET_TOPLEVEL (toplevel))
   {
     /&ast; Perform action on toplevel. &ast;/
   }
</programlisting></informalexample></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the topmost ancestor of <parameter>widget</parameter>, or <parameter>widget</parameter> itself 
   if there's no ancestor.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-ancestor" role="function">
<title>gtk_widget_get_ancestor ()</title>
<indexterm zone="gtk-widget-get-ancestor"><primary sortas="widget_get_ancestor">gtk_widget_get_ancestor</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*          gtk_widget_get_ancestor             (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GType">GType</link> widget_type);</programlisting>
<para>
Gets the first ancestor of <parameter>widget</parameter> with type <parameter>widget_type</parameter>. For example,
<literal>gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)</literal> gets 
the first <link linkend="GtkBox"><type>GtkBox</type></link> that's an ancestor of <parameter>widget</parameter>. No reference will be 
added to the returned widget; it should not be unreferenced. See note 
about checking for a toplevel <link linkend="GtkWindow"><type>GtkWindow</type></link> in the docs for 
<link linkend="gtk-widget-get-toplevel"><function>gtk_widget_get_toplevel()</function></link>.
</para>
<para>
Note that unlike <link linkend="gtk-widget-is-ancestor"><function>gtk_widget_is_ancestor()</function></link>, <link linkend="gtk-widget-get-ancestor"><function>gtk_widget_get_ancestor()</function></link> 
considers <parameter>widget</parameter> to be an ancestor of itself.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget_type</parameter>&#160;:</term>
<listitem><simpara> ancestor type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the ancestor widget, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if not found
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-colormap" role="function">
<title>gtk_widget_get_colormap ()</title>
<indexterm zone="gtk-widget-get-colormap"><primary sortas="widget_get_colormap">gtk_widget_get_colormap</primary></indexterm><programlisting><link linkend="GdkColormap">GdkColormap</link>*        gtk_widget_get_colormap             (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Gets the colormap that will be used to render <parameter>widget</parameter>. No reference will
be added to the returned colormap; it should not be unreferenced.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the colormap used by <parameter>widget</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-colormap" role="function">
<title>gtk_widget_set_colormap ()</title>
<indexterm zone="gtk-widget-set-colormap"><primary sortas="widget_set_colormap">gtk_widget_set_colormap</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_colormap             (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkColormap">GdkColormap</link> *colormap);</programlisting>
<para>
Sets the colormap for the widget to the given value. Widget must not
have been previously realized. This probably should only be used
from an <function><link linkend="init"><function>init()</function></link></function> function (i.e. from the constructor 
for the widget).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>colormap</parameter>&#160;:</term>
<listitem><simpara> a colormap
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-visual" role="function">
<title>gtk_widget_get_visual ()</title>
<indexterm zone="gtk-widget-get-visual"><primary sortas="widget_get_visual">gtk_widget_get_visual</primary></indexterm><programlisting><link linkend="GdkVisual">GdkVisual</link>*          gtk_widget_get_visual               (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Gets the visual that will be used to render <parameter>widget</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the visual for <parameter>widget</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-events" role="function">
<title>gtk_widget_get_events ()</title>
<indexterm zone="gtk-widget-get-events"><primary sortas="widget_get_events">gtk_widget_get_events</primary></indexterm><programlisting><link linkend="gint">gint</link>                gtk_widget_get_events               (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Returns the event mask for the widget (a bitfield containing flags
from the <link linkend="GdkEventMask"><type>GdkEventMask</type></link> enumeration). These are the events that the widget
will receive.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> event mask for <parameter>widget</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-pointer" role="function">
<title>gtk_widget_get_pointer ()</title>
<indexterm zone="gtk-widget-get-pointer"><primary sortas="widget_get_pointer">gtk_widget_get_pointer</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_get_pointer              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> *x,
                                                         <link linkend="gint">gint</link> *y);</programlisting>
<para>
Obtains the location of the mouse pointer in widget coordinates.
Widget coordinates are a bit odd; for historical reasons, they are
defined as <parameter>widget->window</parameter> coordinates for widgets that are not
<link linkend="GTK-NO-WINDOW--CAPS"><type>GTK_NO_WINDOW</type></link> widgets, and are relative to <parameter>widget->allocation.x</parameter>,
<parameter>widget->allocation.y</parameter> for widgets that are <link linkend="GTK-NO-WINDOW--CAPS"><type>GTK_NO_WINDOW</type></link> widgets.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> return location for the X coordinate, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> return location for the Y coordinate, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-is-ancestor" role="function">
<title>gtk_widget_is_ancestor ()</title>
<indexterm zone="gtk-widget-is-ancestor"><primary sortas="widget_is_ancestor">gtk_widget_is_ancestor</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_is_ancestor              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkWidget">GtkWidget</link> *ancestor);</programlisting>
<para>
Determines whether <parameter>widget</parameter> is somewhere inside <parameter>ancestor</parameter>, possibly with
intermediate containers.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ancestor</parameter>&#160;:</term>
<listitem><simpara> another <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>ancestor</parameter> contains <parameter>widget</parameter> as a child, 
   grandchild, great grandchild, etc.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-translate-coordinates" role="function">
<title>gtk_widget_translate_coordinates ()</title>
<indexterm zone="gtk-widget-translate-coordinates"><primary sortas="widget_translate_coordinates">gtk_widget_translate_coordinates</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_translate_coordinates    (<link linkend="GtkWidget">GtkWidget</link> *src_widget,
                                                         <link linkend="GtkWidget">GtkWidget</link> *dest_widget,
                                                         <link linkend="gint">gint</link> src_x,
                                                         <link linkend="gint">gint</link> src_y,
                                                         <link linkend="gint">gint</link> *dest_x,
                                                         <link linkend="gint">gint</link> *dest_y);</programlisting>
<para>
Translate coordinates relative to <parameter>src_widget</parameter>'s allocation to coordinates
relative to <parameter>dest_widget</parameter>'s allocations. In order to perform this
operation, both widgets must be realized, and must share a common
toplevel.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src_widget</parameter>&#160;:</term>
<listitem><simpara>  a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dest_widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src_x</parameter>&#160;:</term>
<listitem><simpara> X position relative to <parameter>src_widget</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src_y</parameter>&#160;:</term>
<listitem><simpara> Y position relative to <parameter>src_widget</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dest_x</parameter>&#160;:</term>
<listitem><simpara> location to store X position relative to <parameter>dest_widget</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dest_y</parameter>&#160;:</term>
<listitem><simpara> location to store Y position relative to <parameter>dest_widget</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if either widget was not realized, or there
  was no common ancestor. In this case, nothing is stored in
  *<parameter>dest_x</parameter> and *<parameter>dest_y</parameter>. Otherwise <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-hide-on-delete" role="function">
<title>gtk_widget_hide_on_delete ()</title>
<indexterm zone="gtk-widget-hide-on-delete"><primary sortas="widget_hide_on_delete">gtk_widget_hide_on_delete</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_hide_on_delete           (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Utility function; intended to be connected to the <link linkend="GtkWidget-delete-event"><type>"delete-event"</type></link>
signal on a <link linkend="GtkWindow"><type>GtkWindow</type></link>. The function calls <link linkend="gtk-widget-hide"><function>gtk_widget_hide()</function></link> on its
argument, then returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>. If connected to ::delete-event, the
result is that clicking the close button for a window (on the
window frame, top right corner usually) will hide but not destroy
the window. By default, GTK+ destroys windows when ::delete-event
is received.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-style" role="function">
<title>gtk_widget_set_style ()</title>
<indexterm zone="gtk-widget-set-style"><primary sortas="widget_set_style">gtk_widget_set_style</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_style                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkStyle">GtkStyle</link> *style);</programlisting>
<para>
Sets the <link linkend="GtkStyle"><type>GtkStyle</type></link> for a widget (<parameter>widget->style</parameter>). You probably don't
want to use this function; it interacts badly with themes, because
themes work by replacing the <link linkend="GtkStyle"><type>GtkStyle</type></link>. Instead, use
<link linkend="gtk-widget-modify-style"><function>gtk_widget_modify_style()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>style</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkStyle"><type>GtkStyle</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to remove the effect of a previous
        <link linkend="gtk-widget-set-style"><function>gtk_widget_set_style()</function></link> and go back to the default style
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-rc-style" role="macro" condition="deprecated:Use gtk_widget_set_style() with a %NULL @style argument instead.">
<title>gtk_widget_set_rc_style()</title>
<indexterm zone="gtk-widget-set-rc-style" role="deprecated"><primary sortas="widget_set_rc_style">gtk_widget_set_rc_style</primary></indexterm><programlisting>#define gtk_widget_set_rc_style(widget)          (gtk_widget_set_style (widget, NULL))
</programlisting>
<warning><para><literal>gtk_widget_set_rc_style</literal> is deprecated and should not be used in newly-written code. Use <link linkend="gtk-widget-set-style"><function>gtk_widget_set_style()</function></link> with a <link linkend="NULL--CAPS"><literal>NULL</literal></link> <parameter>style</parameter> argument instead.</para></warning>
<para>
Equivalent to <literal>gtk_widget_set_style (widget, NULL)</literal>.
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-ensure-style" role="function">
<title>gtk_widget_ensure_style ()</title>
<indexterm zone="gtk-widget-ensure-style"><primary sortas="widget_ensure_style">gtk_widget_ensure_style</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_ensure_style             (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Ensures that <parameter>widget</parameter> has a style (<parameter>widget->style</parameter>). Not a very useful
function; most of the time, if you want the style, the widget is
realized, and realized widgets are guaranteed to have a style
already.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-style" role="function">
<title>gtk_widget_get_style ()</title>
<indexterm zone="gtk-widget-get-style"><primary sortas="widget_get_style">gtk_widget_get_style</primary></indexterm><programlisting><link linkend="GtkStyle">GtkStyle</link>*           gtk_widget_get_style                (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Simply an accessor function that returns <parameter>widget->style</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the widget's <link linkend="GtkStyle"><type>GtkStyle</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-restore-default-style" role="macro" condition="deprecated:Use gtk_widget_set_style() with a %NULL @style argument instead.">
<title>gtk_widget_restore_default_style()</title>
<indexterm zone="gtk-widget-restore-default-style" role="deprecated"><primary sortas="widget_restore_default_style">gtk_widget_restore_default_style</primary></indexterm><programlisting>#define gtk_widget_restore_default_style(widget) (gtk_widget_set_style (widget, NULL))
</programlisting>
<warning><para><literal>gtk_widget_restore_default_style</literal> is deprecated and should not be used in newly-written code. Use <link linkend="gtk-widget-set-style"><function>gtk_widget_set_style()</function></link> with a <link linkend="NULL--CAPS"><literal>NULL</literal></link> <parameter>style</parameter> argument instead.</para></warning>
<para>
Equivalent to <literal>gtk_widget_set_style (widget, NULL)</literal>.
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-reset-rc-styles" role="function">
<title>gtk_widget_reset_rc_styles ()</title>
<indexterm zone="gtk-widget-reset-rc-styles"><primary sortas="widget_reset_rc_styles">gtk_widget_reset_rc_styles</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_reset_rc_styles          (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Reset the styles of <parameter>widget</parameter> and all descendents, so when
they are looked up again, they get the correct values
for the currently loaded RC file settings.
</para>
<para>
This function is not useful for applications.
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-push-colormap" role="function">
<title>gtk_widget_push_colormap ()</title>
<indexterm zone="gtk-widget-push-colormap"><primary sortas="widget_push_colormap">gtk_widget_push_colormap</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_push_colormap            (<link linkend="GdkColormap">GdkColormap</link> *cmap);</programlisting>
<para>
Pushes <parameter>cmap</parameter> onto a global stack of colormaps; the topmost
colormap on the stack will be used to create all widgets.
Remove <parameter>cmap</parameter> with <link linkend="gtk-widget-pop-colormap"><function>gtk_widget_pop_colormap()</function></link>. There's little
reason to use this function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cmap</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdkColormap"><type>GdkColormap</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-pop-colormap" role="function">
<title>gtk_widget_pop_colormap ()</title>
<indexterm zone="gtk-widget-pop-colormap"><primary sortas="widget_pop_colormap">gtk_widget_pop_colormap</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_pop_colormap             (void);</programlisting>
<para>
Removes a colormap pushed with <link linkend="gtk-widget-push-colormap"><function>gtk_widget_push_colormap()</function></link>.</para>
<para>
</para></refsect2>
<refsect2 id="gtk-widget-set-default-colormap" role="function">
<title>gtk_widget_set_default_colormap ()</title>
<indexterm zone="gtk-widget-set-default-colormap"><primary sortas="widget_set_default_colormap">gtk_widget_set_default_colormap</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_default_colormap     (<link linkend="GdkColormap">GdkColormap</link> *colormap);</programlisting>
<para>
Sets the default colormap to use when creating widgets.
<link linkend="gtk-widget-push-colormap"><function>gtk_widget_push_colormap()</function></link> is a better function to use if
you only want to affect a few widgets, rather than all widgets.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>colormap</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdkColormap"><type>GdkColormap</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-default-style" role="function">
<title>gtk_widget_get_default_style ()</title>
<indexterm zone="gtk-widget-get-default-style"><primary sortas="widget_get_default_style">gtk_widget_get_default_style</primary></indexterm><programlisting><link linkend="GtkStyle">GtkStyle</link>*           gtk_widget_get_default_style        (void);</programlisting>
<para>
Returns the default style used by all widgets initially.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the default style. This <link linkend="GtkStyle"><type>GtkStyle</type></link> object is owned 
         by GTK+ and should not be modified or freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-default-colormap" role="function">
<title>gtk_widget_get_default_colormap ()</title>
<indexterm zone="gtk-widget-get-default-colormap"><primary sortas="widget_get_default_colormap">gtk_widget_get_default_colormap</primary></indexterm><programlisting><link linkend="GdkColormap">GdkColormap</link>*        gtk_widget_get_default_colormap     (void);</programlisting>
<para>
Obtains the default colormap used to create widgets.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> default widget colormap
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-default-visual" role="function">
<title>gtk_widget_get_default_visual ()</title>
<indexterm zone="gtk-widget-get-default-visual"><primary sortas="widget_get_default_visual">gtk_widget_get_default_visual</primary></indexterm><programlisting><link linkend="GdkVisual">GdkVisual</link>*          gtk_widget_get_default_visual       (void);</programlisting>
<para>
Obtains the visual of the default colormap. Not really useful;
used to be useful before <link linkend="gdk-colormap-get-visual"><function>gdk_colormap_get_visual()</function></link> existed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> visual of the default colormap
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-direction" role="function">
<title>gtk_widget_set_direction ()</title>
<indexterm zone="gtk-widget-set-direction"><primary sortas="widget_set_direction">gtk_widget_set_direction</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_direction            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkTextDirection">GtkTextDirection</link> dir);</programlisting>
<para>
Sets the reading direction on a particular widget. This direction
controls the primary direction for widgets containing text,
and also the direction in which the children of a container are
packed. The ability to set the direction is present in order
so that correct localization into languages with right-to-left
reading directions can be done. Generally, applications will
let the default reading direction present, except for containers
where the containers are arranged in an order that is explicitely
visual rather than logical (such as buttons for text justification).
</para>
<para>
If the direction is set to <link linkend="GTK-TEXT-DIR-NONE--CAPS"><literal>GTK_TEXT_DIR_NONE</literal></link>, then the value
set by <link linkend="gtk-widget-set-default-direction"><function>gtk_widget_set_default_direction()</function></link> will be used.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dir</parameter>&#160;:</term>
<listitem><simpara>    the new direction
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GtkTextDirection" role="enum">
<title>enum GtkTextDirection</title>
<indexterm zone="GtkTextDirection"><primary sortas="TextDirection">GtkTextDirection</primary></indexterm><programlisting>typedef enum
{
  GTK_TEXT_DIR_NONE,
  GTK_TEXT_DIR_LTR,
  GTK_TEXT_DIR_RTL
} GtkTextDirection;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gtk-widget-get-direction" role="function">
<title>gtk_widget_get_direction ()</title>
<indexterm zone="gtk-widget-get-direction"><primary sortas="widget_get_direction">gtk_widget_get_direction</primary></indexterm><programlisting><link linkend="GtkTextDirection">GtkTextDirection</link>    gtk_widget_get_direction            (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Gets the reading direction for a particular widget. See
<link linkend="gtk-widget-set-direction"><function>gtk_widget_set_direction()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the reading direction for the widget.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-default-direction" role="function">
<title>gtk_widget_set_default_direction ()</title>
<indexterm zone="gtk-widget-set-default-direction"><primary sortas="widget_set_default_direction">gtk_widget_set_default_direction</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_default_direction    (<link linkend="GtkTextDirection">GtkTextDirection</link> dir);</programlisting>
<para>
Sets the default reading direction for widgets where the
direction has not been explicitly set by <link linkend="gtk-widget-set-direction"><function>gtk_widget_set_direction()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dir</parameter>&#160;:</term>
<listitem><simpara> the new default direction. This cannot be
       <link linkend="GTK-TEXT-DIR-NONE--CAPS"><literal>GTK_TEXT_DIR_NONE</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-default-direction" role="function">
<title>gtk_widget_get_default_direction ()</title>
<indexterm zone="gtk-widget-get-default-direction"><primary sortas="widget_get_default_direction">gtk_widget_get_default_direction</primary></indexterm><programlisting><link linkend="GtkTextDirection">GtkTextDirection</link>    gtk_widget_get_default_direction    (void);</programlisting>
<para>
Obtains the current default reading direction. See
<link linkend="gtk-widget-set-default-direction"><function>gtk_widget_set_default_direction()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the current default direction. 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-shape-combine-mask" role="function">
<title>gtk_widget_shape_combine_mask ()</title>
<indexterm zone="gtk-widget-shape-combine-mask"><primary sortas="widget_shape_combine_mask">gtk_widget_shape_combine_mask</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_shape_combine_mask       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkBitmap">GdkBitmap</link> *shape_mask,
                                                         <link linkend="gint">gint</link> offset_x,
                                                         <link linkend="gint">gint</link> offset_y);</programlisting>
<para>
Sets a shape for this widget's GDK window. This allows for
transparent windows etc., see <link linkend="gdk-window-shape-combine-mask"><function>gdk_window_shape_combine_mask()</function></link>
for more information.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>shape_mask</parameter>&#160;:</term>
<listitem><simpara> shape to be added, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to remove an existing shape
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset_x</parameter>&#160;:</term>
<listitem><simpara> X position of shape mask with respect to <parameter>window</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset_y</parameter>&#160;:</term>
<listitem><simpara> Y position of shape mask with respect to <parameter>window</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-input-shape-combine-mask" role="function" condition="since:2.10">
<title>gtk_widget_input_shape_combine_mask ()</title>
<indexterm zone="gtk-widget-input-shape-combine-mask" role="2.10"><primary sortas="widget_input_shape_combine_mask">gtk_widget_input_shape_combine_mask</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_input_shape_combine_mask (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkBitmap">GdkBitmap</link> *shape_mask,
                                                         <link linkend="gint">gint</link> offset_x,
                                                         <link linkend="gint">gint</link> offset_y);</programlisting>
<para>
Sets an input shape for this widget's GDK window. This allows for
windows which react to mouse click in a nonrectangular region, see 
<link linkend="gdk-window-input-shape-combine-mask"><function>gdk_window_input_shape_combine_mask()</function></link> for more information.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>shape_mask</parameter>&#160;:</term>
<listitem><simpara> shape to be added, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to remove an existing shape
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset_x</parameter>&#160;:</term>
<listitem><simpara> X position of shape mask with respect to <parameter>window</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset_y</parameter>&#160;:</term>
<listitem><simpara> Y position of shape mask with respect to <parameter>window</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.10</para></refsect2>
<refsect2 id="gtk-widget-path" role="function">
<title>gtk_widget_path ()</title>
<indexterm zone="gtk-widget-path"><primary sortas="widget_path">gtk_widget_path</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_path                     (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="guint">guint</link> *path_length,
                                                         <link linkend="gchar">gchar</link> **path,
                                                         <link linkend="gchar">gchar</link> **path_reversed);</programlisting>
<para>
Obtains the full path to <parameter>widget</parameter>. The path is simply the name of a
widget and all its parents in the container hierarchy, separated by
periods. The name of a widget comes from
<link linkend="gtk-widget-get-name"><function>gtk_widget_get_name()</function></link>. Paths are used to apply styles to a widget
in gtkrc configuration files. Widget names are the type of the
widget by default (e.g. "GtkButton") or can be set to an
application-specific value with <link linkend="gtk-widget-set-name"><function>gtk_widget_set_name()</function></link>. By setting
the name of a widget, you allow users or theme authors to apply
styles to that specific widget in their gtkrc
file. <parameter>path_reversed_p</parameter> fills in the path in reverse order,
i.e. starting with <parameter>widget</parameter>'s name instead of starting with the name
of <parameter>widget</parameter>'s outermost ancestor.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path_length</parameter>&#160;:</term>
<listitem><simpara> location to store length of the path, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> location to store allocated path string, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path_reversed</parameter>&#160;:</term>
<listitem><simpara> location to store allocated reverse path string, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-class-path" role="function">
<title>gtk_widget_class_path ()</title>
<indexterm zone="gtk-widget-class-path"><primary sortas="widget_class_path">gtk_widget_class_path</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_class_path               (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="guint">guint</link> *path_length,
                                                         <link linkend="gchar">gchar</link> **path,
                                                         <link linkend="gchar">gchar</link> **path_reversed);</programlisting>
<para>
Same as <link linkend="gtk-widget-path"><function>gtk_widget_path()</function></link>, but always uses the name of a widget's type,
never uses a custom name set with <link linkend="gtk-widget-set-name"><function>gtk_widget_set_name()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path_length</parameter>&#160;:</term>
<listitem><simpara> location to store the length of the class path, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> location to store the class path as an allocated string, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path_reversed</parameter>&#160;:</term>
<listitem><simpara> location to store the reverse class path as an allocated 
   string, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-composite-name" role="function">
<title>gtk_widget_get_composite_name ()</title>
<indexterm zone="gtk-widget-get-composite-name"><primary sortas="widget_get_composite_name">gtk_widget_get_composite_name</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              gtk_widget_get_composite_name       (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Obtains the composite name of a widget.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the composite name of <parameter>widget</parameter>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>widget</parameter> is not
  a composite child. The string should be freed when it is no 
  longer needed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-modify-style" role="function">
<title>gtk_widget_modify_style ()</title>
<indexterm zone="gtk-widget-modify-style"><primary sortas="widget_modify_style">gtk_widget_modify_style</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_modify_style             (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkRcStyle">GtkRcStyle</link> *style);</programlisting>
<para>
Modifies style values on the widget. Modifications made using this
technique take precedence over style values set via an RC file,
however, they will be overriden if a style is explicitely set on
the widget using <link linkend="gtk-widget-set-style"><function>gtk_widget_set_style()</function></link>. The <link linkend="GtkRcStyle"><type>GtkRcStyle</type></link> structure
is designed so each field can either be set or unset, so it is
possible, using this function, to modify some style values and
leave the others unchanged.
</para>
<para>
Note that modifications made with this function are not cumulative
with previous calls to <link linkend="gtk-widget-modify-style"><function>gtk_widget_modify_style()</function></link> or with such
functions as <link linkend="gtk-widget-modify-fg"><function>gtk_widget_modify_fg()</function></link>. If you wish to retain
previous values, you must first call <link linkend="gtk-widget-get-modifier-style"><function>gtk_widget_get_modifier_style()</function></link>,
make your modifications to the returned style, then call
<link linkend="gtk-widget-modify-style"><function>gtk_widget_modify_style()</function></link> with that style. On the other hand,
if you first call <link linkend="gtk-widget-modify-style"><function>gtk_widget_modify_style()</function></link>, subsequent calls
to such functions <link linkend="gtk-widget-modify-fg"><function>gtk_widget_modify_fg()</function></link> will have a cumulative
effect with the initial modifications.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>style</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GtkRcStyle"><type>GtkRcStyle</type></link> holding the style modifications
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-modifier-style" role="function">
<title>gtk_widget_get_modifier_style ()</title>
<indexterm zone="gtk-widget-get-modifier-style"><primary sortas="widget_get_modifier_style">gtk_widget_get_modifier_style</primary></indexterm><programlisting><link linkend="GtkRcStyle">GtkRcStyle</link> *        gtk_widget_get_modifier_style       (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Returns the current modifier style for the widget. (As set by
<link linkend="gtk-widget-modify-style"><function>gtk_widget_modify_style()</function></link>.) If no style has previously set, a new
<link linkend="GtkRcStyle"><type>GtkRcStyle</type></link> will be created with all values unset, and set as the
modifier style for the widget. If you make changes to this rc
style, you must call <link linkend="gtk-widget-modify-style"><function>gtk_widget_modify_style()</function></link>, passing in the
returned rc style, to make sure that your changes take effect.
</para>
<para>
Caution: passing the style back to <link linkend="gtk-widget-modify-style"><function>gtk_widget_modify_style()</function></link> will
normally end up destroying it, because <link linkend="gtk-widget-modify-style"><function>gtk_widget_modify_style()</function></link> copies
the passed-in style and sets the copy as the new modifier style,
thus dropping any reference to the old modifier style. Add a reference
to the modifier style if you want to keep it alive.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the modifier style for the widget. This rc style is
  owned by the widget. If you want to keep a pointer to value this
  around, you must add a refcount using <link linkend="g-object-ref"><function>g_object_ref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-modify-fg" role="function">
<title>gtk_widget_modify_fg ()</title>
<indexterm zone="gtk-widget-modify-fg"><primary sortas="widget_modify_fg">gtk_widget_modify_fg</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_modify_fg                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkStateType">GtkStateType</link> state,
                                                         const <link linkend="GdkColor">GdkColor</link> *color);</programlisting>
<para>
Sets the foreground color for a widget in a particular state.  
All other style values are left untouched. See also
<link linkend="gtk-widget-modify-style"><function>gtk_widget_modify_style()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&#160;:</term>
<listitem><simpara> the state for which to set the foreground color
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&#160;:</term>
<listitem><simpara> the color to assign (does not need to be allocated),
        or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to undo the effect of previous calls to
        of <link linkend="gtk-widget-modify-fg"><function>gtk_widget_modify_fg()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-modify-bg" role="function">
<title>gtk_widget_modify_bg ()</title>
<indexterm zone="gtk-widget-modify-bg"><primary sortas="widget_modify_bg">gtk_widget_modify_bg</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_modify_bg                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkStateType">GtkStateType</link> state,
                                                         const <link linkend="GdkColor">GdkColor</link> *color);</programlisting>
<para>
Sets the background color for a widget in a particular state.  
All other style values are left untouched. See also
<link linkend="gtk-widget-modify-style"><function>gtk_widget_modify_style()</function></link>. 
</para>
<para>
Note that "no window" widgets (which have the <link linkend="GTK-NO-WINDOW--CAPS"><literal>GTK_NO_WINDOW</literal></link> flag set)
draw on their parent container's window and thus may not draw any 
background themselves. This is the case for e.g. <link linkend="GtkLabel"><type>GtkLabel</type></link>. To modify 
the background of such widgets, you have to set the background color 
on their parent; if you want to set the background of a rectangular 
area around a label, try placing the label in a <link linkend="GtkEventBox"><type>GtkEventBox</type></link> widget 
and setting the background color on that.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&#160;:</term>
<listitem><simpara> the state for which to set the background color
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&#160;:</term>
<listitem><simpara> the color to assign (does not need to be allocated),
        or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to undo the effect of previous calls to
        of <link linkend="gtk-widget-modify-bg"><function>gtk_widget_modify_bg()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-modify-text" role="function">
<title>gtk_widget_modify_text ()</title>
<indexterm zone="gtk-widget-modify-text"><primary sortas="widget_modify_text">gtk_widget_modify_text</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_modify_text              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkStateType">GtkStateType</link> state,
                                                         const <link linkend="GdkColor">GdkColor</link> *color);</programlisting>
<para>
Sets the text color for a widget in a particular state.  All other
style values are left untouched. The text color is the foreground
color used along with the base color (see <link linkend="gtk-widget-modify-base"><function>gtk_widget_modify_base()</function></link>)
for widgets such as <link linkend="GtkEntry"><type>GtkEntry</type></link> and <link linkend="GtkTextView"><type>GtkTextView</type></link>. See also
<link linkend="gtk-widget-modify-style"><function>gtk_widget_modify_style()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&#160;:</term>
<listitem><simpara> the state for which to set the text color
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&#160;:</term>
<listitem><simpara> the color to assign (does not need to be allocated),
        or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to undo the effect of previous calls to
        of <link linkend="gtk-widget-modify-text"><function>gtk_widget_modify_text()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-modify-base" role="function">
<title>gtk_widget_modify_base ()</title>
<indexterm zone="gtk-widget-modify-base"><primary sortas="widget_modify_base">gtk_widget_modify_base</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_modify_base              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkStateType">GtkStateType</link> state,
                                                         const <link linkend="GdkColor">GdkColor</link> *color);</programlisting>
<para>
Sets the base color for a widget in a particular state.
All other style values are left untouched. The base color
is the background color used along with the text color
(see <link linkend="gtk-widget-modify-text"><function>gtk_widget_modify_text()</function></link>) for widgets such as <link linkend="GtkEntry"><type>GtkEntry</type></link>
and <link linkend="GtkTextView"><type>GtkTextView</type></link>. See also <link linkend="gtk-widget-modify-style"><function>gtk_widget_modify_style()</function></link>.
</para>
<para>
Note that "no window" widgets (which have the <link linkend="GTK-NO-WINDOW--CAPS"><literal>GTK_NO_WINDOW</literal></link> flag set)
draw on their parent container's window and thus may not draw any 
background themselves. This is the case for e.g. <link linkend="GtkLabel"><type>GtkLabel</type></link>. To modify 
the background of such widgets, you have to set the base color on their 
parent; if you want to set the background of a rectangular area around 
a label, try placing the label in a <link linkend="GtkEventBox"><type>GtkEventBox</type></link> widget and setting 
the base color on that.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&#160;:</term>
<listitem><simpara> the state for which to set the base color
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color</parameter>&#160;:</term>
<listitem><simpara> the color to assign (does not need to be allocated),
        or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to undo the effect of previous calls to
        of <link linkend="gtk-widget-modify-base"><function>gtk_widget_modify_base()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-modify-font" role="function">
<title>gtk_widget_modify_font ()</title>
<indexterm zone="gtk-widget-modify-font"><primary sortas="widget_modify_font">gtk_widget_modify_font</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_modify_font              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="PangoFontDescription">PangoFontDescription</link> *font_desc);</programlisting>
<para>
Sets the font to use for a widget.  All other style values are left
untouched. See also <link linkend="gtk-widget-modify-style"><function>gtk_widget_modify_style()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>font_desc</parameter>&#160;:</term>
<listitem><simpara> the font description to use, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to undo
  the effect of previous calls to <link linkend="gtk-widget-modify-font"><function>gtk_widget_modify_font()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-modify-cursor" role="function" condition="since:2.12">
<title>gtk_widget_modify_cursor ()</title>
<indexterm zone="gtk-widget-modify-cursor" role="2.12"><primary sortas="widget_modify_cursor">gtk_widget_modify_cursor</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_modify_cursor            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="GdkColor">GdkColor</link> *primary,
                                                         const <link linkend="GdkColor">GdkColor</link> *secondary);</programlisting>
<para>
Sets the cursor color to use in a widget, overriding the
<link linkend="GtkWidget--cursor-color"><type>"cursor-color"</type></link> and <link linkend="GtkWidget--secondary-cursor-color"><type>"secondary-cursor-color"</type></link>
style properties. All other style values are left untouched. 
See also <link linkend="gtk-widget-modify-style"><function>gtk_widget_modify_style()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>primary</parameter>&#160;:</term>
<listitem><simpara> the color to use for primary cursor (does not need to be
          allocated), or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to undo the effect of previous calls to
          of <link linkend="gtk-widget-modify-cursor"><function>gtk_widget_modify_cursor()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>secondary</parameter>&#160;:</term>
<listitem><simpara> the color to use for secondary cursor (does not need to be
            allocated), or <link linkend="NULL--CAPS"><literal>NULL</literal></link> to undo the effect of previous calls to
            of <link linkend="gtk-widget-modify-cursor"><function>gtk_widget_modify_cursor()</function></link>.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12</para></refsect2>
<refsect2 id="gtk-widget-create-pango-context" role="function">
<title>gtk_widget_create_pango_context ()</title>
<indexterm zone="gtk-widget-create-pango-context"><primary sortas="widget_create_pango_context">gtk_widget_create_pango_context</primary></indexterm><programlisting><link linkend="PangoContext">PangoContext</link> *      gtk_widget_create_pango_context     (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Creates a new <link linkend="PangoContext"><type>PangoContext</type></link> with the appropriate font map,
font description, and base direction for drawing text for
this widget. See also <link linkend="gtk-widget-get-pango-context"><function>gtk_widget_get_pango_context()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new <link linkend="PangoContext"><type>PangoContext</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-pango-context" role="function">
<title>gtk_widget_get_pango_context ()</title>
<indexterm zone="gtk-widget-get-pango-context"><primary sortas="widget_get_pango_context">gtk_widget_get_pango_context</primary></indexterm><programlisting><link linkend="PangoContext">PangoContext</link> *      gtk_widget_get_pango_context        (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Gets a <link linkend="PangoContext"><type>PangoContext</type></link> with the appropriate font map, font description,
and base direction for this widget. Unlike the context returned
by <link linkend="gtk-widget-create-pango-context"><function>gtk_widget_create_pango_context()</function></link>, this context is owned by
the widget (it can be used until the screen for the widget changes
or the widget is removed from its toplevel), and will be updated to
match any changes to the widget's attributes.
</para>
<para>
If you create and keep a <link linkend="PangoLayout"><type>PangoLayout</type></link> using this context, you must
deal with changes to the context by calling <link linkend="pango-layout-context-changed"><function>pango_layout_context_changed()</function></link>
on the layout in response to the <link linkend="GtkWidget-style-set"><type>"style-set"</type></link> and 
<link linkend="GtkWidget-direction-changed"><type>"direction-changed"</type></link> signals for the widget.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <link linkend="PangoContext"><type>PangoContext</type></link> for the widget.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-create-pango-layout" role="function">
<title>gtk_widget_create_pango_layout ()</title>
<indexterm zone="gtk-widget-create-pango-layout"><primary sortas="widget_create_pango_layout">gtk_widget_create_pango_layout</primary></indexterm><programlisting><link linkend="PangoLayout">PangoLayout</link> *       gtk_widget_create_pango_layout      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *text);</programlisting>
<para>
Creates a new <link linkend="PangoLayout"><type>PangoLayout</type></link> with the appropriate font map,
font description, and base direction for drawing text for
this widget.
</para>
<para>
If you keep a <link linkend="PangoLayout"><type>PangoLayout</type></link> created in this way around, in order to
notify the layout of changes to the base direction or font of this
widget, you must call <link linkend="pango-layout-context-changed"><function>pango_layout_context_changed()</function></link> in response to
the <link linkend="GtkWidget-style-set"><type>"style-set"</type></link> and <link linkend="GtkWidget-direction-changed"><type>"direction-changed"</type></link> signals 
for the widget.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text</parameter>&#160;:</term>
<listitem><simpara> text to set on the layout (can be <link linkend="NULL--CAPS"><literal>NULL</literal></link>)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new <link linkend="PangoLayout"><type>PangoLayout</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-render-icon" role="function">
<title>gtk_widget_render_icon ()</title>
<indexterm zone="gtk-widget-render-icon"><primary sortas="widget_render_icon">gtk_widget_render_icon</primary></indexterm><programlisting><link linkend="GdkPixbuf">GdkPixbuf</link> *         gtk_widget_render_icon              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *stock_id,
                                                         <link linkend="GtkIconSize">GtkIconSize</link> size,
                                                         const <link linkend="gchar">gchar</link> *detail);</programlisting>
<para>
A convenience function that uses the theme engine and RC file
settings for <parameter>widget</parameter> to look up <parameter>stock_id</parameter> and render it to
a pixbuf. <parameter>stock_id</parameter> should be a stock icon ID such as
<link linkend="GTK-STOCK-OPEN--CAPS"><type>GTK_STOCK_OPEN</type></link> or <link linkend="GTK-STOCK-OK--CAPS"><type>GTK_STOCK_OK</type></link>. <parameter>size</parameter> should be a size
such as <link linkend="GTK-ICON-SIZE-MENU--CAPS"><type>GTK_ICON_SIZE_MENU</type></link>. <parameter>detail</parameter> should be a string that
identifies the widget or code doing the rendering, so that
theme engines can special-case rendering for that widget or code.
</para>
<para>
The pixels in the returned <link linkend="GdkPixbuf"><type>GdkPixbuf</type></link> are shared with the rest of
the application and should not be modified. The pixbuf should be freed
after use with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>stock_id</parameter>&#160;:</term>
<listitem><simpara> a stock ID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> a stock size. A size of (GtkIconSize)-1 means render at 
    the size of the source and don't scale (if there are multiple 
    source sizes, GTK+ picks one of the available sizes).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>detail</parameter>&#160;:</term>
<listitem><simpara> render detail to pass to theme engine
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new pixbuf, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the stock ID wasn't known
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-pop-composite-child" role="function">
<title>gtk_widget_pop_composite_child ()</title>
<indexterm zone="gtk-widget-pop-composite-child"><primary sortas="widget_pop_composite_child">gtk_widget_pop_composite_child</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_pop_composite_child      (void);</programlisting>
<para>
Cancels the effect of a previous call to <link linkend="gtk-widget-push-composite-child"><function>gtk_widget_push_composite_child()</function></link>.</para>
<para>
</para></refsect2>
<refsect2 id="gtk-widget-push-composite-child" role="function">
<title>gtk_widget_push_composite_child ()</title>
<indexterm zone="gtk-widget-push-composite-child"><primary sortas="widget_push_composite_child">gtk_widget_push_composite_child</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_push_composite_child     (void);</programlisting>
<para>
Makes all newly-created widgets as composite children until
the corresponding <link linkend="gtk-widget-pop-composite-child"><function>gtk_widget_pop_composite_child()</function></link> call.
</para>
<para>
A composite child is a child that's an implementation detail of the
container it's inside and should not be visible to people using the
container. Composite children aren't treated differently by GTK (but
see <link linkend="gtk-container-foreach"><function>gtk_container_foreach()</function></link> vs. <link linkend="gtk-container-forall"><function>gtk_container_forall()</function></link>), but e.g. GUI 
builders might want to treat them in a different way.
</para>
<para>
Here is a simple example:
<informalexample><programlisting>
  gtk_widget_push_composite_child ();
  scrolled_window->hscrollbar = gtk_hscrollbar_new (hadjustment);
  gtk_widget_set_composite_name (scrolled_window->hscrollbar, "hscrollbar");
  gtk_widget_pop_composite_child ();
  gtk_widget_set_parent (scrolled_window->hscrollbar, 
                         GTK_WIDGET (scrolled_window));
  g_object_ref (scrolled_window->hscrollbar);
</programlisting></informalexample></para>
<para>
</para></refsect2>
<refsect2 id="gtk-widget-queue-clear" role="function" condition="deprecated:2.2: Use gtk_widget_queue_draw() instead.">
<title>gtk_widget_queue_clear ()</title>
<indexterm zone="gtk-widget-queue-clear" role="deprecated"><primary sortas="widget_queue_clear">gtk_widget_queue_clear</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_queue_clear              (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<warning><para><literal>gtk_widget_queue_clear</literal> has been deprecated since version 2.2 and should not be used in newly-written code. Use <link linkend="gtk-widget-queue-draw"><function>gtk_widget_queue_draw()</function></link> instead.</para></warning>
<para>
This function does the same as <link linkend="gtk-widget-queue-draw"><function>gtk_widget_queue_draw()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-queue-clear-area" role="function" condition="deprecated:2.2: Use gtk_widget_queue_draw_area() instead.">
<title>gtk_widget_queue_clear_area ()</title>
<indexterm zone="gtk-widget-queue-clear-area" role="deprecated"><primary sortas="widget_queue_clear_area">gtk_widget_queue_clear_area</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_queue_clear_area         (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y,
                                                         <link linkend="gint">gint</link> width,
                                                         <link linkend="gint">gint</link> height);</programlisting>
<warning><para><literal>gtk_widget_queue_clear_area</literal> has been deprecated since version 2.2 and should not be used in newly-written code. Use <link linkend="gtk-widget-queue-draw-area"><function>gtk_widget_queue_draw_area()</function></link> instead.</para></warning>
<para>
This function is no longer different from
<link linkend="gtk-widget-queue-draw-area"><function>gtk_widget_queue_draw_area()</function></link>, though it once was. Now it just calls
<link linkend="gtk-widget-queue-draw-area"><function>gtk_widget_queue_draw_area()</function></link>. Originally
<link linkend="gtk-widget-queue-clear-area"><function>gtk_widget_queue_clear_area()</function></link> would force a redraw of the
background for <link linkend="GTK-NO-WINDOW--CAPS"><literal>GTK_NO_WINDOW</literal></link> widgets, and
<link linkend="gtk-widget-queue-draw-area"><function>gtk_widget_queue_draw_area()</function></link> would not. Now both functions ensure
the background will be redrawn.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> x coordinate of upper-left corner of rectangle to redraw
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> y coordinate of upper-left corner of rectangle to redraw
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&#160;:</term>
<listitem><simpara> width of region to draw
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&#160;:</term>
<listitem><simpara> height of region to draw
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-queue-draw-area" role="function">
<title>gtk_widget_queue_draw_area ()</title>
<indexterm zone="gtk-widget-queue-draw-area"><primary sortas="widget_queue_draw_area">gtk_widget_queue_draw_area</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_queue_draw_area          (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> x,
                                                         <link linkend="gint">gint</link> y,
                                                         <link linkend="gint">gint</link> width,
                                                         <link linkend="gint">gint</link> height);</programlisting>
<para>
Invalidates the rectangular area of <parameter>widget</parameter> defined by <parameter>x</parameter>, <parameter>y</parameter>,
<parameter>width</parameter> and <parameter>height</parameter> by calling <link linkend="gdk-window-invalidate-rect"><function>gdk_window_invalidate_rect()</function></link> on the
widget's window and all its child windows. Once the main loop
becomes idle (after the current batch of events has been processed,
roughly), the window will receive expose events for the union of
all regions that have been invalidated.
</para>
<para>
Normally you would only use this function in widget
implementations. You might also use it, or
<link linkend="gdk-window-invalidate-rect"><function>gdk_window_invalidate_rect()</function></link> directly, to schedule a redraw of a
<link linkend="GtkDrawingArea"><type>GtkDrawingArea</type></link> or some portion thereof.
</para>
<para>
Frequently you can just call <link linkend="gdk-window-invalidate-rect"><function>gdk_window_invalidate_rect()</function></link> or
<link linkend="gdk-window-invalidate-region"><function>gdk_window_invalidate_region()</function></link> instead of this function. Those
functions will invalidate only a single window, instead of the
widget and all its children.
</para>
<para>
The advantage of adding to the invalidated region compared to
simply drawing immediately is efficiency; using an invalid region
ensures that you only have to redraw one time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> x coordinate of upper-left corner of rectangle to redraw
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> y coordinate of upper-left corner of rectangle to redraw
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&#160;:</term>
<listitem><simpara> width of region to draw
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&#160;:</term>
<listitem><simpara> height of region to draw
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-reset-shapes" role="function">
<title>gtk_widget_reset_shapes ()</title>
<indexterm zone="gtk-widget-reset-shapes"><primary sortas="widget_reset_shapes">gtk_widget_reset_shapes</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_reset_shapes             (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Recursively resets the shape on this widget and its descendants.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-app-paintable" role="function">
<title>gtk_widget_set_app_paintable ()</title>
<indexterm zone="gtk-widget-set-app-paintable"><primary sortas="widget_set_app_paintable">gtk_widget_set_app_paintable</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_app_paintable        (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> app_paintable);</programlisting>
<para>
Sets whether the application intends to draw on the widget in
an <link linkend="GtkWidget-expose-event"><type>"expose-event"</type></link> handler. 
</para>
<para>
This is a hint to the widget and does not affect the behavior of 
the GTK+ core; many widgets ignore this flag entirely. For widgets 
that do pay attention to the flag, such as <link linkend="GtkEventBox"><type>GtkEventBox</type></link> and <link linkend="GtkWindow"><type>GtkWindow</type></link>, 
the effect is to suppress default themed drawing of the widget's 
background. (Children of the widget will still be drawn.) The application 
is then entirely responsible for drawing the widget background.
</para>
<para>
Note that the background is still drawn when the widget is mapped.
If this is not suitable (e.g. because you want to make a transparent
window using an RGBA visual), you can work around this by doing:
<informalexample><programlisting>
 gtk_widget_realize (window);
 gdk_window_set_back_pixmap (window->window, NULL, FALSE);
 gtk_widget_show (window);
</programlisting></informalexample></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>app_paintable</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the application will paint on the widget
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-double-buffered" role="function">
<title>gtk_widget_set_double_buffered ()</title>
<indexterm zone="gtk-widget-set-double-buffered"><primary sortas="widget_set_double_buffered">gtk_widget_set_double_buffered</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_double_buffered      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> double_buffered);</programlisting>
<para>
Widgets are double buffered by default; you can use this function
to turn off the buffering. "Double buffered" simply means that
<link linkend="gdk-window-begin-paint-region"><function>gdk_window_begin_paint_region()</function></link> and <link linkend="gdk-window-end-paint"><function>gdk_window_end_paint()</function></link> are called
automatically around expose events sent to the
widget. <link linkend="gdk-window-begin-paint"><function>gdk_window_begin_paint()</function></link> diverts all drawing to a widget's
window to an offscreen buffer, and <link linkend="gdk-window-end-paint"><function>gdk_window_end_paint()</function></link> draws the
buffer to the screen. The result is that users see the window
update in one smooth step, and don't see individual graphics
primitives being rendered.
</para>
<para>
In very simple terms, double buffered widgets don't flicker,
so you would only use this function to turn off double buffering
if you had special needs and really knew what you were doing.
</para>
<para>
Note: if you turn off double-buffering, you have to handle
expose events, since even the clearing to the background color or 
pixmap will not happen automatically (as it is done in 
<link linkend="gdk-window-begin-paint"><function>gdk_window_begin_paint()</function></link>).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>double_buffered</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to double-buffer a widget
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-redraw-on-allocate" role="function">
<title>gtk_widget_set_redraw_on_allocate ()</title>
<indexterm zone="gtk-widget-set-redraw-on-allocate"><primary sortas="widget_set_redraw_on_allocate">gtk_widget_set_redraw_on_allocate</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_redraw_on_allocate   (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> redraw_on_allocate);</programlisting>
<para>
Sets whether the entire widget is queued for drawing when its size 
allocation changes. By default, this setting is <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> and
the entire widget is redrawn on every size change. If your widget
leaves the upper left unchanged when made bigger, turning this
setting off will improve performance.
</para>
<para>
Note that for <link linkend="NO-WINDOW--CAPS"><literal>NO_WINDOW</literal></link> widgets setting this flag to <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> turns
off all allocation on resizing: the widget will not even redraw if
its position changes; this is to allow containers that don't draw
anything to avoid excess invalidations. If you set this flag on a
<link linkend="NO-WINDOW--CAPS"><literal>NO_WINDOW</literal></link> widget that <emphasis>does</emphasis> draw on <parameter>widget->window</parameter>, 
you are responsible for invalidating both the old and new allocation 
of the widget when the widget is moved and responsible for invalidating
regions newly when the widget increases size.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>redraw_on_allocate</parameter>&#160;:</term>
<listitem><simpara> if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, the entire widget will be redrawn
  when it is allocated to a new size. Otherwise, only the
  new portion of the widget will be redrawn.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-composite-name" role="function">
<title>gtk_widget_set_composite_name ()</title>
<indexterm zone="gtk-widget-set-composite-name"><primary sortas="widget_set_composite_name">gtk_widget_set_composite_name</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_composite_name       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Sets a widgets composite name. The widget must be
a composite child of its parent; see <link linkend="gtk-widget-push-composite-child"><function>gtk_widget_push_composite_child()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name to set
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-scroll-adjustments" role="function">
<title>gtk_widget_set_scroll_adjustments ()</title>
<indexterm zone="gtk-widget-set-scroll-adjustments"><primary sortas="widget_set_scroll_adjustments">gtk_widget_set_scroll_adjustments</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_set_scroll_adjustments   (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkAdjustment">GtkAdjustment</link> *hadjustment,
                                                         <link linkend="GtkAdjustment">GtkAdjustment</link> *vadjustment);</programlisting>
<para>
For widgets that support scrolling, sets the scroll adjustments and
returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>.  For widgets that don't support scrolling, does
nothing and returns <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>. Widgets that don't support scrolling
can be scrolled by placing them in a <link linkend="GtkViewport"><type>GtkViewport</type></link>, which does
support scrolling.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hadjustment</parameter>&#160;:</term>
<listitem><simpara> an adjustment for horizontal scrolling, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>vadjustment</parameter>&#160;:</term>
<listitem><simpara> an adjustment for vertical scrolling, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget supports scrolling
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-mnemonic-activate" role="function">
<title>gtk_widget_mnemonic_activate ()</title>
<indexterm zone="gtk-widget-mnemonic-activate"><primary sortas="widget_mnemonic_activate">gtk_widget_mnemonic_activate</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_mnemonic_activate        (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> group_cycling);</programlisting>
<para>
Emits the <link linkend="GtkWidget-mnemonic-activate"><type>"mnemonic-activate"</type></link> signal.
</para>
<para>
The default handler for this signal activates the <parameter>widget</parameter> if
<parameter>group_cycling</parameter> is <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>, and just grabs the focus if <parameter>group_cycling</parameter>
is <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>group_cycling</parameter>&#160;:</term>
<listitem><simpara>  <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if there are other widgets with the same mnemonic
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the signal has been handled
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-class-install-style-property" role="function">
<title>gtk_widget_class_install_style_property ()</title>
<indexterm zone="gtk-widget-class-install-style-property"><primary sortas="widget_class_install_style_property">gtk_widget_class_install_style_property</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_class_install_style_property
                                                        (<link linkend="GtkWidgetClass">GtkWidgetClass</link> *klass,
                                                         <link linkend="GParamSpec">GParamSpec</link> *pspec);</programlisting>
<para>
Installs a style property on a widget class. The parser for the
style property is determined by the value type of <parameter>pspec</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidgetClass"><type>GtkWidgetClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pspec</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GParamSpec"><type>GParamSpec</type></link> for the property
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-class-install-style-property-parser" role="function">
<title>gtk_widget_class_install_style_property_parser ()</title>
<indexterm zone="gtk-widget-class-install-style-property-parser"><primary sortas="widget_class_install_style_property_parser">gtk_widget_class_install_style_property_parser</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_class_install_style_property_parser
                                                        (<link linkend="GtkWidgetClass">GtkWidgetClass</link> *klass,
                                                         <link linkend="GParamSpec">GParamSpec</link> *pspec,
                                                         <link linkend="GtkRcPropertyParser">GtkRcPropertyParser</link> parser);</programlisting>
<para>
Installs a style property on a widget class.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidgetClass"><type>GtkWidgetClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pspec</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GParamSpec"><type>GParamSpec</type></link> for the style property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parser</parameter>&#160;:</term>
<listitem><simpara> the parser for the style property
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-class-find-style-property" role="function" condition="since:2.2">
<title>gtk_widget_class_find_style_property ()</title>
<indexterm zone="gtk-widget-class-find-style-property" role="2.2"><primary sortas="widget_class_find_style_property">gtk_widget_class_find_style_property</primary></indexterm><programlisting><link linkend="GParamSpec">GParamSpec</link>*         gtk_widget_class_find_style_property
                                                        (<link linkend="GtkWidgetClass">GtkWidgetClass</link> *klass,
                                                         const <link linkend="gchar">gchar</link> *property_name);</programlisting>
<para>
Finds a style property of a widget class by name.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidgetClass"><type>GtkWidgetClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&#160;:</term>
<listitem><simpara> the name of the style property to find
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <link linkend="GParamSpec"><type>GParamSpec</type></link> of the style property or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>class</parameter> has no
  style property with that name.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.2</para></refsect2>
<refsect2 id="gtk-widget-class-list-style-properties" role="function" condition="since:2.2">
<title>gtk_widget_class_list_style_properties ()</title>
<indexterm zone="gtk-widget-class-list-style-properties" role="2.2"><primary sortas="widget_class_list_style_properties">gtk_widget_class_list_style_properties</primary></indexterm><programlisting><link linkend="GParamSpec">GParamSpec</link>**        gtk_widget_class_list_style_properties
                                                        (<link linkend="GtkWidgetClass">GtkWidgetClass</link> *klass,
                                                         <link linkend="guint">guint</link> *n_properties);</programlisting>
<para>
Returns all style properties of a widget class.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidgetClass"><type>GtkWidgetClass</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_properties</parameter>&#160;:</term>
<listitem><simpara> location to return the number of style properties found
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an newly allocated array of <link linkend="GParamSpec"><type>GParamSpec</type></link>*. The array must 
      be freed with <link linkend="g-free"><function>g_free()</function></link>.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.2</para></refsect2>
<refsect2 id="gtk-widget-region-intersect" role="function">
<title>gtk_widget_region_intersect ()</title>
<indexterm zone="gtk-widget-region-intersect"><primary sortas="widget_region_intersect">gtk_widget_region_intersect</primary></indexterm><programlisting><link linkend="GdkRegion">GdkRegion</link> *         gtk_widget_region_intersect         (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="GdkRegion">GdkRegion</link> *region);</programlisting>
<para>
Computes the intersection of a <parameter>widget</parameter>'s area and <parameter>region</parameter>, returning
the intersection. The result may be empty, use <link linkend="gdk-region-empty"><function>gdk_region_empty()</function></link> to
check.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>region</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdkRegion"><type>GdkRegion</type></link>, in the same coordinate system as 
         <parameter>widget->allocation</parameter>. That is, relative to <parameter>widget->window</parameter>
         for <link linkend="NO-WINDOW--CAPS"><literal>NO_WINDOW</literal></link> widgets; relative to the parent window
         of <parameter>widget->window</parameter> for widgets with their own window.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A newly allocated region holding the intersection of <parameter>widget</parameter>
          and <parameter>region</parameter>. The coordinates of the return value are
          relative to <parameter>widget->window</parameter> for <link linkend="NO-WINDOW--CAPS"><literal>NO_WINDOW</literal></link> widgets, and
          relative to the parent window of <parameter>widget->window</parameter> for
          widgets with their own window.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-send-expose" role="function">
<title>gtk_widget_send_expose ()</title>
<indexterm zone="gtk-widget-send-expose"><primary sortas="widget_send_expose">gtk_widget_send_expose</primary></indexterm><programlisting><link linkend="gint">gint</link>                gtk_widget_send_expose              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkEvent">GdkEvent</link> *event);</programlisting>
<para>
Very rarely-used function. This function is used to emit
an expose event signals on a widget. This function is not
normally used directly. The only time it is used is when
propagating an expose event to a child <link linkend="NO-WINDOW--CAPS"><literal>NO_WINDOW</literal></link> widget, and
that is normally done using <link linkend="gtk-container-propagate-expose"><function>gtk_container_propagate_expose()</function></link>.
</para>
<para>
If you want to force an area of a window to be redrawn, 
use <link linkend="gdk-window-invalidate-rect"><function>gdk_window_invalidate_rect()</function></link> or <link linkend="gdk-window-invalidate-region"><function>gdk_window_invalidate_region()</function></link>.
To cause the redraw to be done immediately, follow that call
with a call to <link linkend="gdk-window-process-updates"><function>gdk_window_process_updates()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> a expose <link linkend="GdkEvent"><type>GdkEvent</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> return from the event signal emission (<link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if 
              the event was handled)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-style-get" role="function">
<title>gtk_widget_style_get ()</title>
<indexterm zone="gtk-widget-style-get"><primary sortas="widget_style_get">gtk_widget_style_get</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_style_get                (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *first_property_name,
                                                         ...);</programlisting>
<para>
Gets the values of a multiple style properties of <parameter>widget</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_property_name</parameter>&#160;:</term>
<listitem><simpara> the name of the first property to get
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> pairs of property names and locations to 
  return the property values, starting with the location for 
  <parameter>first_property_name</parameter>, terminated by <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-style-get-property" role="function">
<title>gtk_widget_style_get_property ()</title>
<indexterm zone="gtk-widget-style-get-property"><primary sortas="widget_style_get_property">gtk_widget_style_get_property</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_style_get_property       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *property_name,
                                                         <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Gets the value of a style property of <parameter>widget</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>property_name</parameter>&#160;:</term>
<listitem><simpara> the name of a style property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> location to return the property value 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-style-get-valist" role="function">
<title>gtk_widget_style_get_valist ()</title>
<indexterm zone="gtk-widget-style-get-valist"><primary sortas="widget_style_get_valist">gtk_widget_style_get_valist</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_style_get_valist         (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *first_property_name,
                                                         <link linkend="va-list">va_list</link> var_args);</programlisting>
<para>
Non-vararg variant of <link linkend="gtk-widget-style-get"><function>gtk_widget_style_get()</function></link>. Used primarily by language 
bindings.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_property_name</parameter>&#160;:</term>
<listitem><simpara> the name of the first property to get
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>var_args</parameter>&#160;:</term>
<listitem><simpara> a <type>va_list</type> of pairs of property names and
    locations to return the property values, starting with the location
    for <parameter>first_property_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-accessible" role="function">
<title>gtk_widget_get_accessible ()</title>
<indexterm zone="gtk-widget-get-accessible"><primary sortas="widget_get_accessible">gtk_widget_get_accessible</primary></indexterm><programlisting><link linkend="AtkObject">AtkObject</link>*          gtk_widget_get_accessible           (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Returns the accessible object that describes the widget to an
assistive technology. 
</para>
<para>
If no accessibility library is loaded (i.e. no ATK implementation library is 
loaded via <envar>GTK_MODULES</envar> or via another application library, 
such as libgnome), then this <link linkend="AtkObject"><type>AtkObject</type></link> instance may be a no-op. Likewise, 
if no class-specific <link linkend="AtkObject"><type>AtkObject</type></link> implementation is available for the widget 
instance in question, it will inherit an <link linkend="AtkObject"><type>AtkObject</type></link> implementation from the 
first ancestor class for which such an implementation is defined.
</para>
<para>
The documentation of the <ulink url="http://developer.gnome.org/doc/API/2.0/atk/index.html">ATK</ulink>
library contains more information about accessible objects and their uses.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <link linkend="AtkObject"><type>AtkObject</type></link> associated with <parameter>widget</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-child-focus" role="function">
<title>gtk_widget_child_focus ()</title>
<indexterm zone="gtk-widget-child-focus"><primary sortas="widget_child_focus">gtk_widget_child_focus</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_child_focus              (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkDirectionType">GtkDirectionType</link> direction);</programlisting>
<para>
This function is used by custom widget implementations; if you're
writing an app, you'd use <link linkend="gtk-widget-grab-focus"><function>gtk_widget_grab_focus()</function></link> to move the focus
to a particular widget, and <link linkend="gtk-container-set-focus-chain"><function>gtk_container_set_focus_chain()</function></link> to
change the focus tab order. So you may want to investigate those
functions instead.
</para>
<para>
<link linkend="gtk-widget-child-focus"><function>gtk_widget_child_focus()</function></link> is called by containers as the user moves
around the window using keyboard shortcuts. <parameter>direction</parameter> indicates
what kind of motion is taking place (up, down, left, right, tab
forward, tab backward). <link linkend="gtk-widget-child-focus"><function>gtk_widget_child_focus()</function></link> emits the
<link linkend="GtkWidget-focus"><type>"focus"</type></link>" signal; widgets override the default handler
for this signal in order to implement appropriate focus behavior.
</para>
<para>
The default ::focus handler for a widget should return <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if
moving in <parameter>direction</parameter> left the focus on a focusable location inside
that widget, and <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if moving in <parameter>direction</parameter> moved the focus
outside the widget. If returning <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, widgets normally
call <link linkend="gtk-widget-grab-focus"><function>gtk_widget_grab_focus()</function></link> to place the focus accordingly;
if returning <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>, they don't modify the current focus location.
</para>
<para>
This function replaces <link linkend="gtk-container-focus"><function>gtk_container_focus()</function></link> from GTK+ 1.2.  
It was necessary to check that the child was visible, sensitive, 
and focusable before calling <link linkend="gtk-container-focus"><function>gtk_container_focus()</function></link>. 
<link linkend="gtk-widget-child-focus"><function>gtk_widget_child_focus()</function></link> returns <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if the widget is not 
currently in a focusable state, so there's no need for those checks.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>direction</parameter>&#160;:</term>
<listitem><simpara> direction of focus movement
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if focus ended up inside <parameter>widget</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-child-notify" role="function">
<title>gtk_widget_child_notify ()</title>
<indexterm zone="gtk-widget-child-notify"><primary sortas="widget_child_notify">gtk_widget_child_notify</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_child_notify             (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *child_property);</programlisting>
<para>
Emits a <link linkend="GtkWidget-child-notify"><type>"child-notify"</type></link> signal for the 
<link linkend="child-properties">child property</link> <parameter>child_property</parameter> 
on <parameter>widget</parameter>.
</para>
<para>
This is the analogue of <link linkend="g-object-notify"><function>g_object_notify()</function></link> for child properties.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child_property</parameter>&#160;:</term>
<listitem><simpara> the name of a child property installed on the 
                 class of <parameter>widget</parameter><!-- -->'s parent
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-freeze-child-notify" role="function">
<title>gtk_widget_freeze_child_notify ()</title>
<indexterm zone="gtk-widget-freeze-child-notify"><primary sortas="widget_freeze_child_notify">gtk_widget_freeze_child_notify</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_freeze_child_notify      (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Stops emission of <link linkend="GtkWidget-child-notify"><type>"child-notify"</type></link> signals on <parameter>widget</parameter>. The 
signals are queued until <link linkend="gtk-widget-thaw-child-notify"><function>gtk_widget_thaw_child_notify()</function></link> is called 
on <parameter>widget</parameter>. 
</para>
<para>
This is the analogue of <link linkend="g-object-freeze-notify"><function>g_object_freeze_notify()</function></link> for child properties.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-child-visible" role="function">
<title>gtk_widget_get_child_visible ()</title>
<indexterm zone="gtk-widget-get-child-visible"><primary sortas="widget_get_child_visible">gtk_widget_get_child_visible</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_get_child_visible        (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Gets the value set with <link linkend="gtk-widget-set-child-visible"><function>gtk_widget_set_child_visible()</function></link>.
If you feel a need to use this function, your code probably
needs reorganization. 
</para>
<para>
This function is only useful for container implementations and
never should be called by an application.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget is mapped with the parent.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-parent" role="function">
<title>gtk_widget_get_parent ()</title>
<indexterm zone="gtk-widget-get-parent"><primary sortas="widget_get_parent">gtk_widget_get_parent</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link> *         gtk_widget_get_parent               (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Returns the parent container of <parameter>widget</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the parent container of <parameter>widget</parameter>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-settings" role="function">
<title>gtk_widget_get_settings ()</title>
<indexterm zone="gtk-widget-get-settings"><primary sortas="widget_get_settings">gtk_widget_get_settings</primary></indexterm><programlisting><link linkend="GtkSettings">GtkSettings</link>*        gtk_widget_get_settings             (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Gets the settings object holding the settings (global property
settings, RC file information, etc) used for this widget.
</para>
<para>
Note that this function can only be called when the <link linkend="GtkWidget"><type>GtkWidget</type></link>
is attached to a toplevel, since the settings object is specific
to a particular <link linkend="GdkScreen"><type>GdkScreen</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the relevant <link linkend="GtkSettings"><type>GtkSettings</type></link> object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-get-clipboard" role="function" condition="since:2.2">
<title>gtk_widget_get_clipboard ()</title>
<indexterm zone="gtk-widget-get-clipboard" role="2.2"><primary sortas="widget_get_clipboard">gtk_widget_get_clipboard</primary></indexterm><programlisting><link linkend="GtkClipboard">GtkClipboard</link> *      gtk_widget_get_clipboard            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkAtom">GdkAtom</link> selection);</programlisting>
<para>
Returns the clipboard object for the given selection to
be used with <parameter>widget</parameter>. <parameter>widget</parameter> must have a <link linkend="GdkDisplay"><type>GdkDisplay</type></link>
associated with it, so must be attached to a toplevel
window.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>selection</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdkAtom"><type>GdkAtom</type></link> which identifies the clipboard
            to use. <link linkend="GDK-SELECTION-CLIPBOARD--CAPS"><literal>GDK_SELECTION_CLIPBOARD</literal></link> gives the
            default clipboard. Another common value
            is <link linkend="GDK-SELECTION-PRIMARY--CAPS"><literal>GDK_SELECTION_PRIMARY</literal></link>, which gives
            the primary X selection. 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the appropriate clipboard object. If no
            clipboard already exists, a new one will
            be created. Once a clipboard object has
            been created, it is persistent for all time.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.2</para></refsect2>
<refsect2 id="gtk-widget-get-display" role="function" condition="since:2.2">
<title>gtk_widget_get_display ()</title>
<indexterm zone="gtk-widget-get-display" role="2.2"><primary sortas="widget_get_display">gtk_widget_get_display</primary></indexterm><programlisting><link linkend="GdkDisplay">GdkDisplay</link> *        gtk_widget_get_display              (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Get the <link linkend="GdkDisplay"><type>GdkDisplay</type></link> for the toplevel window associated with
this widget. This function can only be called after the widget
has been added to a widget hierarchy with a <link linkend="GtkWindow"><type>GtkWindow</type></link> at the top.
</para>
<para>
In general, you should only create display specific
resources when a widget has been realized, and you should
free those resources when the widget is unrealized.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <link linkend="GdkDisplay"><type>GdkDisplay</type></link> for the toplevel for this widget.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.2</para></refsect2>
<refsect2 id="gtk-widget-get-root-window" role="function" condition="since:2.2">
<title>gtk_widget_get_root_window ()</title>
<indexterm zone="gtk-widget-get-root-window" role="2.2"><primary sortas="widget_get_root_window">gtk_widget_get_root_window</primary></indexterm><programlisting><link linkend="GdkWindow">GdkWindow</link> *         gtk_widget_get_root_window          (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Get the root window where this widget is located. This function can
only be called after the widget has been added to a widget
hierarchy with <link linkend="GtkWindow"><type>GtkWindow</type></link> at the top.
</para>
<para>
The root window is useful for such purposes as creating a popup
<link linkend="GdkWindow"><type>GdkWindow</type></link> associated with the window. In general, you should only
create display specific resources when a widget has been realized,
and you should free those resources when the widget is unrealized.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <link linkend="GdkWindow"><type>GdkWindow</type></link> root window for the toplevel for this widget.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.2</para></refsect2>
<refsect2 id="gtk-widget-get-screen" role="function" condition="since:2.2">
<title>gtk_widget_get_screen ()</title>
<indexterm zone="gtk-widget-get-screen" role="2.2"><primary sortas="widget_get_screen">gtk_widget_get_screen</primary></indexterm><programlisting><link linkend="GdkScreen">GdkScreen</link> *         gtk_widget_get_screen               (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Get the <link linkend="GdkScreen"><type>GdkScreen</type></link> from the toplevel window associated with
this widget. This function can only be called after the widget
has been added to a widget hierarchy with a <link linkend="GtkWindow"><type>GtkWindow</type></link>
at the top.
</para>
<para>
In general, you should only create screen specific
resources when a widget has been realized, and you should
free those resources when the widget is unrealized.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <link linkend="GdkScreen"><type>GdkScreen</type></link> for the toplevel for this widget.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.2</para></refsect2>
<refsect2 id="gtk-widget-has-screen" role="function" condition="since:2.2">
<title>gtk_widget_has_screen ()</title>
<indexterm zone="gtk-widget-has-screen" role="2.2"><primary sortas="widget_has_screen">gtk_widget_has_screen</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_has_screen               (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Checks whether there is a <link linkend="GdkScreen"><type>GdkScreen</type></link> is associated with
this widget. All toplevel widgets have an associated
screen, and all widgets added into a hierarchy with a toplevel
window at the top.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if there is a <link linkend="GdkScreen"><type>GdkScreen</type></link> associcated
  with the widget.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.2</para></refsect2>
<refsect2 id="gtk-widget-get-size-request" role="function">
<title>gtk_widget_get_size_request ()</title>
<indexterm zone="gtk-widget-get-size-request"><primary sortas="widget_get_size_request">gtk_widget_get_size_request</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_get_size_request         (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> *width,
                                                         <link linkend="gint">gint</link> *height);</programlisting>
<para>
Gets the size request that was explicitly set for the widget using
<link linkend="gtk-widget-set-size-request"><function>gtk_widget_set_size_request()</function></link>. A value of -1 stored in <parameter>width</parameter> or
<parameter>height</parameter> indicates that that dimension has not been set explicitly
and the natural requisition of the widget will be used intead. See
<link linkend="gtk-widget-set-size-request"><function>gtk_widget_set_size_request()</function></link>. To get the size a widget will
actually use, call <link linkend="gtk-widget-size-request"><function>gtk_widget_size_request()</function></link> instead of
this function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&#160;:</term>
<listitem><simpara> return location for width, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&#160;:</term>
<listitem><simpara> return location for height, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-pop-visual" role="macro" condition="deprecated:">
<title>gtk_widget_pop_visual()</title>
<indexterm zone="gtk-widget-pop-visual" role="deprecated"><primary sortas="widget_pop_visual">gtk_widget_pop_visual</primary></indexterm><programlisting>#define gtk_widget_pop_visual()               ((void) 0)
</programlisting>
<warning><para><literal>gtk_widget_pop_visual</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
This function is deprecated; it does nothing.
</para></refsect2>
<refsect2 id="gtk-widget-push-visual" role="macro" condition="deprecated:">
<title>gtk_widget_push_visual()</title>
<indexterm zone="gtk-widget-push-visual" role="deprecated"><primary sortas="widget_push_visual">gtk_widget_push_visual</primary></indexterm><programlisting>#define gtk_widget_push_visual(visual)        ((void) 0)
</programlisting>
<warning><para><literal>gtk_widget_push_visual</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
This function is deprecated; it does nothing.
</para><variablelist role="params">
<varlistentry><term><parameter>visual</parameter>&#160;:</term>
<listitem><simpara>a visual
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-child-visible" role="function">
<title>gtk_widget_set_child_visible ()</title>
<indexterm zone="gtk-widget-set-child-visible"><primary sortas="widget_set_child_visible">gtk_widget_set_child_visible</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_child_visible        (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> is_visible);</programlisting>
<para>
Sets whether <parameter>widget</parameter> should be mapped along with its when its parent
is mapped and <parameter>widget</parameter> has been shown with <link linkend="gtk-widget-show"><function>gtk_widget_show()</function></link>. 
</para>
<para>
The child visibility can be set for widget before it is added to
a container with <link linkend="gtk-widget-set-parent"><function>gtk_widget_set_parent()</function></link>, to avoid mapping
children unnecessary before immediately unmapping them. However
it will be reset to its default state of <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> when the widget
is removed from a container.
</para>
<para>
Note that changing the child visibility of a widget does not
queue a resize on the widget. Most of the time, the size of
a widget is computed from all visible children, whether or
not they are mapped. If this is not the case, the container
can queue a resize itself.
</para>
<para>
This function is only useful for container implementations and
never should be called by an application.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>is_visible</parameter>&#160;:</term>
<listitem><simpara> if <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, <parameter>widget</parameter> should be mapped along with its parent.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-default-visual" role="macro" condition="deprecated:">
<title>gtk_widget_set_default_visual()</title>
<indexterm zone="gtk-widget-set-default-visual" role="deprecated"><primary sortas="widget_set_default_visual">gtk_widget_set_default_visual</primary></indexterm><programlisting>#define gtk_widget_set_default_visual(visual) ((void) 0)
</programlisting>
<warning><para><literal>gtk_widget_set_default_visual</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
This function is deprecated; it does nothing.
</para><variablelist role="params">
<varlistentry><term><parameter>visual</parameter>&#160;:</term>
<listitem><simpara>a visual
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-size-request" role="function">
<title>gtk_widget_set_size_request ()</title>
<indexterm zone="gtk-widget-set-size-request"><primary sortas="widget_set_size_request">gtk_widget_set_size_request</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_size_request         (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gint">gint</link> width,
                                                         <link linkend="gint">gint</link> height);</programlisting>
<para>
Sets the minimum size of a widget; that is, the widget's size
request will be <parameter>width</parameter> by <parameter>height</parameter>. You can use this function to
force a widget to be either larger or smaller than it normally
would be.
</para>
<para>
In most cases, <link linkend="gtk-window-set-default-size"><function>gtk_window_set_default_size()</function></link> is a better choice for
toplevel windows than this function; setting the default size will
still allow users to shrink the window. Setting the size request
will force them to leave the window at least as large as the size
request. When dealing with window sizes,
<link linkend="gtk-window-set-geometry-hints"><function>gtk_window_set_geometry_hints()</function></link> can be a useful function as well.
</para>
<para>
Note the inherent danger of setting any fixed size - themes,
translations into other languages, different fonts, and user action
can all change the appropriate size for a given widget. So, it's
basically impossible to hardcode a size that will always be
correct.
</para>
<para>
The size request of a widget is the smallest size a widget can
accept while still functioning well and drawing itself correctly.
However in some strange cases a widget may be allocated less than
its requested size, and in many cases a widget may be allocated more
space than it requested.
</para>
<para>
If the size request in a given direction is -1 (unset), then
the "natural" size request of the widget will be used instead.
</para>
<para>
Widgets can't actually be allocated a size less than 1 by 1, but
you can pass 0,0 to this function to mean "as small as possible."</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&#160;:</term>
<listitem><simpara> width <parameter>widget</parameter> should request, or -1 to unset
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>height</parameter>&#160;:</term>
<listitem><simpara> height <parameter>widget</parameter> should request, or -1 to unset
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-visual" role="macro" condition="deprecated:">
<title>gtk_widget_set_visual()</title>
<indexterm zone="gtk-widget-set-visual" role="deprecated"><primary sortas="widget_set_visual">gtk_widget_set_visual</primary></indexterm><programlisting>#define gtk_widget_set_visual(widget,visual)  ((void) 0)
</programlisting>
<warning><para><literal>gtk_widget_set_visual</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
This function is deprecated; it does nothing.
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>visual</parameter>&#160;:</term>
<listitem><simpara>a visual
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-thaw-child-notify" role="function">
<title>gtk_widget_thaw_child_notify ()</title>
<indexterm zone="gtk-widget-thaw-child-notify"><primary sortas="widget_thaw_child_notify">gtk_widget_thaw_child_notify</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_thaw_child_notify        (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Reverts the effect of a previous call to <link linkend="gtk-widget-freeze-child-notify"><function>gtk_widget_freeze_child_notify()</function></link>.
This causes all queued <link linkend="GtkWidget-child-notify"><type>"child-notify"</type></link> signals on <parameter>widget</parameter> to be 
emitted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-widget-set-no-show-all" role="function" condition="since:2.4">
<title>gtk_widget_set_no_show_all ()</title>
<indexterm zone="gtk-widget-set-no-show-all" role="2.4"><primary sortas="widget_set_no_show_all">gtk_widget_set_no_show_all</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_no_show_all          (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> no_show_all);</programlisting>
<para>
Sets the <link linkend="GtkWidget--no-show-all"><type>"no-show-all"</type></link> property, which determines whether 
calls to <link linkend="gtk-widget-show-all"><function>gtk_widget_show_all()</function></link> and <link linkend="gtk-widget-hide-all"><function>gtk_widget_hide_all()</function></link> will affect 
this widget. 
</para>
<para>
This is mostly for use in constructing widget hierarchies with externally
controlled visibility, see <link linkend="GtkUIManager"><type>GtkUIManager</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>no_show_all</parameter>&#160;:</term>
<listitem><simpara> the new value for the "no-show-all" property
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4</para></refsect2>
<refsect2 id="gtk-widget-get-no-show-all" role="function" condition="since:2.4">
<title>gtk_widget_get_no_show_all ()</title>
<indexterm zone="gtk-widget-get-no-show-all" role="2.4"><primary sortas="widget_get_no_show_all">gtk_widget_get_no_show_all</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_get_no_show_all          (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Returns the current value of the GtkWidget:no-show-all property, 
which determines whether calls to <link linkend="gtk-widget-show-all"><function>gtk_widget_show_all()</function></link> and 
<link linkend="gtk-widget-hide-all"><function>gtk_widget_hide_all()</function></link> will affect this widget.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the current value of the "no-show-all" property.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4</para></refsect2>
<refsect2 id="gtk-widget-list-mnemonic-labels" role="function" condition="since:2.4">
<title>gtk_widget_list_mnemonic_labels ()</title>
<indexterm zone="gtk-widget-list-mnemonic-labels" role="2.4"><primary sortas="widget_list_mnemonic_labels">gtk_widget_list_mnemonic_labels</primary></indexterm><programlisting><link linkend="GList">GList</link>*              gtk_widget_list_mnemonic_labels     (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Returns a newly allocated list of the widgets, normally labels, for 
which this widget is a the target of a mnemonic (see for example, 
<link linkend="gtk-label-set-mnemonic-widget"><function>gtk_label_set_mnemonic_widget()</function></link>).
</para>
<para>
The widgets in the list are not individually referenced. If you
want to iterate through the list and perform actions involving
callbacks that might destroy the widgets, you
<emphasis>must</emphasis> call <literal>g_list_foreach (result,
(GFunc)g_object_ref, NULL)</literal> first, and then unref all the
widgets afterwards.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the list of mnemonic labels; free this list
 with <link linkend="g-list-free"><function>g_list_free()</function></link> when you are done with it.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4</para></refsect2>
<refsect2 id="gtk-widget-add-mnemonic-label" role="function" condition="since:2.4">
<title>gtk_widget_add_mnemonic_label ()</title>
<indexterm zone="gtk-widget-add-mnemonic-label" role="2.4"><primary sortas="widget_add_mnemonic_label">gtk_widget_add_mnemonic_label</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_add_mnemonic_label       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkWidget">GtkWidget</link> *label);</programlisting>
<para>
Adds a widget to the list of mnemonic labels for
this widget. (See <link linkend="gtk-widget-list-mnemonic-labels"><function>gtk_widget_list_mnemonic_labels()</function></link>). Note the
list of mnemonic labels for the widget is cleared when the
widget is destroyed, so the caller must make sure to update
its internal state at this point as well, by using a connection
to the <link linkend="GtkWidget-destroy"><type>"destroy"</type></link> signal or a weak notifier.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link> that acts as a mnemonic label for <parameter>widget</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4</para></refsect2>
<refsect2 id="gtk-widget-remove-mnemonic-label" role="function" condition="since:2.4">
<title>gtk_widget_remove_mnemonic_label ()</title>
<indexterm zone="gtk-widget-remove-mnemonic-label" role="2.4"><primary sortas="widget_remove_mnemonic_label">gtk_widget_remove_mnemonic_label</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_remove_mnemonic_label    (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkWidget">GtkWidget</link> *label);</programlisting>
<para>
Removes a widget from the list of mnemonic labels for
this widget. (See <link linkend="gtk-widget-list-mnemonic-labels"><function>gtk_widget_list_mnemonic_labels()</function></link>). The widget
must have previously been added to the list with
<link linkend="gtk-widget-add-mnemonic-label"><function>gtk_widget_add_mnemonic_label()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link> that was previously set as a mnemnic label for
        <parameter>widget</parameter> with <link linkend="gtk-widget-add-mnemonic-label"><function>gtk_widget_add_mnemonic_label()</function></link>.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4</para></refsect2>
<refsect2 id="gtk-widget-get-action" role="function" condition="deprecated:2.16: Use gtk_activatable_get_related_action() instead.|since:2.10">
<title>gtk_widget_get_action ()</title>
<indexterm zone="gtk-widget-get-action" role="deprecated"><primary sortas="widget_get_action">gtk_widget_get_action</primary></indexterm><indexterm zone="gtk-widget-get-action" role="2.10"><primary sortas="widget_get_action">gtk_widget_get_action</primary></indexterm><programlisting><link linkend="GtkAction">GtkAction</link> *         gtk_widget_get_action               (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<warning><para><literal>gtk_widget_get_action</literal> has been deprecated since version 2.16 and should not be used in newly-written code. Use <link linkend="gtk-activatable-get-related-action"><function>gtk_activatable_get_related_action()</function></link> instead.</para></warning>
<para>
Returns the <link linkend="GtkAction"><type>GtkAction</type></link> that <parameter>widget</parameter> is a proxy for. 
See also <link linkend="gtk-action-get-proxies"><function>gtk_action_get_proxies()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the action that a widget is a proxy for, or
 <link linkend="NULL--CAPS"><literal>NULL</literal></link>, if it is not attached to an action.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.10</para></refsect2>
<refsect2 id="gtk-widget-is-composited" role="function" condition="since:2.10">
<title>gtk_widget_is_composited ()</title>
<indexterm zone="gtk-widget-is-composited" role="2.10"><primary sortas="widget_is_composited">gtk_widget_is_composited</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_is_composited            (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Whether <parameter>widget</parameter> can rely on having its alpha channel
drawn correctly. On X11 this function returns whether a
compositing manager is running for <parameter>widget</parameter>'s screen.
</para>
<para>
Please note that the semantics of this call will change
in the future if used on a widget that has a composited
window in its hierarchy (as set by <link linkend="gdk-window-set-composited"><function>gdk_window_set_composited()</function></link>).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the widget can rely on its alpha
channel being drawn correctly.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.10</para></refsect2>
<refsect2 id="gtk-widget-error-bell" role="function" condition="since:2.12">
<title>gtk_widget_error_bell ()</title>
<indexterm zone="gtk-widget-error-bell" role="2.12"><primary sortas="widget_error_bell">gtk_widget_error_bell</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_error_bell               (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Notifies the user about an input-related error on this widget. 
If the <link linkend="GtkSettings--gtk-error-bell"><type>"gtk-error-bell"</type></link> setting is <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, it calls
<link linkend="gdk-window-beep"><function>gdk_window_beep()</function></link>, otherwise it does nothing.
</para>
<para>
Note that the effect of <link linkend="gdk-window-beep"><function>gdk_window_beep()</function></link> can be configured in many
ways, depending on the windowing backend and the desktop environment
or window manager that is used.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12</para></refsect2>
<refsect2 id="gtk-widget-keynav-failed" role="function" condition="since:2.12">
<title>gtk_widget_keynav_failed ()</title>
<indexterm zone="gtk-widget-keynav-failed" role="2.12"><primary sortas="widget_keynav_failed">gtk_widget_keynav_failed</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_keynav_failed            (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkDirectionType">GtkDirectionType</link> direction);</programlisting>
<para>
This function should be called whenever keyboard navigation within
a single widget hits a boundary. The function emits the
<link linkend="GtkWidget-keynav-failed"><type>"keynav-failed"</type></link> signal on the widget and its return
value should be interpreted in a way similar to the return value of
<link linkend="gtk-widget-child-focus"><function>gtk_widget_child_focus()</function></link>:
</para>
<para>
When <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> is returned, stay in the widget, the failed keyboard
navigation is Ok and/or there is nowhere we can/should move the
focus to.
</para>
<para>
When <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> is returned, the caller should continue with keyboard
navigation outside the widget, e.g. by calling
<link linkend="gtk-widget-child-focus"><function>gtk_widget_child_focus()</function></link> on the widget's toplevel.
</para>
<para>
The default ::keynav-failed handler returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> for 
<link linkend="GTK-DIR-TAB-FORWARD--CAPS"><literal>GTK_DIR_TAB_FORWARD</literal></link> and <link linkend="GTK-DIR-TAB-BACKWARD--CAPS"><literal>GTK_DIR_TAB_BACKWARD</literal></link>. For the other 
values of <link linkend="GtkDirectionType"><type>GtkDirectionType</type></link>, it looks at the 
<link linkend="GtkSettings--gtk-keynav-cursor-only"><type>"gtk-keynav-cursor-only"</type></link> setting and returns <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> 
if the setting is <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>. This way the entire user interface
becomes cursor-navigatable on input devices such as mobile phones
which only have cursor keys but no tab key.
</para>
<para>
Whenever the default handler returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, it also calls
<link linkend="gtk-widget-error-bell"><function>gtk_widget_error_bell()</function></link> to notify the user of the failed keyboard
navigation.
</para>
<para>
A use case for providing an own implementation of ::keynav-failed 
(either by connecting to it or by overriding it) would be a row of
<link linkend="GtkEntry"><type>GtkEntry</type></link> widgets where the user should be able to navigate the
entire row with the cursor keys, as e.g. known from user interfaces 
that require entering license keys.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>direction</parameter>&#160;:</term>
<listitem><simpara> direction of focus movement
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if stopping keyboard navigation is fine, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>
              if the emitting widget should try to handle the keyboard
              navigation attempt in its parent container(s).

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12</para></refsect2>
<refsect2 id="gtk-widget-get-tooltip-markup" role="function" condition="since:2.12">
<title>gtk_widget_get_tooltip_markup ()</title>
<indexterm zone="gtk-widget-get-tooltip-markup" role="2.12"><primary sortas="widget_get_tooltip_markup">gtk_widget_get_tooltip_markup</primary></indexterm><programlisting><link linkend="gchar">gchar</link> *             gtk_widget_get_tooltip_markup       (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Gets the contents of the tooltip for <parameter>widget</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the tooltip text, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>. You should free the
  returned string with <link linkend="g-free"><function>g_free()</function></link> when done.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12</para></refsect2>
<refsect2 id="gtk-widget-set-tooltip-markup" role="function" condition="since:2.12">
<title>gtk_widget_set_tooltip_markup ()</title>
<indexterm zone="gtk-widget-set-tooltip-markup" role="2.12"><primary sortas="widget_set_tooltip_markup">gtk_widget_set_tooltip_markup</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_tooltip_markup       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *markup);</programlisting>
<para>
Sets <parameter>markup</parameter> as the contents of the tooltip, which is marked up with
 the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
</para>
<para>
This function will take care of setting GtkWidget:has-tooltip to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>
and of the default handler for the GtkWidget::query-tooltip signal.
</para>
<para>
See also the GtkWidget:tooltip-markup property and
<link linkend="gtk-tooltip-set-markup"><function>gtk_tooltip_set_markup()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>markup</parameter>&#160;:</term>
<listitem><simpara> the contents of the tooltip for <parameter>widget</parameter>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12</para></refsect2>
<refsect2 id="gtk-widget-get-tooltip-text" role="function" condition="since:2.12">
<title>gtk_widget_get_tooltip_text ()</title>
<indexterm zone="gtk-widget-get-tooltip-text" role="2.12"><primary sortas="widget_get_tooltip_text">gtk_widget_get_tooltip_text</primary></indexterm><programlisting><link linkend="gchar">gchar</link> *             gtk_widget_get_tooltip_text         (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Gets the contents of the tooltip for <parameter>widget</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the tooltip text, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>. You should free the
  returned string with <link linkend="g-free"><function>g_free()</function></link> when done.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12</para></refsect2>
<refsect2 id="gtk-widget-set-tooltip-text" role="function" condition="since:2.12">
<title>gtk_widget_set_tooltip_text ()</title>
<indexterm zone="gtk-widget-set-tooltip-text" role="2.12"><primary sortas="widget_set_tooltip_text">gtk_widget_set_tooltip_text</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_tooltip_text         (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         const <link linkend="gchar">gchar</link> *text);</programlisting>
<para>
Sets <parameter>text</parameter> as the contents of the tooltip. This function will take
care of setting GtkWidget:has-tooltip to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> and of the default
handler for the GtkWidget::query-tooltip signal.
</para>
<para>
See also the GtkWidget:tooltip-text property and <link linkend="gtk-tooltip-set-text"><function>gtk_tooltip_set_text()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text</parameter>&#160;:</term>
<listitem><simpara> the contents of the tooltip for <parameter>widget</parameter>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12</para></refsect2>
<refsect2 id="gtk-widget-get-tooltip-window" role="function" condition="since:2.12">
<title>gtk_widget_get_tooltip_window ()</title>
<indexterm zone="gtk-widget-get-tooltip-window" role="2.12"><primary sortas="widget_get_tooltip_window">gtk_widget_get_tooltip_window</primary></indexterm><programlisting><link linkend="GtkWindow">GtkWindow</link> *         gtk_widget_get_tooltip_window       (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Returns the <link linkend="GtkWindow"><type>GtkWindow</type></link> of the current tooltip. This can be the
GtkWindow created by default, or the custom tooltip window set
using <link linkend="gtk-widget-set-tooltip-window"><function>gtk_widget_set_tooltip_window()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The <link linkend="GtkWindow"><type>GtkWindow</type></link> of the current tooltip.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12</para></refsect2>
<refsect2 id="gtk-widget-set-tooltip-window" role="function" condition="since:2.12">
<title>gtk_widget_set_tooltip_window ()</title>
<indexterm zone="gtk-widget-set-tooltip-window" role="2.12"><primary sortas="widget_set_tooltip_window">gtk_widget_set_tooltip_window</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_tooltip_window       (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GtkWindow">GtkWindow</link> *custom_window);</programlisting>
<para>
Replaces the default, usually yellow, window used for displaying
tooltips with <parameter>custom_window</parameter>. GTK+ will take care of showing and
hiding <parameter>custom_window</parameter> at the right moment, to behave likewise as
the default tooltip window. If <parameter>custom_window</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>, the default
tooltip window will be used.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>custom_window</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWindow"><type>GtkWindow</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12</para></refsect2>
<refsect2 id="gtk-widget-get-has-tooltip" role="function" condition="since:2.12">
<title>gtk_widget_get_has_tooltip ()</title>
<indexterm zone="gtk-widget-get-has-tooltip" role="2.12"><primary sortas="widget_get_has_tooltip">gtk_widget_get_has_tooltip</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gtk_widget_get_has_tooltip          (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Returns the current value of the has-tooltip property.  See
GtkWidget:has-tooltip for more information.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> current value of has-tooltip on <parameter>widget</parameter>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12</para></refsect2>
<refsect2 id="gtk-widget-set-has-tooltip" role="function" condition="since:2.12">
<title>gtk_widget_set_has_tooltip ()</title>
<indexterm zone="gtk-widget-set-has-tooltip" role="2.12"><primary sortas="widget_set_has_tooltip">gtk_widget_set_has_tooltip</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_set_has_tooltip          (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="gboolean">gboolean</link> has_tooltip);</programlisting>
<para>
Sets the has-tooltip property on <parameter>widget</parameter> to <parameter>has_tooltip</parameter>.  See
GtkWidget:has-tooltip for more information.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>has_tooltip</parameter>&#160;:</term>
<listitem><simpara> whether or not <parameter>widget</parameter> has a tooltip.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12</para></refsect2>
<refsect2 id="gtk-widget-trigger-tooltip-query" role="function" condition="since:2.12">
<title>gtk_widget_trigger_tooltip_query ()</title>
<indexterm zone="gtk-widget-trigger-tooltip-query" role="2.12"><primary sortas="widget_trigger_tooltip_query">gtk_widget_trigger_tooltip_query</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_widget_trigger_tooltip_query    (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Triggers a tooltip query on the display where the toplevel of <parameter>widget</parameter>
is located. See <link linkend="gtk-tooltip-trigger-tooltip-query"><function>gtk_tooltip_trigger_tooltip_query()</function></link> for more
information.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12</para></refsect2>
<refsect2 id="gtk-widget-get-snapshot" role="function" condition="since:2.14">
<title>gtk_widget_get_snapshot ()</title>
<indexterm zone="gtk-widget-get-snapshot" role="2.14"><primary sortas="widget_get_snapshot">gtk_widget_get_snapshot</primary></indexterm><programlisting><link linkend="GdkPixmap">GdkPixmap</link> *         gtk_widget_get_snapshot             (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="GdkRectangle">GdkRectangle</link> *clip_rect);</programlisting>
<para>
Create a <link linkend="GdkPixmap"><type>GdkPixmap</type></link> of the contents of the widget and its children.
</para>
<para>
Works even if the widget is obscured. The depth and visual of the
resulting pixmap is dependent on the widget being snapshot and likely
differs from those of a target widget displaying the pixmap.
The function <link linkend="gdk-pixbuf-get-from-drawable"><function>gdk_pixbuf_get_from_drawable()</function></link> can be used to convert
the pixmap to a visual independant representation.
</para>
<para>
The snapshot area used by this function is the <parameter>widget</parameter>'s allocation plus
any extra space occupied by additional windows belonging to this widget
(such as the arrows of a spin button).
Thus, the resulting snapshot pixmap is possibly larger than the allocation.
</para>
<para>
If <parameter>clip_rect</parameter> is non-<link linkend="NULL--CAPS"><literal>NULL</literal></link>, the resulting pixmap is shrunken to
match the specified clip_rect. The (x,y) coordinates of <parameter>clip_rect</parameter> are
interpreted widget relative. If width or height of <parameter>clip_rect</parameter> are 0 or
negative, the width or height of the resulting pixmap will be shrunken
by the respective amount.
For instance a <parameter>clip_rect</parameter> <literal>{ +5, +5, -10, -10 }</literal> will
chop off 5 pixels at each side of the snapshot pixmap.
If non-<link linkend="NULL--CAPS"><literal>NULL</literal></link>, <parameter>clip_rect</parameter> will contain the exact widget-relative snapshot
coordinates upon return. A <parameter>clip_rect</parameter> of <literal>{ -1, -1, 0, 0 }</literal>
can be used to preserve the auto-grown snapshot area and use <parameter>clip_rect</parameter>
as a pure output parameter.
</para>
<para>
The returned pixmap can be <link linkend="NULL--CAPS"><literal>NULL</literal></link>, if the resulting <parameter>clip_area</parameter> was empty.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>    a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>clip_rect</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdkRectangle"><type>GdkRectangle</type></link> or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GdkPixmap"><type>GdkPixmap</type></link> snapshot of the widget

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.14</para></refsect2>
<refsect2 id="gtk-widget-get-window" role="function" condition="since:2.14">
<title>gtk_widget_get_window ()</title>
<indexterm zone="gtk-widget-get-window" role="2.14"><primary sortas="widget_get_window">gtk_widget_get_window</primary></indexterm><programlisting><link linkend="GdkWindow">GdkWindow</link>*          gtk_widget_get_window               (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
Returns the widget's window if it is realized, <link linkend="NULL--CAPS"><literal>NULL</literal></link> otherwise</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkWidget"><type>GtkWidget</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <parameter>widget</parameter>'s window.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.14</para></refsect2>
<refsect2 id="gtk-requisition-copy" role="function">
<title>gtk_requisition_copy ()</title>
<indexterm zone="gtk-requisition-copy"><primary sortas="requisition_copy">gtk_requisition_copy</primary></indexterm><programlisting><link linkend="GtkRequisition">GtkRequisition</link> *    gtk_requisition_copy                (const <link linkend="GtkRequisition">GtkRequisition</link> *requisition);</programlisting>
<para>
Copies a <link linkend="GtkRequisition"><type>GtkRequisition</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>requisition</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkRequisition"><type>GtkRequisition</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a copy of <parameter>requisition</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gtk-requisition-free" role="function">
<title>gtk_requisition_free ()</title>
<indexterm zone="gtk-requisition-free"><primary sortas="requisition_free">gtk_requisition_free</primary></indexterm><programlisting><link linkend="void">void</link>                gtk_requisition_free                (<link linkend="GtkRequisition">GtkRequisition</link> *requisition);</programlisting>
<para>
Frees a <link linkend="GtkRequisition"><type>GtkRequisition</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>requisition</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkRequisition"><type>GtkRequisition</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="GtkWidget.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="GtkWidget--app-paintable" role="property"><title>The <literal>&quot;app-paintable&quot;</literal> property</title>
<indexterm zone="GtkWidget--app-paintable"><primary sortas="Widget:app-paintable">GtkWidget:app-paintable</primary></indexterm><programlisting>  &quot;app-paintable&quot;            <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>Whether the application will paint directly on the widget.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GtkWidget--can-default" role="property"><title>The <literal>&quot;can-default&quot;</literal> property</title>
<indexterm zone="GtkWidget--can-default"><primary sortas="Widget:can-default">GtkWidget:can-default</primary></indexterm><programlisting>  &quot;can-default&quot;              <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>Whether the widget can be the default widget.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GtkWidget--can-focus" role="property"><title>The <literal>&quot;can-focus&quot;</literal> property</title>
<indexterm zone="GtkWidget--can-focus"><primary sortas="Widget:can-focus">GtkWidget:can-focus</primary></indexterm><programlisting>  &quot;can-focus&quot;                <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>Whether the widget can accept the input focus.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GtkWidget--composite-child" role="property"><title>The <literal>&quot;composite-child&quot;</literal> property</title>
<indexterm zone="GtkWidget--composite-child"><primary sortas="Widget:composite-child">GtkWidget:composite-child</primary></indexterm><programlisting>  &quot;composite-child&quot;          <link linkend="gboolean">gboolean</link>              : Read</programlisting>
<para>Whether the widget is part of a composite widget.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GtkWidget--events" role="property"><title>The <literal>&quot;events&quot;</literal> property</title>
<indexterm zone="GtkWidget--events"><primary sortas="Widget:events">GtkWidget:events</primary></indexterm><programlisting>  &quot;events&quot;                   <link linkend="GdkEventMask">GdkEventMask</link>          : Read / Write</programlisting>
<para>The event mask that decides what kind of GdkEvents this widget gets.</para><para>Default value: GDK_STRUCTURE_MASK</para>
</refsect2>
<refsect2 id="GtkWidget--extension-events" role="property"><title>The <literal>&quot;extension-events&quot;</literal> property</title>
<indexterm zone="GtkWidget--extension-events"><primary sortas="Widget:extension-events">GtkWidget:extension-events</primary></indexterm><programlisting>  &quot;extension-events&quot;         <link linkend="GdkExtensionMode">GdkExtensionMode</link>      : Read / Write</programlisting>
<para>The mask that decides what kind of extension events this widget gets.</para><para>Default value: GDK_EXTENSION_EVENTS_NONE</para>
</refsect2>
<refsect2 id="GtkWidget--has-default" role="property"><title>The <literal>&quot;has-default&quot;</literal> property</title>
<indexterm zone="GtkWidget--has-default"><primary sortas="Widget:has-default">GtkWidget:has-default</primary></indexterm><programlisting>  &quot;has-default&quot;              <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>Whether the widget is the default widget.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GtkWidget--has-focus" role="property"><title>The <literal>&quot;has-focus&quot;</literal> property</title>
<indexterm zone="GtkWidget--has-focus"><primary sortas="Widget:has-focus">GtkWidget:has-focus</primary></indexterm><programlisting>  &quot;has-focus&quot;                <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>Whether the widget has the input focus.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GtkWidget--has-tooltip" role="property"><title>The <literal>&quot;has-tooltip&quot;</literal> property</title>
<indexterm zone="GtkWidget--has-tooltip" role="2.12"><primary sortas="Widget:has-tooltip">GtkWidget:has-tooltip</primary></indexterm><programlisting>  &quot;has-tooltip&quot;              <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>
Enables or disables the emission of <link linkend="GtkWidget-query-tooltip"><type>"query-tooltip"</type></link> on <parameter>widget</parameter>.
A value of <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> indicates that <parameter>widget</parameter> can have a tooltip, in this case
the widget will be queried using <link linkend="GtkWidget-query-tooltip"><type>"query-tooltip"</type></link> to determine
whether it will provide a tooltip or not.
</para>
<para>
Note that setting this property to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> for the first time will change
the event masks of the GdkWindows of this widget to include leave-notify
and motion-notify events.  This cannot and will not be undone when the
property is set to <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> again.</para>
<para>
</para><para>Default value: FALSE</para>
<para>Since 2.12</para>
</refsect2>
<refsect2 id="GtkWidget--height-request" role="property"><title>The <literal>&quot;height-request&quot;</literal> property</title>
<indexterm zone="GtkWidget--height-request"><primary sortas="Widget:height-request">GtkWidget:height-request</primary></indexterm><programlisting>  &quot;height-request&quot;           <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>Override for height request of the widget, or -1 if natural request should be used.</para><para>Allowed values: &gt;= G_MAXULONG</para>
<para>Default value: -1</para>
</refsect2>
<refsect2 id="GtkWidget--is-focus" role="property"><title>The <literal>&quot;is-focus&quot;</literal> property</title>
<indexterm zone="GtkWidget--is-focus"><primary sortas="Widget:is-focus">GtkWidget:is-focus</primary></indexterm><programlisting>  &quot;is-focus&quot;                 <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>Whether the widget is the focus widget within the toplevel.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GtkWidget--name" role="property"><title>The <literal>&quot;name&quot;</literal> property</title>
<indexterm zone="GtkWidget--name"><primary sortas="Widget:name">GtkWidget:name</primary></indexterm><programlisting>  &quot;name&quot;                     <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>The name of the widget.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="GtkWidget--no-show-all" role="property"><title>The <literal>&quot;no-show-all&quot;</literal> property</title>
<indexterm zone="GtkWidget--no-show-all"><primary sortas="Widget:no-show-all">GtkWidget:no-show-all</primary></indexterm><programlisting>  &quot;no-show-all&quot;              <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>Whether gtk_widget_show_all() should not affect this widget.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GtkWidget--parent" role="property"><title>The <literal>&quot;parent&quot;</literal> property</title>
<indexterm zone="GtkWidget--parent"><primary sortas="Widget:parent">GtkWidget:parent</primary></indexterm><programlisting>  &quot;parent&quot;                   <link linkend="GtkContainer">GtkContainer</link>*         : Read / Write</programlisting>
<para>The parent widget of this widget. Must be a Container widget.</para></refsect2>
<refsect2 id="GtkWidget--receives-default" role="property"><title>The <literal>&quot;receives-default&quot;</literal> property</title>
<indexterm zone="GtkWidget--receives-default"><primary sortas="Widget:receives-default">GtkWidget:receives-default</primary></indexterm><programlisting>  &quot;receives-default&quot;         <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>If TRUE, the widget will receive the default action when it is focused.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GtkWidget--sensitive" role="property"><title>The <literal>&quot;sensitive&quot;</literal> property</title>
<indexterm zone="GtkWidget--sensitive"><primary sortas="Widget:sensitive">GtkWidget:sensitive</primary></indexterm><programlisting>  &quot;sensitive&quot;                <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>Whether the widget responds to input.</para><para>Default value: TRUE</para>
</refsect2>
<refsect2 id="GtkWidget--style" role="property"><title>The <literal>&quot;style&quot;</literal> property</title>
<indexterm zone="GtkWidget--style"><primary sortas="Widget:style">GtkWidget:style</primary></indexterm><programlisting>  &quot;style&quot;                    <link linkend="GtkStyle">GtkStyle</link>*             : Read / Write</programlisting>
<para>The style of the widget, which contains information about how it will look (colors etc).</para></refsect2>
<refsect2 id="GtkWidget--tooltip-markup" role="property"><title>The <literal>&quot;tooltip-markup&quot;</literal> property</title>
<indexterm zone="GtkWidget--tooltip-markup" role="2.12"><primary sortas="Widget:tooltip-markup">GtkWidget:tooltip-markup</primary></indexterm><programlisting>  &quot;tooltip-markup&quot;           <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>
Sets the text of tooltip to be the given string, which is marked up
with the <link linkend="PangoMarkupFormat">Pango text markup language</link>.
Also see <link linkend="gtk-tooltip-set-markup"><function>gtk_tooltip_set_markup()</function></link>.
</para>
<para>
This is a convenience property which will take care of getting the
tooltip shown if the given string is not <link linkend="NULL--CAPS"><literal>NULL</literal></link>: <link linkend="GtkWidget--has-tooltip"><type>"has-tooltip"</type></link>
will automatically be set to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> and there will be taken care of
<link linkend="GtkWidget-query-tooltip"><type>"query-tooltip"</type></link> in the default signal handler.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 2.12</para>
</refsect2>
<refsect2 id="GtkWidget--tooltip-text" role="property"><title>The <literal>&quot;tooltip-text&quot;</literal> property</title>
<indexterm zone="GtkWidget--tooltip-text" role="2.12"><primary sortas="Widget:tooltip-text">GtkWidget:tooltip-text</primary></indexterm><programlisting>  &quot;tooltip-text&quot;             <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>
Sets the text of tooltip to be the given string.
</para>
<para>
Also see <link linkend="gtk-tooltip-set-text"><function>gtk_tooltip_set_text()</function></link>.
</para>
<para>
This is a convenience property which will take care of getting the
tooltip shown if the given string is not <link linkend="NULL--CAPS"><literal>NULL</literal></link>: <link linkend="GtkWidget--has-tooltip"><type>"has-tooltip"</type></link>
will automatically be set to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> and there will be taken care of
<link linkend="GtkWidget-query-tooltip"><type>"query-tooltip"</type></link> in the default signal handler.</para>
<para>
</para><para>Default value: NULL</para>
<para>Since 2.12</para>
</refsect2>
<refsect2 id="GtkWidget--visible" role="property"><title>The <literal>&quot;visible&quot;</literal> property</title>
<indexterm zone="GtkWidget--visible"><primary sortas="Widget:visible">GtkWidget:visible</primary></indexterm><programlisting>  &quot;visible&quot;                  <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>Whether the widget is visible.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="GtkWidget--width-request" role="property"><title>The <literal>&quot;width-request&quot;</literal> property</title>
<indexterm zone="GtkWidget--width-request"><primary sortas="Widget:width-request">GtkWidget:width-request</primary></indexterm><programlisting>  &quot;width-request&quot;            <link linkend="gint">gint</link>                  : Read / Write</programlisting>
<para>Override for width request of the widget, or -1 if natural request should be used.</para><para>Allowed values: &gt;= G_MAXULONG</para>
<para>Default value: -1</para>
</refsect2>
<refsect2 id="GtkWidget--window" role="property"><title>The <literal>&quot;window&quot;</literal> property</title>
<indexterm zone="GtkWidget--window" role="2.14"><primary sortas="Widget:window">GtkWidget:window</primary></indexterm><programlisting>  &quot;window&quot;                   <link linkend="GdkWindow">GdkWindow</link>*            : Read</programlisting>
<para>
The widget's window if it is realized, <link linkend="NULL--CAPS"><literal>NULL</literal></link> otherwise.</para>
<para>
</para><para>Since 2.14</para>
</refsect2>

</refsect1>
<refsect1 id="GtkWidget.style-property-details" role="style_properties_details">
<title role="style_properties_details.title">Style Property Details</title>
<refsect2 id="GtkWidget--s-cursor-aspect-ratio" role="property"><title>The <literal>&quot;cursor-aspect-ratio&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-cursor-aspect-ratio"><primary sortas="Widget:cursor-aspect-ratio">GtkWidget:cursor-aspect-ratio</primary></indexterm><programlisting>  &quot;cursor-aspect-ratio&quot;      <link linkend="gfloat">gfloat</link>                : Read</programlisting>
<para>Aspect ratio with which to draw insertion cursor.</para><para>Allowed values: [0,1]</para>
<para>Default value: 0.04</para>
</refsect2>
<refsect2 id="GtkWidget--s-cursor-color" role="property"><title>The <literal>&quot;cursor-color&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-cursor-color"><primary sortas="Widget:cursor-color">GtkWidget:cursor-color</primary></indexterm><programlisting>  &quot;cursor-color&quot;             <link linkend="GdkColor">GdkColor</link>*             : Read</programlisting>
<para>Color with which to draw insertion cursor.</para></refsect2>
<refsect2 id="GtkWidget--s-draw-border" role="property"><title>The <literal>&quot;draw-border&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-draw-border" role="2.8"><primary sortas="Widget:draw-border">GtkWidget:draw-border</primary></indexterm><programlisting>  &quot;draw-border&quot;              <link linkend="GtkBorder">GtkBorder</link>*            : Read</programlisting>
<para>
The "draw-border" style property defines the size of areas outside
the widget's allocation to draw.</para>
<para>
</para><para>Since 2.8</para>
</refsect2>
<refsect2 id="GtkWidget--s-focus-line-pattern" role="property"><title>The <literal>&quot;focus-line-pattern&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-focus-line-pattern"><primary sortas="Widget:focus-line-pattern">GtkWidget:focus-line-pattern</primary></indexterm><programlisting>  &quot;focus-line-pattern&quot;       <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>Dash pattern used to draw the focus indicator.</para><para>Default value: "\001\001"</para>
</refsect2>
<refsect2 id="GtkWidget--s-focus-line-width" role="property"><title>The <literal>&quot;focus-line-width&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-focus-line-width"><primary sortas="Widget:focus-line-width">GtkWidget:focus-line-width</primary></indexterm><programlisting>  &quot;focus-line-width&quot;         <link linkend="gint">gint</link>                  : Read</programlisting>
<para>Width, in pixels, of the focus indicator line.</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 1</para>
</refsect2>
<refsect2 id="GtkWidget--s-focus-padding" role="property"><title>The <literal>&quot;focus-padding&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-focus-padding"><primary sortas="Widget:focus-padding">GtkWidget:focus-padding</primary></indexterm><programlisting>  &quot;focus-padding&quot;            <link linkend="gint">gint</link>                  : Read</programlisting>
<para>Width, in pixels, between focus indicator and the widget 'box'.</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 1</para>
</refsect2>
<refsect2 id="GtkWidget--s-interior-focus" role="property"><title>The <literal>&quot;interior-focus&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-interior-focus"><primary sortas="Widget:interior-focus">GtkWidget:interior-focus</primary></indexterm><programlisting>  &quot;interior-focus&quot;           <link linkend="gboolean">gboolean</link>              : Read</programlisting>
<para>Whether to draw the focus indicator inside widgets.</para><para>Default value: TRUE</para>
</refsect2>
<refsect2 id="GtkWidget--s-link-color" role="property"><title>The <literal>&quot;link-color&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-link-color" role="2.10"><primary sortas="Widget:link-color">GtkWidget:link-color</primary></indexterm><programlisting>  &quot;link-color&quot;               <link linkend="GdkColor">GdkColor</link>*             : Read</programlisting>
<para>
The "link-color" style property defines the color of unvisited links.</para>
<para>
</para><para>Since 2.10</para>
</refsect2>
<refsect2 id="GtkWidget--s-scroll-arrow-hlength" role="property"><title>The <literal>&quot;scroll-arrow-hlength&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-scroll-arrow-hlength" role="2.10"><primary sortas="Widget:scroll-arrow-hlength">GtkWidget:scroll-arrow-hlength</primary></indexterm><programlisting>  &quot;scroll-arrow-hlength&quot;     <link linkend="gint">gint</link>                  : Read</programlisting>
<para>
The "scroll-arrow-hlength" style property defines the length of 
horizontal scroll arrows.</para>
<para>
</para><para>Allowed values: &gt;= 1</para>
<para>Default value: 16</para>
<para>Since 2.10</para>
</refsect2>
<refsect2 id="GtkWidget--s-scroll-arrow-vlength" role="property"><title>The <literal>&quot;scroll-arrow-vlength&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-scroll-arrow-vlength" role="2.10"><primary sortas="Widget:scroll-arrow-vlength">GtkWidget:scroll-arrow-vlength</primary></indexterm><programlisting>  &quot;scroll-arrow-vlength&quot;     <link linkend="gint">gint</link>                  : Read</programlisting>
<para>
The "scroll-arrow-vlength" style property defines the length of 
vertical scroll arrows.</para>
<para>
</para><para>Allowed values: &gt;= 1</para>
<para>Default value: 16</para>
<para>Since 2.10</para>
</refsect2>
<refsect2 id="GtkWidget--s-secondary-cursor-color" role="property"><title>The <literal>&quot;secondary-cursor-color&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-secondary-cursor-color"><primary sortas="Widget:secondary-cursor-color">GtkWidget:secondary-cursor-color</primary></indexterm><programlisting>  &quot;secondary-cursor-color&quot;   <link linkend="GdkColor">GdkColor</link>*             : Read</programlisting>
<para>Color with which to draw the secondary insertion cursor when editing mixed right-to-left and left-to-right text.</para></refsect2>
<refsect2 id="GtkWidget--s-separator-height" role="property"><title>The <literal>&quot;separator-height&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-separator-height" role="2.10"><primary sortas="Widget:separator-height">GtkWidget:separator-height</primary></indexterm><programlisting>  &quot;separator-height&quot;         <link linkend="gint">gint</link>                  : Read</programlisting>
<para>
The "separator-height" style property defines the height of separators.
This property only takes effect if <link linkend="GtkWidget--wide-separators"><type>"wide-separators"</type></link> is <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>.</para>
<para>
</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 0</para>
<para>Since 2.10</para>
</refsect2>
<refsect2 id="GtkWidget--s-separator-width" role="property"><title>The <literal>&quot;separator-width&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-separator-width" role="2.10"><primary sortas="Widget:separator-width">GtkWidget:separator-width</primary></indexterm><programlisting>  &quot;separator-width&quot;          <link linkend="gint">gint</link>                  : Read</programlisting>
<para>
The "separator-width" style property defines the width of separators.
This property only takes effect if <link linkend="GtkWidget--wide-separators"><type>"wide-separators"</type></link> is <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>.</para>
<para>
</para><para>Allowed values: &gt;= 0</para>
<para>Default value: 0</para>
<para>Since 2.10</para>
</refsect2>
<refsect2 id="GtkWidget--s-visited-link-color" role="property"><title>The <literal>&quot;visited-link-color&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-visited-link-color" role="2.10"><primary sortas="Widget:visited-link-color">GtkWidget:visited-link-color</primary></indexterm><programlisting>  &quot;visited-link-color&quot;       <link linkend="GdkColor">GdkColor</link>*             : Read</programlisting>
<para>
The "visited-link-color" style property defines the color of visited links.</para>
<para>
</para><para>Since 2.10</para>
</refsect2>
<refsect2 id="GtkWidget--s-wide-separators" role="property"><title>The <literal>&quot;wide-separators&quot;</literal> style property</title>
<indexterm zone="GtkWidget--s-wide-separators" role="2.10"><primary sortas="Widget:wide-separators">GtkWidget:wide-separators</primary></indexterm><programlisting>  &quot;wide-separators&quot;          <link linkend="gboolean">gboolean</link>              : Read</programlisting>
<para>
The "wide-separators" style property defines whether separators have 
configurable width and should be drawn using a box instead of a line.</para>
<para>
</para><para>Default value: FALSE</para>
<para>Since 2.10</para>
</refsect2>

</refsect1>

<refsect1 id="GtkWidget.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="GtkWidget-accel-closures-changed" role="signal"><title>The <literal>&quot;accel-closures-changed&quot;</literal> signal</title>
<indexterm zone="GtkWidget-accel-closures-changed"><primary sortas="Widget::accel-closures-changed">GtkWidget::accel-closures-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="gpointer">gpointer</link>   user_data)</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-button-press-event" role="signal"><title>The <literal>&quot;button-press-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-button-press-event"><primary sortas="Widget::button-press-event">GtkWidget::button-press-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>      *widget,
                                                        <link linkend="GdkEventButton">GdkEventButton</link> *event,
                                                        <link linkend="gpointer">gpointer</link>        user_data)      : Run Last</programlisting>
<para>
The ::button-press-event signal will be emitted when a button
(typically from a mouse) is pressed.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the
widget needs to enable the <link linkend="GDK-BUTTON-PRESS-MASK--CAPS"><type>GDK_BUTTON_PRESS_MASK</type></link> mask.
</para>
<para>
This signal will be sent to the grab widget if there is one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventButton"><type>GdkEventButton</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-button-release-event" role="signal"><title>The <literal>&quot;button-release-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-button-release-event"><primary sortas="Widget::button-release-event">GtkWidget::button-release-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>      *widget,
                                                        <link linkend="GdkEventButton">GdkEventButton</link> *event,
                                                        <link linkend="gpointer">gpointer</link>        user_data)      : Run Last</programlisting>
<para>
The ::button-release-event signal will be emitted when a button
(typically from a mouse) is released.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the 
widget needs to enable the <link linkend="GDK-BUTTON-RELEASE-MASK--CAPS"><type>GDK_BUTTON_RELEASE_MASK</type></link> mask.
</para>
<para>
This signal will be sent to the grab widget if there is one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventButton"><type>GdkEventButton</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-can-activate-accel" role="signal"><title>The <literal>&quot;can-activate-accel&quot;</literal> signal</title>
<indexterm zone="GtkWidget-can-activate-accel"><primary sortas="Widget::can-activate-accel">GtkWidget::can-activate-accel</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="guint">guint</link>      signal_id,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
Determines whether an accelerator that activates the signal
identified by <parameter>signal_id</parameter> can currently be activated.
This signal is present to allow applications and derived
widgets to override the default <link linkend="GtkWidget"><type>GtkWidget</type></link> handling
for determining whether an accelerator can be activated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signal_id</parameter>&#160;:</term>
<listitem><simpara> the ID of a signal installed on <parameter>widget</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the signal can be activated.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-child-notify" role="signal"><title>The <literal>&quot;child-notify&quot;</literal> signal</title>
<indexterm zone="GtkWidget-child-notify"><primary sortas="Widget::child-notify">GtkWidget::child-notify</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link>  *widget,
                                                        <link linkend="GParamSpec">GParamSpec</link> *pspec,
                                                        <link linkend="gpointer">gpointer</link>    user_data)      : Run First / No Recursion / Has Details / No Hooks</programlisting>
<para>
The ::child-notify signal is emitted for each 
<link linkend="child-properties">child property</link>  that has
changed on an object. The signal's detail holds the property name.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pspec</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GParamSpec"><type>GParamSpec</type></link> of the changed child property
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-client-event" role="signal"><title>The <literal>&quot;client-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-client-event"><primary sortas="Widget::client-event">GtkWidget::client-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>      *widget,
                                                        <link linkend="GdkEventClient">GdkEventClient</link> *event,
                                                        <link linkend="gpointer">gpointer</link>        user_data)      : Run Last</programlisting>
<para>
The ::client-event will be emitted when the <parameter>widget</parameter>'s window
receives a message (via a ClientMessage event) from another
application.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventClient"><type>GdkEventClient</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for 
  the event. <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-composited-changed" role="signal"><title>The <literal>&quot;composited-changed&quot;</literal> signal</title>
<indexterm zone="GtkWidget-composited-changed"><primary sortas="Widget::composited-changed">GtkWidget::composited-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last / Action</programlisting>
<para>
The ::composited-changed signal is emitted when the composited
status of <parameter>widget</parameter><!-- -->s screen changes. 
See <link linkend="gdk-screen-is-composited"><function>gdk_screen_is_composited()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object on which the signal is emitted
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-configure-event" role="signal"><title>The <literal>&quot;configure-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-configure-event"><primary sortas="Widget::configure-event">GtkWidget::configure-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>         *widget,
                                                        <link linkend="GdkEventConfigure">GdkEventConfigure</link> *event,
                                                        <link linkend="gpointer">gpointer</link>           user_data)      : Run Last</programlisting>
<para>
The ::configure-event signal will be emitted when the size, position or
stacking of the <parameter>widget</parameter>'s window has changed.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-STRUCTURE-MASK--CAPS"><type>GDK_STRUCTURE_MASK</type></link> mask. GDK will enable this mask
automatically for all new windows.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventConfigure"><type>GdkEventConfigure</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-damage-event" role="signal"><title>The <literal>&quot;damage-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-damage-event" role="2.14"><primary sortas="Widget::damage-event">GtkWidget::damage-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="GdkEvent">GdkEvent</link>  *event,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
Emitted when a redirected window belonging to <parameter>widget</parameter> gets drawn into.
The region/area members of the event shows what area of the redirected
drawable was drawn into.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventExpose"><type>GdkEventExpose</type></link> event
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event.
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.

</simpara></listitem></varlistentry>
</variablelist><para>Since 2.14</para></refsect2><refsect2 id="GtkWidget-delete-event" role="signal"><title>The <literal>&quot;delete-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-delete-event"><primary sortas="Widget::delete-event">GtkWidget::delete-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="GdkEvent">GdkEvent</link>  *event,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
The ::delete-event signal is emitted if a user requests that
a toplevel window is closed. The default handler for this signal
destroys the window. Connecting <link linkend="gtk-widget-hide-on-delete"><function>gtk_widget_hide_on_delete()</function></link> to
this signal will cause the window to be hidden instead, so that
it can later be shown again without reconstructing it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the event which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-destroy-event" role="signal"><title>The <literal>&quot;destroy-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-destroy-event"><primary sortas="Widget::destroy-event">GtkWidget::destroy-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="GdkEvent">GdkEvent</link>  *event,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
The ::destroy-event signal is emitted when a <link linkend="GdkWindow"><type>GdkWindow</type></link> is destroyed.
You rarely get this signal, because most widgets disconnect themselves 
from their window before they destroy it, so no widget owns the 
window at destroy time.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-STRUCTURE-MASK--CAPS"><type>GDK_STRUCTURE_MASK</type></link> mask. GDK will enable this mask
automatically for all new windows.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the event which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-direction-changed" role="signal"><title>The <literal>&quot;direction-changed&quot;</literal> signal</title>
<indexterm zone="GtkWidget-direction-changed"><primary sortas="Widget::direction-changed">GtkWidget::direction-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link>       *widget,
                                                        <link linkend="GtkTextDirection">GtkTextDirection</link> previous_direction,
                                                        <link linkend="gpointer">gpointer</link>         user_data)               : Run First</programlisting>
<para>
The ::direction-changed signal is emitted when the text direction
of a widget changes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object on which the signal is emitted
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>previous_direction</parameter>&#160;:</term>
<listitem><simpara> the previous text direction of <parameter>widget</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-drag-begin" role="signal"><title>The <literal>&quot;drag-begin&quot;</literal> signal</title>
<indexterm zone="GtkWidget-drag-begin"><primary sortas="Widget::drag-begin">GtkWidget::drag-begin</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link>      *widget,
                                                        <link linkend="GdkDragContext">GdkDragContext</link> *drag_context,
                                                        <link linkend="gpointer">gpointer</link>        user_data)         : Run Last</programlisting>
<para>
The ::drag-begin signal is emitted on the drag source when a drag is 
started. A typical reason to connect to this signal is to set up a 
custom drag icon with <link linkend="gtk-drag-source-set-icon"><function>gtk_drag_source_set_icon()</function></link>.
</para>
<para>
Note that some widgets set up a drag icon in the default handler of
this signal, so you may have to use <link linkend="g-signal-connect-after"><function>g_signal_connect_after()</function></link> to
override what the default handler did.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>drag_context</parameter>&#160;:</term>
<listitem><simpara> the drag context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-drag-data-delete" role="signal"><title>The <literal>&quot;drag-data-delete&quot;</literal> signal</title>
<indexterm zone="GtkWidget-drag-data-delete"><primary sortas="Widget::drag-data-delete">GtkWidget::drag-data-delete</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link>      *widget,
                                                        <link linkend="GdkDragContext">GdkDragContext</link> *drag_context,
                                                        <link linkend="gpointer">gpointer</link>        user_data)         : Run Last</programlisting>
<para>
The ::drag-data-delete signal is emitted on the drag source when a drag 
with the action <link linkend="GDK-ACTION-MOVE--CAPS"><literal>GDK_ACTION_MOVE</literal></link> is successfully completed. The signal 
handler is responsible for deleting the data that has been dropped. What 
"delete" means depends on the context of the drag operation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>drag_context</parameter>&#160;:</term>
<listitem><simpara> the drag context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-drag-data-get" role="signal"><title>The <literal>&quot;drag-data-get&quot;</literal> signal</title>
<indexterm zone="GtkWidget-drag-data-get"><primary sortas="Widget::drag-data-get">GtkWidget::drag-data-get</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link>        *widget,
                                                        <link linkend="GdkDragContext">GdkDragContext</link>   *drag_context,
                                                        <link linkend="GtkSelectionData">GtkSelectionData</link> *data,
                                                        <link linkend="guint">guint</link>             info,
                                                        <link linkend="guint">guint</link>             time,
                                                        <link linkend="gpointer">gpointer</link>          user_data)         : Run Last</programlisting>
<para>
The ::drag-data-get signal is emitted on the drag source when the drop 
site requests the data which is dragged. It is the responsibility of 
the signal handler to fill <parameter>data</parameter> with the data in the format which 
is indicated by <parameter>info</parameter>. See <link linkend="gtk-selection-data-set"><function>gtk_selection_data_set()</function></link> and 
<link linkend="gtk-selection-data-set-text"><function>gtk_selection_data_set_text()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>drag_context</parameter>&#160;:</term>
<listitem><simpara> the drag context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GtkSelectionData"><type>GtkSelectionData</type></link> to be filled with the dragged data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>info</parameter>&#160;:</term>
<listitem><simpara> the info that has been registered with the target in the 
       <link linkend="GtkTargetList"><type>GtkTargetList</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>time</parameter>&#160;:</term>
<listitem><simpara> the timestamp at which the data was requested
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-drag-data-received" role="signal"><title>The <literal>&quot;drag-data-received&quot;</literal> signal</title>
<indexterm zone="GtkWidget-drag-data-received"><primary sortas="Widget::drag-data-received">GtkWidget::drag-data-received</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link>        *widget,
                                                        <link linkend="GdkDragContext">GdkDragContext</link>   *drag_context,
                                                        <link linkend="gint">gint</link>              x,
                                                        <link linkend="gint">gint</link>              y,
                                                        <link linkend="GtkSelectionData">GtkSelectionData</link> *data,
                                                        <link linkend="guint">guint</link>             info,
                                                        <link linkend="guint">guint</link>             time,
                                                        <link linkend="gpointer">gpointer</link>          user_data)         : Run Last</programlisting>
<para>
The ::drag-data-received signal is emitted on the drop site when the 
dragged data has been received. If the data was received in order to 
determine whether the drop will be accepted, the handler is expected 
to call <link linkend="gdk-drag-status"><function>gdk_drag_status()</function></link> and <emphasis>not</emphasis> finish the drag. 
If the data was received in response to a <link linkend="GtkWidget-drag-drop"><type>"drag-drop"</type></link> signal 
(and this is the last target to be received), the handler for this 
signal is expected to process the received data and then call 
<link linkend="gtk-drag-finish"><function>gtk_drag_finish()</function></link>, setting the <parameter>success</parameter> parameter depending on whether 
the data was processed successfully. 
</para>
<para>
The handler may inspect and modify <parameter>drag_context->action</parameter> before calling 
<link linkend="gtk-drag-finish"><function>gtk_drag_finish()</function></link>, e.g. to implement <link linkend="GDK-ACTION-ASK--CAPS"><literal>GDK_ACTION_ASK</literal></link> as shown in the 
following example:
<informalexample><programlisting>
void  
drag_data_received (GtkWidget          *widget,
                    GdkDragContext     *drag_context,
                    gint                x,
                    gint                y,
                    GtkSelectionData   *data,
                    guint               info,
                    guint               time)
{
  if ((data->length &gt;= 0) &amp;&amp; (data->format == 8))
    {
      if (drag_context->action == GDK_ACTION_ASK) 
        {
          GtkWidget *dialog;
          gint response;
          
          dialog = gtk_message_dialog_new (NULL,
                                           GTK_DIALOG_MODAL | 
                                           GTK_DIALOG_DESTROY_WITH_PARENT,
                                           GTK_MESSAGE_INFO,
                                           GTK_BUTTONS_YES_NO,
                                           "Move the data ?\n");
          response = gtk_dialog_run (GTK_DIALOG (dialog));
          gtk_widget_destroy (dialog);
            
          if (response == GTK_RESPONSE_YES)
            drag_context->action = GDK_ACTION_MOVE;
          else
            drag_context->action = GDK_ACTION_COPY;
         }
         
      gtk_drag_finish (drag_context, TRUE, FALSE, time);
      return;
    }
      
   gtk_drag_finish (drag_context, FALSE, FALSE, time);
 }
</programlisting></informalexample></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>drag_context</parameter>&#160;:</term>
<listitem><simpara> the drag context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> where the drop happened
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> where the drop happened
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> the received data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>info</parameter>&#160;:</term>
<listitem><simpara> the info that has been registered with the target in the 
       <link linkend="GtkTargetList"><type>GtkTargetList</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>time</parameter>&#160;:</term>
<listitem><simpara> the timestamp at which the data was received
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-drag-drop" role="signal"><title>The <literal>&quot;drag-drop&quot;</literal> signal</title>
<indexterm zone="GtkWidget-drag-drop"><primary sortas="Widget::drag-drop">GtkWidget::drag-drop</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>      *widget,
                                                        <link linkend="GdkDragContext">GdkDragContext</link> *drag_context,
                                                        <link linkend="gint">gint</link>            x,
                                                        <link linkend="gint">gint</link>            y,
                                                        <link linkend="guint">guint</link>           time,
                                                        <link linkend="gpointer">gpointer</link>        user_data)         : Run Last</programlisting>
<para>
The ::drag-drop signal is emitted on the drop site when the user drops 
the data onto the widget. The signal handler must determine whether 
the cursor position is in a drop zone or not. If it is not in a drop 
zone, it returns <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> and no further processing is necessary. 
Otherwise, the handler returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>. In this case, the handler must 
ensure that <link linkend="gtk-drag-finish"><function>gtk_drag_finish()</function></link> is called to let the source know that 
the drop is done. The call to <link linkend="gtk-drag-finish"><function>gtk_drag_finish()</function></link> can be done either 
directly or in a <link linkend="GtkWidget-drag-data-received"><type>"drag-data-received"</type></link> handler which gets 
triggered by calling <link linkend="gtk-drag-get-data"><function>gtk_drag_get_data()</function></link> to receive the data for one 
or more of the supported targets.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>drag_context</parameter>&#160;:</term>
<listitem><simpara> the drag context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> the x coordinate of the current cursor position
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> the y coordinate of the current cursor position
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>time</parameter>&#160;:</term>
<listitem><simpara> the timestamp of the motion event
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>returns</parameter>&#160;:</term>
<listitem><simpara> whether the cursor position is in a drop zone
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-drag-end" role="signal"><title>The <literal>&quot;drag-end&quot;</literal> signal</title>
<indexterm zone="GtkWidget-drag-end"><primary sortas="Widget::drag-end">GtkWidget::drag-end</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link>      *widget,
                                                        <link linkend="GdkDragContext">GdkDragContext</link> *drag_context,
                                                        <link linkend="gpointer">gpointer</link>        user_data)         : Run Last</programlisting>
<para>
The ::drag-end signal is emitted on the drag source when a drag is 
finished.  A typical reason to connect to this signal is to undo 
things done in <link linkend="GtkWidget-drag-begin"><type>"drag-begin"</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>drag_context</parameter>&#160;:</term>
<listitem><simpara> the drag context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-drag-failed" role="signal"><title>The <literal>&quot;drag-failed&quot;</literal> signal</title>
<indexterm zone="GtkWidget-drag-failed" role="2.12"><primary sortas="Widget::drag-failed">GtkWidget::drag-failed</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>      *widget,
                                                        <link linkend="GdkDragContext">GdkDragContext</link> *drag_context,
                                                        <link linkend="GtkDragResult">GtkDragResult</link>   result,
                                                        <link linkend="gpointer">gpointer</link>        user_data)         : Run Last</programlisting>
<para>
The ::drag-failed signal is emitted on the drag source when a drag has
failed. The signal handler may hook custom code to handle a failed DND
operation based on the type of error, it returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> is the failure has
been already handled (not showing the default "drag operation failed"
animation), otherwise it returns <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>drag_context</parameter>&#160;:</term>
<listitem><simpara> the drag context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> the result of the drag operation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the failed drag operation has been already handled.

</simpara></listitem></varlistentry>
</variablelist><para>Since 2.12</para></refsect2><refsect2 id="GtkWidget-drag-leave" role="signal"><title>The <literal>&quot;drag-leave&quot;</literal> signal</title>
<indexterm zone="GtkWidget-drag-leave"><primary sortas="Widget::drag-leave">GtkWidget::drag-leave</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link>      *widget,
                                                        <link linkend="GdkDragContext">GdkDragContext</link> *drag_context,
                                                        <link linkend="guint">guint</link>           time,
                                                        <link linkend="gpointer">gpointer</link>        user_data)         : Run Last</programlisting>
<para>
The ::drag-leave signal is emitted on the drop site when the cursor 
leaves the widget. A typical reason to connect to this signal is to 
undo things done in <link linkend="GtkWidget-drag-motion"><type>"drag-motion"</type></link>, e.g. undo highlighting 
with <link linkend="gtk-drag-unhighlight"><function>gtk_drag_unhighlight()</function></link></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>drag_context</parameter>&#160;:</term>
<listitem><simpara> the drag context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>time</parameter>&#160;:</term>
<listitem><simpara> the timestamp of the motion event
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-drag-motion" role="signal"><title>The <literal>&quot;drag-motion&quot;</literal> signal</title>
<indexterm zone="GtkWidget-drag-motion"><primary sortas="Widget::drag-motion">GtkWidget::drag-motion</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>      *widget,
                                                        <link linkend="GdkDragContext">GdkDragContext</link> *drag_context,
                                                        <link linkend="gint">gint</link>            x,
                                                        <link linkend="gint">gint</link>            y,
                                                        <link linkend="guint">guint</link>           time,
                                                        <link linkend="gpointer">gpointer</link>        user_data)         : Run Last</programlisting>
<para>
The drag-motion signal is emitted on the drop site when the user
moves the cursor over the widget during a drag. The signal handler
must determine whether the cursor position is in a drop zone or not.
If it is not in a drop zone, it returns <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> and no further processing
is necessary. Otherwise, the handler returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>. In this case, the
handler is responsible for providing the necessary information for
displaying feedback to the user, by calling <link linkend="gdk-drag-status"><function>gdk_drag_status()</function></link>.
</para>
<para>
If the decision whether the drop will be accepted or rejected can't be
made based solely on the cursor position and the type of the data, the
handler may inspect the dragged data by calling <link linkend="gtk-drag-get-data"><function>gtk_drag_get_data()</function></link> and
defer the <link linkend="gdk-drag-status"><function>gdk_drag_status()</function></link> call to the <link linkend="GtkWidget-drag-data-received"><type>"drag-data-received"</type></link>
handler. Note that you cannot not pass <link linkend="GTK-DEST-DEFAULT-DROP--CAPS"><type>GTK_DEST_DEFAULT_DROP</type></link>,
<link linkend="GTK-DEST-DEFAULT-MOTION--CAPS"><type>GTK_DEST_DEFAULT_MOTION</type></link> or <link linkend="GTK-DEST-DEFAULT-ALL--CAPS"><type>GTK_DEST_DEFAULT_ALL</type></link> to <link linkend="gtk-drag-dest-set"><function>gtk_drag_dest_set()</function></link>
when using the drag-motion signal that way.
</para>
<para>
Also note that there is no drag-enter signal. The drag receiver has to
keep track of whether he has received any drag-motion signals since the
last <link linkend="GtkWidget-drag-leave"><type>"drag-leave"</type></link> and if not, treat the drag-motion signal as
an "enter" signal. Upon an "enter", the handler will typically highlight
the drop site with <link linkend="gtk-drag-highlight"><function>gtk_drag_highlight()</function></link>.
<informalexample><programlisting>
static void
drag_motion (GtkWidget *widget,
             GdkDragContext *context,
             gint x,
             gint y,
             guint time)
{
  GdkAtom target;
 
  PrivateData *private_data = GET_PRIVATE_DATA (widget);
 
  if (!private_data->drag_highlight) 
   {
     private_data->drag_highlight = 1;
     gtk_drag_highlight (widget);
   }
 
  target = gtk_drag_dest_find_target (widget, context, NULL);
  if (target == GDK_NONE)
    gdk_drag_status (context, 0, time);
  else 
   {
     private_data->pending_status = context->suggested_action;
     gtk_drag_get_data (widget, context, target, time);
   }
 
  return TRUE;
}
  
static void
drag_data_received (GtkWidget        *widget,
                    GdkDragContext   *context,
                    gint              x,
                    gint              y,
                    GtkSelectionData *selection_data,
                    guint             info,
                    guint             time)
{
  PrivateData *private_data = GET_PRIVATE_DATA (widget);
  
  if (private_data->suggested_action) 
   {
     private_data->suggested_action = 0;
     
    /&ast; We are getting this data due to a request in drag_motion,
     * rather than due to a request in drag_drop, so we are just
     * supposed to call gdk_drag_status (), not actually paste in 
     * the data.
     &ast;/
     str = gtk_selection_data_get_text (selection_data);
     if (!data_is_acceptable (str)) 
       gdk_drag_status (context, 0, time);
     else
       gdk_drag_status (context, private_data->suggested_action, time);
   }
  else
   {
     /&ast; accept the drop &ast;/
   }
}
</programlisting></informalexample></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>drag_context</parameter>&#160;:</term>
<listitem><simpara> the drag context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> the x coordinate of the current cursor position
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> the y coordinate of the current cursor position
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>time</parameter>&#160;:</term>
<listitem><simpara> the timestamp of the motion event
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>returns</parameter>&#160;:</term>
<listitem><simpara> whether the cursor position is in a drop zone
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-enter-notify-event" role="signal"><title>The <literal>&quot;enter-notify-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-enter-notify-event"><primary sortas="Widget::enter-notify-event">GtkWidget::enter-notify-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>        *widget,
                                                        <link linkend="GdkEventCrossing">GdkEventCrossing</link> *event,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last</programlisting>
<para>
The ::enter-notify-event will be emitted when the pointer enters
the <parameter>widget</parameter>'s window.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-ENTER-NOTIFY-MASK--CAPS"><type>GDK_ENTER_NOTIFY_MASK</type></link> mask.
</para>
<para>
This signal will be sent to the grab widget if there is one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventCrossing"><type>GdkEventCrossing</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-event" role="signal"><title>The <literal>&quot;event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-event"><primary sortas="Widget::event">GtkWidget::event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="GdkEvent">GdkEvent</link>  *event,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
The GTK+ main loop will emit three signals for each GDK event delivered
to a widget: one generic ::event signal, another, more specific,
signal that matches the type of event delivered (e.g. 
<link linkend="GtkWidget-key-press-event"><type>"key-press-event"</type></link>) and finally a generic 
<link linkend="GtkWidget-event-after"><type>"event-after"</type></link> signal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEvent"><type>GdkEvent</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event 
and to cancel the emission of the second specific ::event signal.
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further and to allow the emission of 
  the second signal. The ::event-after signal is emitted regardless of
  the return value.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-event-after" role="signal"><title>The <literal>&quot;event-after&quot;</literal> signal</title>
<indexterm zone="GtkWidget-event-after"><primary sortas="Widget::event-after">GtkWidget::event-after</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="GdkEvent">GdkEvent</link>  *event,
                                                        <link linkend="gpointer">gpointer</link>   user_data)</programlisting>
<para>
After the emission of the <link linkend="GtkWidget-event"><type>"event"</type></link> signal and (optionally) 
the second more specific signal, ::event-after will be emitted 
regardless of the previous two signals handlers return values.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEvent"><type>GdkEvent</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-expose-event" role="signal"><title>The <literal>&quot;expose-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-expose-event"><primary sortas="Widget::expose-event">GtkWidget::expose-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>      *widget,
                                                        <link linkend="GdkEventExpose">GdkEventExpose</link> *event,
                                                        <link linkend="gpointer">gpointer</link>        user_data)      : Run Last</programlisting>
<para>
The ::expose-event signal is emitted when an area of a previously
obscured <link linkend="GdkWindow"><type>GdkWindow</type></link> is made visible and needs to be redrawn.
<link linkend="GTK-NO-WINDOW--CAPS"><type>GTK_NO_WINDOW</type></link> widgets will get a synthesized event from their parent 
widget.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-EXPOSURE-MASK--CAPS"><type>GDK_EXPOSURE_MASK</type></link> mask.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventExpose"><type>GdkEventExpose</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-focus" role="signal"><title>The <literal>&quot;focus&quot;</literal> signal</title>
<indexterm zone="GtkWidget-focus"><primary sortas="Widget::focus">GtkWidget::focus</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>       *widget,
                                                        <link linkend="GtkDirectionType">GtkDirectionType</link> arg1,
                                                        <link linkend="gpointer">gpointer</link>         user_data)      : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>%TRUE to stop other handlers from being invoked for the event. <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-focus-in-event" role="signal"><title>The <literal>&quot;focus-in-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-focus-in-event"><primary sortas="Widget::focus-in-event">GtkWidget::focus-in-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>     *widget,
                                                        <link linkend="GdkEventFocus">GdkEventFocus</link> *event,
                                                        <link linkend="gpointer">gpointer</link>       user_data)      : Run Last</programlisting>
<para>
The ::focus-in-event signal will be emitted when the keyboard focus
enters the <parameter>widget</parameter>'s window.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-FOCUS-CHANGE-MASK--CAPS"><type>GDK_FOCUS_CHANGE_MASK</type></link> mask.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventFocus"><type>GdkEventFocus</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-focus-out-event" role="signal"><title>The <literal>&quot;focus-out-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-focus-out-event"><primary sortas="Widget::focus-out-event">GtkWidget::focus-out-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>     *widget,
                                                        <link linkend="GdkEventFocus">GdkEventFocus</link> *event,
                                                        <link linkend="gpointer">gpointer</link>       user_data)      : Run Last</programlisting>
<para>
The ::focus-out-event signal will be emitted when the keyboard focus
leaves the <parameter>widget</parameter>'s window.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-FOCUS-CHANGE-MASK--CAPS"><type>GDK_FOCUS_CHANGE_MASK</type></link> mask.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventFocus"><type>GdkEventFocus</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-grab-broken-event" role="signal"><title>The <literal>&quot;grab-broken-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-grab-broken-event" role="2.8"><primary sortas="Widget::grab-broken-event">GtkWidget::grab-broken-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="GdkEvent">GdkEvent</link>  *event,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
Emitted when a pointer or keyboard grab on a window belonging 
to <parameter>widget</parameter> gets broken. 
</para>
<para>
On X11, this happens when the grab window becomes unviewable 
(i.e. it or one of its ancestors is unmapped), or if the same 
application grabs the pointer or keyboard again.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventGrabBroken"><type>GdkEventGrabBroken</type></link> event
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for 
  the event. <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.

</simpara></listitem></varlistentry>
</variablelist><para>Since 2.8</para></refsect2><refsect2 id="GtkWidget-grab-focus" role="signal"><title>The <literal>&quot;grab-focus&quot;</literal> signal</title>
<indexterm zone="GtkWidget-grab-focus"><primary sortas="Widget::grab-focus">GtkWidget::grab-focus</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last / Action</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-grab-notify" role="signal"><title>The <literal>&quot;grab-notify&quot;</literal> signal</title>
<indexterm zone="GtkWidget-grab-notify"><primary sortas="Widget::grab-notify">GtkWidget::grab-notify</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="gboolean">gboolean</link>   was_grabbed,
                                                        <link linkend="gpointer">gpointer</link>   user_data)        : Run First</programlisting>
<para>
The ::grab-notify signal is emitted when a widget becomes
shadowed by a GTK+ grab (not a pointer or keyboard grab) on 
another widget, or when it becomes unshadowed due to a grab 
being removed.
</para>
<para>
A widget is shadowed by a <link linkend="gtk-grab-add"><function>gtk_grab_add()</function></link> when the topmost 
grab widget in the grab stack of its window group is not 
its ancestor.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>was_grabbed</parameter>&#160;:</term>
<listitem><simpara> <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if the widget becomes shadowed, <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>
              if it becomes unshadowed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-hide" role="signal"><title>The <literal>&quot;hide&quot;</literal> signal</title>
<indexterm zone="GtkWidget-hide"><primary sortas="Widget::hide">GtkWidget::hide</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-hierarchy-changed" role="signal"><title>The <literal>&quot;hierarchy-changed&quot;</literal> signal</title>
<indexterm zone="GtkWidget-hierarchy-changed"><primary sortas="Widget::hierarchy-changed">GtkWidget::hierarchy-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="GtkWidget">GtkWidget</link> *previous_toplevel,
                                                        <link linkend="gpointer">gpointer</link>   user_data)              : Run Last</programlisting>
<para>
The ::hierarchy-changed signal is emitted when the
anchored state of a widget changes. A widget is
<firstterm>anchored</firstterm> when its toplevel
ancestor is a <link linkend="GtkWindow"><type>GtkWindow</type></link>. This signal is emitted when
a widget changes from un-anchored to anchored or vice-versa.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object on which the signal is emitted
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>previous_toplevel</parameter>&#160;:</term>
<listitem><simpara> the previous toplevel ancestor, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
  if the widget was previously unanchored
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-key-press-event" role="signal"><title>The <literal>&quot;key-press-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-key-press-event"><primary sortas="Widget::key-press-event">GtkWidget::key-press-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>   *widget,
                                                        <link linkend="GdkEventKey">GdkEventKey</link> *event,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run Last</programlisting>
<para>
The ::key-press-event signal is emitted when a key is pressed.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-KEY-PRESS-MASK--CAPS"><type>GDK_KEY_PRESS_MASK</type></link> mask.
</para>
<para>
This signal will be sent to the grab widget if there is one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventKey"><type>GdkEventKey</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-key-release-event" role="signal"><title>The <literal>&quot;key-release-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-key-release-event"><primary sortas="Widget::key-release-event">GtkWidget::key-release-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>   *widget,
                                                        <link linkend="GdkEventKey">GdkEventKey</link> *event,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run Last</programlisting>
<para>
The ::key-release-event signal is emitted when a key is pressed.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-KEY-RELEASE-MASK--CAPS"><type>GDK_KEY_RELEASE_MASK</type></link> mask.
</para>
<para>
This signal will be sent to the grab widget if there is one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventKey"><type>GdkEventKey</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-keynav-failed" role="signal"><title>The <literal>&quot;keynav-failed&quot;</literal> signal</title>
<indexterm zone="GtkWidget-keynav-failed" role="2.12"><primary sortas="Widget::keynav-failed">GtkWidget::keynav-failed</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>       *widget,
                                                        <link linkend="GtkDirectionType">GtkDirectionType</link> direction,
                                                        <link linkend="gpointer">gpointer</link>         user_data)      : Run Last</programlisting>
<para>
Gets emitted if keyboard navigation fails. 
See <link linkend="gtk-widget-keynav-failed"><function>gtk_widget_keynav_failed()</function></link> for details.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>direction</parameter>&#160;:</term>
<listitem><simpara> the direction of movement
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if stopping keyboard navigation is fine, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>
         if the emitting widget should try to handle the keyboard
         navigation attempt in its parent container(s).

</simpara></listitem></varlistentry>
</variablelist><para>Since 2.12</para></refsect2><refsect2 id="GtkWidget-leave-notify-event" role="signal"><title>The <literal>&quot;leave-notify-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-leave-notify-event"><primary sortas="Widget::leave-notify-event">GtkWidget::leave-notify-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>        *widget,
                                                        <link linkend="GdkEventCrossing">GdkEventCrossing</link> *event,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last</programlisting>
<para>
The ::leave-notify-event will be emitted when the pointer leaves
the <parameter>widget</parameter>'s window.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-LEAVE-NOTIFY-MASK--CAPS"><type>GDK_LEAVE_NOTIFY_MASK</type></link> mask.
</para>
<para>
This signal will be sent to the grab widget if there is one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventCrossing"><type>GdkEventCrossing</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-map" role="signal"><title>The <literal>&quot;map&quot;</literal> signal</title>
<indexterm zone="GtkWidget-map"><primary sortas="Widget::map">GtkWidget::map</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-map-event" role="signal"><title>The <literal>&quot;map-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-map-event"><primary sortas="Widget::map-event">GtkWidget::map-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="GdkEvent">GdkEvent</link>  *event,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
The ::map-event signal will be emitted when the <parameter>widget</parameter>'s window is
mapped. A window is mapped when it becomes visible on the screen.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-STRUCTURE-MASK--CAPS"><type>GDK_STRUCTURE_MASK</type></link> mask. GDK will enable this mask
automatically for all new windows.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventAny"><type>GdkEventAny</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-mnemonic-activate" role="signal"><title>The <literal>&quot;mnemonic-activate&quot;</literal> signal</title>
<indexterm zone="GtkWidget-mnemonic-activate"><primary sortas="Widget::mnemonic-activate">GtkWidget::mnemonic-activate</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="gboolean">gboolean</link>   arg1,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-motion-notify-event" role="signal"><title>The <literal>&quot;motion-notify-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-motion-notify-event"><primary sortas="Widget::motion-notify-event">GtkWidget::motion-notify-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>      *widget,
                                                        <link linkend="GdkEventMotion">GdkEventMotion</link> *event,
                                                        <link linkend="gpointer">gpointer</link>        user_data)      : Run Last</programlisting>
<para>
The ::motion-notify-event signal is emitted when the pointer moves 
over the widget's <link linkend="GdkWindow"><type>GdkWindow</type></link>.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget 
needs to enable the <link linkend="GDK-POINTER-MOTION-MASK--CAPS"><type>GDK_POINTER_MOTION_MASK</type></link> mask.
</para>
<para>
This signal will be sent to the grab widget if there is one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventMotion"><type>GdkEventMotion</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-move-focus" role="signal"><title>The <literal>&quot;move-focus&quot;</literal> signal</title>
<indexterm zone="GtkWidget-move-focus"><primary sortas="Widget::move-focus">GtkWidget::move-focus</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link>       *widget,
                                                        <link linkend="GtkDirectionType">GtkDirectionType</link> arg1,
                                                        <link linkend="gpointer">gpointer</link>         user_data)      : Run Last / Action</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-no-expose-event" role="signal"><title>The <literal>&quot;no-expose-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-no-expose-event"><primary sortas="Widget::no-expose-event">GtkWidget::no-expose-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>        *widget,
                                                        <link linkend="GdkEventNoExpose">GdkEventNoExpose</link> *event,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last</programlisting>
<para>
The ::no-expose-event will be emitted when the <parameter>widget</parameter>'s window is 
drawn as a copy of another <link linkend="GdkDrawable"><type>GdkDrawable</type></link> (with <link linkend="gdk-draw-drawable"><function>gdk_draw_drawable()</function></link> or
<link linkend="gdk-window-copy-area"><function>gdk_window_copy_area()</function></link>) which was completely unobscured. If the source
window was partially obscured <link linkend="GdkEventExpose"><type>GdkEventExpose</type></link> events will be generated
for those areas.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventNoExpose"><type>GdkEventNoExpose</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-parent-set" role="signal"><title>The <literal>&quot;parent-set&quot;</literal> signal</title>
<indexterm zone="GtkWidget-parent-set"><primary sortas="Widget::parent-set">GtkWidget::parent-set</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="GtkObject">GtkObject</link> *old_parent,
                                                        <link linkend="gpointer">gpointer</link>   user_data)       : Run First</programlisting>
<para>
The ::parent-set signal is emitted when a new parent 
has been set on a widget.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object on which the signal is emitted
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>old_parent</parameter>&#160;:</term>
<listitem><simpara> the previous parent, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the widget 
  just got its initial parent.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-popup-menu" role="signal"><title>The <literal>&quot;popup-menu&quot;</literal> signal</title>
<indexterm zone="GtkWidget-popup-menu"><primary sortas="Widget::popup-menu">GtkWidget::popup-menu</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last / Action</programlisting>
<para>
This signal gets emitted whenever a widget should pop up a context 
menu. This usually happens through the standard key binding mechanism; 
by pressing a certain key while a widget is focused, the user can cause 
the widget to pop up a menu.  For example, the <link linkend="GtkEntry"><type>GtkEntry</type></link> widget creates 
a menu with clipboard commands. See <xref linkend="checklist-popup-menu"/> 
for an example of how to use this signal.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if a menu was activated
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-property-notify-event" role="signal"><title>The <literal>&quot;property-notify-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-property-notify-event"><primary sortas="Widget::property-notify-event">GtkWidget::property-notify-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>        *widget,
                                                        <link linkend="GdkEventProperty">GdkEventProperty</link> *event,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last</programlisting>
<para>
The ::property-notify-event signal will be emitted when a property on
the <parameter>widget</parameter>'s window has been changed or deleted.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-PROPERTY-CHANGE-MASK--CAPS"><type>GDK_PROPERTY_CHANGE_MASK</type></link> mask.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventProperty"><type>GdkEventProperty</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-proximity-in-event" role="signal"><title>The <literal>&quot;proximity-in-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-proximity-in-event"><primary sortas="Widget::proximity-in-event">GtkWidget::proximity-in-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>         *widget,
                                                        <link linkend="GdkEventProximity">GdkEventProximity</link> *event,
                                                        <link linkend="gpointer">gpointer</link>           user_data)      : Run Last</programlisting>
<para>
To receive this signal the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-PROXIMITY-IN-MASK--CAPS"><type>GDK_PROXIMITY_IN_MASK</type></link> mask.
</para>
<para>
This signal will be sent to the grab widget if there is one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventProximity"><type>GdkEventProximity</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-proximity-out-event" role="signal"><title>The <literal>&quot;proximity-out-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-proximity-out-event"><primary sortas="Widget::proximity-out-event">GtkWidget::proximity-out-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>         *widget,
                                                        <link linkend="GdkEventProximity">GdkEventProximity</link> *event,
                                                        <link linkend="gpointer">gpointer</link>           user_data)      : Run Last</programlisting>
<para>
To receive this signal the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-PROXIMITY-OUT-MASK--CAPS"><type>GDK_PROXIMITY_OUT_MASK</type></link> mask.
</para>
<para>
This signal will be sent to the grab widget if there is one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventProximity"><type>GdkEventProximity</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-query-tooltip" role="signal"><title>The <literal>&quot;query-tooltip&quot;</literal> signal</title>
<indexterm zone="GtkWidget-query-tooltip" role="2.12"><primary sortas="Widget::query-tooltip">GtkWidget::query-tooltip</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>  *widget,
                                                        <link linkend="gint">gint</link>        x,
                                                        <link linkend="gint">gint</link>        y,
                                                        <link linkend="gboolean">gboolean</link>    keyboard_mode,
                                                        <link linkend="GtkTooltip">GtkTooltip</link> *tooltip,
                                                        <link linkend="gpointer">gpointer</link>    user_data)          : Run Last</programlisting>
<para>
Emitted when <link linkend="GtkWidget--has-tooltip"><type>"has-tooltip"</type></link> is <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> and the <link linkend="GtkSettings--gtk-tooltip-timeout"><type>"gtk-tooltip-timeout"</type></link> 
has expired with the cursor hovering "above" <parameter>widget</parameter>; or emitted when <parameter>widget</parameter> got 
focus in keyboard mode.
</para>
<para>
Using the given coordinates, the signal handler should determine
whether a tooltip should be shown for <parameter>widget</parameter>. If this is the case
<link linkend="TRUE--CAPS"><literal>TRUE</literal></link> should be returned, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise.  Note that if
<parameter>keyboard_mode</parameter> is <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, the values of <parameter>x</parameter> and <parameter>y</parameter> are undefined and
should not be used.
</para>
<para>
The signal handler is free to manipulate <parameter>tooltip</parameter> with the therefore
destined function calls.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> the x coordinate of the cursor position where the request has 
    been emitted, relative to <parameter>widget->window</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> the y coordinate of the cursor position where the request has 
    been emitted, relative to <parameter>widget->window</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyboard_mode</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the tooltip was trigged using the keyboard
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tooltip</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GtkTooltip"><type>GtkTooltip</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>tooltip</parameter> should be shown right now, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise.

</simpara></listitem></varlistentry>
</variablelist><para>Since 2.12</para></refsect2><refsect2 id="GtkWidget-realize" role="signal"><title>The <literal>&quot;realize&quot;</literal> signal</title>
<indexterm zone="GtkWidget-realize"><primary sortas="Widget::realize">GtkWidget::realize</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-screen-changed" role="signal"><title>The <literal>&quot;screen-changed&quot;</literal> signal</title>
<indexterm zone="GtkWidget-screen-changed"><primary sortas="Widget::screen-changed">GtkWidget::screen-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="GdkScreen">GdkScreen</link> *previous_screen,
                                                        <link linkend="gpointer">gpointer</link>   user_data)            : Run Last</programlisting>
<para>
The ::screen-changed signal gets emitted when the
screen of a widget has changed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object on which the signal is emitted
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>previous_screen</parameter>&#160;:</term>
<listitem><simpara> the previous screen, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the
  widget was not associated with a screen before
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-scroll-event" role="signal"><title>The <literal>&quot;scroll-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-scroll-event"><primary sortas="Widget::scroll-event">GtkWidget::scroll-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>      *widget,
                                                        <link linkend="GdkEventScroll">GdkEventScroll</link> *event,
                                                        <link linkend="gpointer">gpointer</link>        user_data)      : Run Last</programlisting>
<para>
The ::scroll-event signal is emitted when a button in the 4 to 7
range is pressed. Wheel mice are usually configured to generate 
button press events for buttons 4 and 5 when the wheel is turned.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-BUTTON-PRESS-MASK--CAPS"><type>GDK_BUTTON_PRESS_MASK</type></link> mask.
</para>
<para>
This signal will be sent to the grab widget if there is one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventScroll"><type>GdkEventScroll</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-selection-clear-event" role="signal"><title>The <literal>&quot;selection-clear-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-selection-clear-event"><primary sortas="Widget::selection-clear-event">GtkWidget::selection-clear-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>         *widget,
                                                        <link linkend="GdkEventSelection">GdkEventSelection</link> *event,
                                                        <link linkend="gpointer">gpointer</link>           user_data)      : Run Last</programlisting>
<para>
The ::selection-clear-event signal will be emitted when the
the <parameter>widget</parameter>'s window has lost ownership of a selection.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventSelection"><type>GdkEventSelection</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-selection-get" role="signal"><title>The <literal>&quot;selection-get&quot;</literal> signal</title>
<indexterm zone="GtkWidget-selection-get"><primary sortas="Widget::selection-get">GtkWidget::selection-get</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link>        *widget,
                                                        <link linkend="GtkSelectionData">GtkSelectionData</link> *data,
                                                        <link linkend="guint">guint</link>             info,
                                                        <link linkend="guint">guint</link>             time,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>info</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>time</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-selection-notify-event" role="signal"><title>The <literal>&quot;selection-notify-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-selection-notify-event"><primary sortas="Widget::selection-notify-event">GtkWidget::selection-notify-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>         *widget,
                                                        <link linkend="GdkEventSelection">GdkEventSelection</link> *event,
                                                        <link linkend="gpointer">gpointer</link>           user_data)      : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>%TRUE to stop other handlers from being invoked for the event. <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-selection-received" role="signal"><title>The <literal>&quot;selection-received&quot;</literal> signal</title>
<indexterm zone="GtkWidget-selection-received"><primary sortas="Widget::selection-received">GtkWidget::selection-received</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link>        *widget,
                                                        <link linkend="GtkSelectionData">GtkSelectionData</link> *data,
                                                        <link linkend="guint">guint</link>             time,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>time</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-selection-request-event" role="signal"><title>The <literal>&quot;selection-request-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-selection-request-event"><primary sortas="Widget::selection-request-event">GtkWidget::selection-request-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>         *widget,
                                                        <link linkend="GdkEventSelection">GdkEventSelection</link> *event,
                                                        <link linkend="gpointer">gpointer</link>           user_data)      : Run Last</programlisting>
<para>
The ::selection-request-event signal will be emitted when
another client requests ownership of the selection owned by
the <parameter>widget</parameter>'s window.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventSelection"><type>GdkEventSelection</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-show" role="signal"><title>The <literal>&quot;show&quot;</literal> signal</title>
<indexterm zone="GtkWidget-show"><primary sortas="Widget::show">GtkWidget::show</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-show-help" role="signal"><title>The <literal>&quot;show-help&quot;</literal> signal</title>
<indexterm zone="GtkWidget-show-help"><primary sortas="Widget::show-help">GtkWidget::show-help</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>        *widget,
                                                        <link linkend="GtkWidgetHelpType">GtkWidgetHelpType</link> arg1,
                                                        <link linkend="gpointer">gpointer</link>          user_data)      : Run Last / Action</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-size-allocate" role="signal"><title>The <literal>&quot;size-allocate&quot;</literal> signal</title>
<indexterm zone="GtkWidget-size-allocate"><primary sortas="Widget::size-allocate">GtkWidget::size-allocate</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link>     *widget,
                                                        <link linkend="GtkAllocation">GtkAllocation</link> *allocation,
                                                        <link linkend="gpointer">gpointer</link>       user_data)       : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>allocation</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-size-request" role="signal"><title>The <literal>&quot;size-request&quot;</literal> signal</title>
<indexterm zone="GtkWidget-size-request"><primary sortas="Widget::size-request">GtkWidget::size-request</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link>      *widget,
                                                        <link linkend="GtkRequisition">GtkRequisition</link> *requisition,
                                                        <link linkend="gpointer">gpointer</link>        user_data)        : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>requisition</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-state-changed" role="signal"><title>The <literal>&quot;state-changed&quot;</literal> signal</title>
<indexterm zone="GtkWidget-state-changed"><primary sortas="Widget::state-changed">GtkWidget::state-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link>   *widget,
                                                        <link linkend="GtkStateType">GtkStateType</link> state,
                                                        <link linkend="gpointer">gpointer</link>     user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-style-set" role="signal"><title>The <literal>&quot;style-set&quot;</literal> signal</title>
<indexterm zone="GtkWidget-style-set"><primary sortas="Widget::style-set">GtkWidget::style-set</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="GtkStyle">GtkStyle</link>  *previous_style,
                                                        <link linkend="gpointer">gpointer</link>   user_data)           : Run First</programlisting>
<para>
The ::style-set signal is emitted when a new style has been set 
on a widget. Note that style-modifying functions like 
<link linkend="gtk-widget-modify-base"><function>gtk_widget_modify_base()</function></link> also cause this signal to be emitted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object on which the signal is emitted
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>previous_style</parameter>&#160;:</term>
<listitem><simpara> the previous style, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the widget 
  just got its initial style 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-unmap" role="signal"><title>The <literal>&quot;unmap&quot;</literal> signal</title>
<indexterm zone="GtkWidget-unmap"><primary sortas="Widget::unmap">GtkWidget::unmap</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-unmap-event" role="signal"><title>The <literal>&quot;unmap-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-unmap-event"><primary sortas="Widget::unmap-event">GtkWidget::unmap-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="GdkEvent">GdkEvent</link>  *event,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
The ::unmap-event signal will be emitted when the <parameter>widget</parameter>'s window is
unmapped. A window is unmapped when it becomes invisible on the screen.
</para>
<para>
To receive this signal, the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-STRUCTURE-MASK--CAPS"><type>GDK_STRUCTURE_MASK</type></link> mask. GDK will enable this mask
automatically for all new windows.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventAny"><type>GdkEventAny</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-unrealize" role="signal"><title>The <literal>&quot;unrealize&quot;</literal> signal</title>
<indexterm zone="GtkWidget-unrealize"><primary sortas="Widget::unrealize">GtkWidget::unrealize</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GtkWidget">GtkWidget</link> *widget,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-visibility-notify-event" role="signal"><title>The <literal>&quot;visibility-notify-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-visibility-notify-event"><primary sortas="Widget::visibility-notify-event">GtkWidget::visibility-notify-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>          *widget,
                                                        <link linkend="GdkEventVisibility">GdkEventVisibility</link> *event,
                                                        <link linkend="gpointer">gpointer</link>            user_data)      : Run Last</programlisting>
<para>
The ::visibility-notify-event will be emitted when the <parameter>widget</parameter>'s window
is obscured or unobscured.
</para>
<para>
To receive this signal the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget needs
to enable the <link linkend="GDK-VISIBILITY-NOTIFY-MASK--CAPS"><type>GDK_VISIBILITY_NOTIFY_MASK</type></link> mask.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventVisibility"><type>GdkEventVisibility</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the event. 
  <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GtkWidget-window-state-event" role="signal"><title>The <literal>&quot;window-state-event&quot;</literal> signal</title>
<indexterm zone="GtkWidget-window-state-event"><primary sortas="Widget::window-state-event">GtkWidget::window-state-event</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            user_function                      (<link linkend="GtkWidget">GtkWidget</link>           *widget,
                                                        <link linkend="GdkEventWindowState">GdkEventWindowState</link> *event,
                                                        <link linkend="gpointer">gpointer</link>             user_data)      : Run Last</programlisting>
<para>
The ::window-state-event will be emitted when the state of the 
toplevel window associated to the <parameter>widget</parameter> changes.
</para>
<para>
To receive this signal the <link linkend="GdkWindow"><type>GdkWindow</type></link> associated to the widget 
needs to enable the <link linkend="GDK-STRUCTURE-MASK--CAPS"><type>GDK_STRUCTURE_MASK</type></link> mask. GDK will enable 
this mask automatically for all new windows.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> the object which received the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="GdkEventWindowState"><type>GdkEventWindowState</type></link> which triggered this signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> to stop other handlers from being invoked for the 
  event. <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> to propagate the event further.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
